[
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/openai/#pydantic_aimodelsopenai)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.openai`\n\n## Setup\n\nFor details on how to set up authentication with this model, see [model configuration for OpenAI](https://ai.pydantic.dev/models/#openai).\n\n### OpenAIModelName`module-attribute`\n\n```\nOpenAIModelName = Union[str, ChatModel]\n\n```\n\nPossible OpenAI model names.\n\nSince OpenAI supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [the OpenAI docs](https://platform.openai.com/docs/models) for a full list.\n\nUsing this more broad type for the model name instead of the ChatModel definition\nallows this model to be used more easily with other model types (ie, Ollama, Deepseek).\n\n### OpenAIModelSettings\n\nBases: `ModelSettings`\n\nSettings used for an OpenAI model request.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n\n|     |     |\n| --- | --- |\n| ```<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>``` | ```<br>class OpenAIModelSettings(ModelSettings):<br>    \"\"\"Settings used for an OpenAI model request.\"\"\"<br>    openai_reasoning_effort: chat.ChatCompletionReasoningEffort<br>    \"\"\"<br>    Constrains effort on reasoning for [reasoning models](https://platform.openai.com/docs/guides/reasoning).<br>    Currently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can<br>    result in faster responses and fewer tokens used on reasoning in a response.<br>    \"\"\"<br>``` |\n\n#### openai\\_reasoning\\_effort`instance-attribute`\n\n```\nopenai_reasoning_effort: ChatCompletionReasoningEffort\n\n```\n\nConstrains effort on reasoning for [reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\nresult in faster responses and fewer tokens used on reasoning in a response.\n\n### OpenAIModel`dataclass`\n\nBases: `Model`\n\nA model that uses the OpenAI API.\n\nInternally, this uses the [OpenAI Python client](https://github.com/openai/openai-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>``` | ```<br>@dataclass(init=False)<br>class OpenAIModel(Model):<br>    \"\"\"A model that uses the OpenAI API.<br>    Internally, this uses the [OpenAI Python client](https://github.com/openai/openai-python) to interact with the API.<br>    Apart from `__init__`, all methods are private or match those of the base class.<br>    \"\"\"<br>    client: AsyncOpenAI = field(repr=False)<br>    system_prompt_role: OpenAISystemPromptRole | None = field(default=None)<br>    _model_name: OpenAIModelName = field(repr=False)<br>    _system: str | None = field(repr=False)<br>    def __init__(<br>        self,<br>        model_name: OpenAIModelName,<br>        *,<br>        base_url: str | None = None,<br>        api_key: str | None = None,<br>        openai_client: AsyncOpenAI | None = None,<br>        http_client: AsyncHTTPClient | None = None,<br>        system_prompt_role: OpenAISystemPromptRole | None = None,<br>        system: str | None = 'openai',<br>    ):<br>        \"\"\"Initialize an OpenAI model.<br>        Args:<br>            model_name: The name of the OpenAI model to use. List of model names available<br>                [here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7)<br>                (Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API).<br>            base_url: The base url for the OpenAI requests. If not provided, the `OPENAI_BASE_URL` environment variable<br>                will be used if available. Otherwise, defaults to OpenAI's base url.<br>            api_key: The API key to use for authentication, if not provided, the `OPENAI_API_KEY` environment variable<br>                will be used if available.<br>            openai_client: An existing<br>                [`AsyncOpenAI`](https://github.com/openai/openai-python?tab=readme-ov-file#async-usage)<br>                client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`.<br>            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>            system_prompt_role: The role to use for the system prompt message. If not provided, defaults to `'system'`.<br>                In the future, this may be inferred from the model name.<br>            system: The model provider used, defaults to `openai`. This is for observability purposes, you must<br>                customize the `base_url` and `api_key` to use a different provider.<br>        \"\"\"<br>        self._model_name = model_name<br>        # This is a workaround for the OpenAI client requiring an API key, whilst locally served,<br>        # openai compatible models do not always need an API key, but a placeholder (non-empty) key is required.<br>        if api_key is None and 'OPENAI_API_KEY' not in os.environ and base_url is not None and openai_client is None:<br>            api_key = 'api-key-not-set'<br>        if openai_client is not None:<br>            assert http_client is None, 'Cannot provide both `openai_client` and `http_client`'<br>            assert base_url is None, 'Cannot provide both `openai_client` and `base_url`'<br>            assert api_key is None, 'Cannot provide both `openai_client` and `api_key`'<br>            self.client = openai_client<br>        elif http_client is not None:<br>            self.client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=http_client)<br>        else:<br>            self.client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=cached_async_http_client())<br>        self.system_prompt_role = system_prompt_role<br>        self._system = system<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, usage.Usage]:<br>        check_allow_model_requests()<br>        response = await self._completions_create(<br>            messages, False, cast(OpenAIModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        return self._process_response(response), _map_usage(response)<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        check_allow_model_requests()<br>        response = await self._completions_create(<br>            messages, True, cast(OpenAIModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        async with response:<br>            yield await self._process_streamed_response(response)<br>    @property<br>    def model_name(self) -> OpenAIModelName:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>    @overload<br>    async def _completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: Literal[True],<br>        model_settings: OpenAIModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncStream[ChatCompletionChunk]:<br>        pass<br>    @overload<br>    async def _completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: Literal[False],<br>        model_settings: OpenAIModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> chat.ChatCompletion:<br>        pass<br>    async def _completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: bool,<br>        model_settings: OpenAIModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> chat.ChatCompletion | AsyncStream[ChatCompletionChunk]:<br>        tools = self._get_tools(model_request_parameters)<br>        # standalone function to make it easier to override<br>        if not tools:<br>            tool_choice: Literal['none', 'required', 'auto'] | None = None<br>        elif not model_request_parameters.allow_text_result:<br>            tool_choice = 'required'<br>        else:<br>            tool_choice = 'auto'<br>        openai_messages = list(chain(*(self._map_message(m) for m in messages)))<br>        return await self.client.chat.completions.create(<br>            model=self._model_name,<br>            messages=openai_messages,<br>            n=1,<br>            parallel_tool_calls=model_settings.get('parallel_tool_calls', NOT_GIVEN),<br>            tools=tools or NOT_GIVEN,<br>            tool_choice=tool_choice or NOT_GIVEN,<br>            stream=stream,<br>            stream_options={'include_usage': True} if stream else NOT_GIVEN,<br>            max_tokens=model_settings.get('max_tokens', NOT_GIVEN),<br>            temperature=model_settings.get('temperature', NOT_GIVEN),<br>            top_p=model_settings.get('top_p', NOT_GIVEN),<br>            timeout=model_settings.get('timeout', NOT_GIVEN),<br>            seed=model_settings.get('seed', NOT_GIVEN),<br>            presence_penalty=model_settings.get('presence_penalty', NOT_GIVEN),<br>            frequency_penalty=model_settings.get('frequency_penalty', NOT_GIVEN),<br>            logit_bias=model_settings.get('logit_bias', NOT_GIVEN),<br>            reasoning_effort=model_settings.get('openai_reasoning_effort', NOT_GIVEN),<br>        )<br>    def _process_response(self, response: chat.ChatCompletion) -> ModelResponse:<br>        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"<br>        timestamp = datetime.fromtimestamp(response.created, tz=timezone.utc)<br>        choice = response.choices[0]<br>        items: list[ModelResponsePart] = []<br>        if choice.message.content is not None:<br>            items.append(TextPart(choice.message.content))<br>        if choice.message.tool_calls is not None:<br>            for c in choice.message.tool_calls:<br>                items.append(ToolCallPart(c.function.name, c.function.arguments, c.id))<br>        return ModelResponse(items, model_name=response.model, timestamp=timestamp)<br>    async def _process_streamed_response(self, response: AsyncStream[ChatCompletionChunk]) -> OpenAIStreamedResponse:<br>        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"<br>        peekable_response = _utils.PeekableAsyncStream(response)<br>        first_chunk = await peekable_response.peek()<br>        if isinstance(first_chunk, _utils.Unset):<br>            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')<br>        return OpenAIStreamedResponse(<br>            _model_name=self._model_name,<br>            _response=peekable_response,<br>            _timestamp=datetime.fromtimestamp(first_chunk.created, tz=timezone.utc),<br>        )<br>    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[chat.ChatCompletionToolParam]:<br>        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]<br>        if model_request_parameters.result_tools:<br>            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]<br>        return tools<br>    def _map_message(self, message: ModelMessage) -> Iterable[chat.ChatCompletionMessageParam]:<br>        \"\"\"Just maps a `pydantic_ai.Message` to a `openai.types.ChatCompletionMessageParam`.\"\"\"<br>        if isinstance(message, ModelRequest):<br>            yield from self._map_user_message(message)<br>        elif isinstance(message, ModelResponse):<br>            texts: list[str] = []<br>            tool_calls: list[chat.ChatCompletionMessageToolCallParam] = []<br>            for item in message.parts:<br>                if isinstance(item, TextPart):<br>                    texts.append(item.content)<br>                elif isinstance(item, ToolCallPart):<br>                    tool_calls.append(self._map_tool_call(item))<br>                else:<br>                    assert_never(item)<br>            message_param = chat.ChatCompletionAssistantMessageParam(role='assistant')<br>            if texts:<br>                # Note: model responses from this model should only have one text item, so the following<br>                # shouldn't merge multiple texts into one unless you switch models between runs:<br>                message_param['content'] = '\\n\\n'.join(texts)<br>            if tool_calls:<br>                message_param['tool_calls'] = tool_calls<br>            yield message_param<br>        else:<br>            assert_never(message)<br>    @staticmethod<br>    def _map_tool_call(t: ToolCallPart) -> chat.ChatCompletionMessageToolCallParam:<br>        return chat.ChatCompletionMessageToolCallParam(<br>            id=_guard_tool_call_id(t=t, model_source='OpenAI'),<br>            type='function',<br>            function={'name': t.tool_name, 'arguments': t.args_as_json_str()},<br>        )<br>    @staticmethod<br>    def _map_tool_definition(f: ToolDefinition) -> chat.ChatCompletionToolParam:<br>        return {<br>            'type': 'function',<br>            'function': {<br>                'name': f.name,<br>                'description': f.description,<br>                'parameters': f.parameters_json_schema,<br>            },<br>        }<br>    def _map_user_message(self, message: ModelRequest) -> Iterable[chat.ChatCompletionMessageParam]:<br>        for part in message.parts:<br>            if isinstance(part, SystemPromptPart):<br>                if self.system_prompt_role == 'developer':<br>                    yield chat.ChatCompletionDeveloperMessageParam(role='developer', content=part.content)<br>                elif self.system_prompt_role == 'user':<br>                    yield chat.ChatCompletionUserMessageParam(role='user', content=part.content)<br>                else:<br>                    yield chat.ChatCompletionSystemMessageParam(role='system', content=part.content)<br>            elif isinstance(part, UserPromptPart):<br>                yield chat.ChatCompletionUserMessageParam(role='user', content=part.content)<br>            elif isinstance(part, ToolReturnPart):<br>                yield chat.ChatCompletionToolMessageParam(<br>                    role='tool',<br>                    tool_call_id=_guard_tool_call_id(t=part, model_source='OpenAI'),<br>                    content=part.model_response_str(),<br>                )<br>            elif isinstance(part, RetryPromptPart):<br>                if part.tool_name is None:<br>                    yield chat.ChatCompletionUserMessageParam(role='user', content=part.model_response())<br>                else:<br>                    yield chat.ChatCompletionToolMessageParam(<br>                        role='tool',<br>                        tool_call_id=_guard_tool_call_id(t=part, model_source='OpenAI'),<br>                        content=part.model_response(),<br>                    )<br>            else:<br>                assert_never(part)<br>``` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: OpenAIModelName,\n    *,\n    base_url: str | None = None,\n    api_key: str | None = None,\n    openai_client: AsyncOpenAI | None = None,\n    http_client: AsyncClient | None = None,\n    system_prompt_role: (\n        OpenAISystemPromptRole | None\n    ) = None,\n    system: str | None = \"openai\"\n)\n\n```\n\nInitialize an OpenAI model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `OpenAIModelName` | The name of the OpenAI model to use. List of model names available<br>[here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7)<br>(Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API). | _required_ |\n| `base_url` | `str | None` | The base url for the OpenAI requests. If not provided, the `OPENAI_BASE_URL` environment variable<br>will be used if available. Otherwise, defaults to OpenAI's base url. | `None` |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `OPENAI_API_KEY` environment variable<br>will be used if available. | `None` |\n| `openai_client` | `AsyncOpenAI | None` | An existing<br>[`AsyncOpenAI`](https://github.com/openai/openai-python?tab=readme-ov-file#async-usage)<br>client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n| `system_prompt_role` | `OpenAISystemPromptRole | None` | The role to use for the system prompt message. If not provided, defaults to `'system'`.<br>In the future, this may be inferred from the model name. | `None` |\n| `system` | `str | None` | The model provider used, defaults to `openai`. This is for observability purposes, you must<br>customize the `base_url` and `api_key` to use a different provider. | `'openai'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>``` | ```<br>def __init__(<br>    self,<br>    model_name: OpenAIModelName,<br>    *,<br>    base_url: str | None = None,<br>    api_key: str | None = None,<br>    openai_client: AsyncOpenAI | None = None,<br>    http_client: AsyncHTTPClient | None = None,<br>    system_prompt_role: OpenAISystemPromptRole | None = None,<br>    system: str | None = 'openai',<br>):<br>    \"\"\"Initialize an OpenAI model.<br>    Args:<br>        model_name: The name of the OpenAI model to use. List of model names available<br>            [here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7)<br>            (Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API).<br>        base_url: The base url for the OpenAI requests. If not provided, the `OPENAI_BASE_URL` environment variable<br>            will be used if available. Otherwise, defaults to OpenAI's base url.<br>        api_key: The API key to use for authentication, if not provided, the `OPENAI_API_KEY` environment variable<br>            will be used if available.<br>        openai_client: An existing<br>            [`AsyncOpenAI`](https://github.com/openai/openai-python?tab=readme-ov-file#async-usage)<br>            client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`.<br>        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>        system_prompt_role: The role to use for the system prompt message. If not provided, defaults to `'system'`.<br>            In the future, this may be inferred from the model name.<br>        system: The model provider used, defaults to `openai`. This is for observability purposes, you must<br>            customize the `base_url` and `api_key` to use a different provider.<br>    \"\"\"<br>    self._model_name = model_name<br>    # This is a workaround for the OpenAI client requiring an API key, whilst locally served,<br>    # openai compatible models do not always need an API key, but a placeholder (non-empty) key is required.<br>    if api_key is None and 'OPENAI_API_KEY' not in os.environ and base_url is not None and openai_client is None:<br>        api_key = 'api-key-not-set'<br>    if openai_client is not None:<br>        assert http_client is None, 'Cannot provide both `openai_client` and `http_client`'<br>        assert base_url is None, 'Cannot provide both `openai_client` and `base_url`'<br>        assert api_key is None, 'Cannot provide both `openai_client` and `api_key`'<br>        self.client = openai_client<br>    elif http_client is not None:<br>        self.client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=http_client)<br>    else:<br>        self.client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=cached_async_http_client())<br>    self.system_prompt_role = system_prompt_role<br>    self._system = system<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: OpenAIModelName\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### OpenAIStreamedResponse`dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for OpenAI models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n\n|     |     |\n| --- | --- |\n| ```<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>``` | ```<br>@dataclass<br>class OpenAIStreamedResponse(StreamedResponse):<br>    \"\"\"Implementation of `StreamedResponse` for OpenAI models.\"\"\"<br>    _model_name: OpenAIModelName<br>    _response: AsyncIterable[ChatCompletionChunk]<br>    _timestamp: datetime<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        async for chunk in self._response:<br>            self._usage += _map_usage(chunk)<br>            try:<br>                choice = chunk.choices[0]<br>            except IndexError:<br>                continue<br>            # Handle the text part of the response<br>            content = choice.delta.content<br>            if content is not None:<br>                yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=content)<br>            for dtc in choice.delta.tool_calls or []:<br>                maybe_event = self._parts_manager.handle_tool_call_delta(<br>                    vendor_part_id=dtc.index,<br>                    tool_name=dtc.function and dtc.function.name,<br>                    args=dtc.function and dtc.function.arguments,<br>                    tool_call_id=dtc.id,<br>                )<br>                if maybe_event is not None:<br>                    yield maybe_event<br>    @property<br>    def model_name(self) -> OpenAIModelName:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        return self._model_name<br>    @property<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._timestamp<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: OpenAIModelName\n\n```\n\nGet the model name of the response.\n\n#### timestamp`property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/openai/",
      "ogUrl": "https://ai.pydantic.dev/api/models/openai/",
      "title": "pydantic_ai.models.openai - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/openai/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/openai.png",
      "ogTitle": "pydantic_ai.models.openai - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/openai.png",
      "og:title": "pydantic_ai.models.openai - PydanticAI",
      "scrapeId": "2ed380c5-5454-4973-b5eb-caaebac011b8",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/openai/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/openai.png",
      "twitter:title": "pydantic_ai.models.openai - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/format_as_xml/#pydantic_aiformat_as_xml)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.format_as_xml`\n\n### format\\_as\\_xml\n\n```\nformat_as_xml(\n    obj: Any,\n    root_tag: str = \"examples\",\n    item_tag: str = \"example\",\n    include_root_tag: bool = True,\n    none_str: str = \"null\",\n    indent: str | None = \"  \",\n) -> str\n\n```\n\nFormat a Python object as XML.\n\nThis is useful since LLMs often find it easier to read semi-structured data (e.g. examples) as XML,\nrather than JSON etc.\n\nSupports: `str`, `bytes`, `bytearray`, `bool`, `int`, `float`, `date`, `datetime`, `Mapping`,\n`Iterable`, `dataclass`, and `BaseModel`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `obj` | `Any` | Python Object to serialize to XML. | _required_ |\n| `root_tag` | `str` | Outer tag to wrap the XML in, use `None` to omit the outer tag. | `'examples'` |\n| `item_tag` | `str` | Tag to use for each item in an iterable (e.g. list), this is overridden by the class name<br>for dataclasses and Pydantic models. | `'example'` |\n| `include_root_tag` | `bool` | Whether to include the root tag in the output<br>(The root tag is always included if it includes a body - e.g. when the input is a simple value). | `True` |\n| `none_str` | `str` | String to use for `None` values. | `'null'` |\n| `indent` | `str | None` | Indentation string to use for pretty printing. | `'  '` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `str` | XML representation of the object. |\n\nExample:\n\nformat\\_as\\_xml\\_example.py\n\n```\nfrom pydantic_ai.format_as_xml import format_as_xml\n\nprint(format_as_xml({'name': 'John', 'height': 6, 'weight': 200}, root_tag='user'))\n'''\n<user>\n  <name>John</name>\n  <height>6</height>\n  <weight>200</weight>\n</user>\n'''\n\n```\n\nSource code in `pydantic_ai_slim/pydantic_ai/format_as_xml.py`\n\n|     |     |\n| --- | --- |\n| ```<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>``` | ````<br>def format_as_xml(<br>    obj: Any,<br>    root_tag: str = 'examples',<br>    item_tag: str = 'example',<br>    include_root_tag: bool = True,<br>    none_str: str = 'null',<br>    indent: str | None = '  ',<br>) -> str:<br>    \"\"\"Format a Python object as XML.<br>    This is useful since LLMs often find it easier to read semi-structured data (e.g. examples) as XML,<br>    rather than JSON etc.<br>    Supports: `str`, `bytes`, `bytearray`, `bool`, `int`, `float`, `date`, `datetime`, `Mapping`,<br>    `Iterable`, `dataclass`, and `BaseModel`.<br>    Args:<br>        obj: Python Object to serialize to XML.<br>        root_tag: Outer tag to wrap the XML in, use `None` to omit the outer tag.<br>        item_tag: Tag to use for each item in an iterable (e.g. list), this is overridden by the class name<br>            for dataclasses and Pydantic models.<br>        include_root_tag: Whether to include the root tag in the output<br>            (The root tag is always included if it includes a body - e.g. when the input is a simple value).<br>        none_str: String to use for `None` values.<br>        indent: Indentation string to use for pretty printing.<br>    Returns:<br>        XML representation of the object.<br>    Example:<br>    ```python {title=\"format_as_xml_example.py\" lint=\"skip\"}<br>    from pydantic_ai.format_as_xml import format_as_xml<br>    print(format_as_xml({'name': 'John', 'height': 6, 'weight': 200}, root_tag='user'))<br>    '''<br>    <user><br>      <name>John</name><br>      <height>6</height><br>      <weight>200</weight><br>    </user><br>    '''<br>    ```<br>    \"\"\"<br>    el = _ToXml(item_tag=item_tag, none_str=none_str).to_xml(obj, root_tag)<br>    if not include_root_tag and el.text is None:<br>        join = '' if indent is None else '\\n'<br>        return join.join(_rootless_xml_elements(el, indent))<br>    else:<br>        if indent is not None:<br>            ElementTree.indent(el, space=indent)<br>        return ElementTree.tostring(el, encoding='unicode')<br>```` |",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/format_as_xml/",
      "ogUrl": "https://ai.pydantic.dev/api/format_as_xml/",
      "title": "pydantic_ai.format_as_xml - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/format_as_xml/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/format_as_xml.png",
      "ogTitle": "pydantic_ai.format_as_xml - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/format_as_xml.png",
      "og:title": "pydantic_ai.format_as_xml - PydanticAI",
      "scrapeId": "45355899-0f60-4778-836f-ec2b1cf4eaab",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/format_as_xml/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/format_as_xml.png",
      "twitter:title": "pydantic_ai.format_as_xml - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/base/#pydantic_aimodels)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models`\n\nLogic related to making requests to an LLM.\n\nThe aim here is to make a common interface for different LLMs, so that the rest of the code can be agnostic to the\nspecific LLM being used.\n\n### KnownModelName`module-attribute`\n\n```\nKnownModelName = Literal[\\\n    \"anthropic:claude-3-5-haiku-latest\",\\\n    \"anthropic:claude-3-5-sonnet-latest\",\\\n    \"anthropic:claude-3-opus-latest\",\\\n    \"claude-3-5-haiku-latest\",\\\n    \"claude-3-5-sonnet-latest\",\\\n    \"claude-3-opus-latest\",\\\n    \"cohere:c4ai-aya-expanse-32b\",\\\n    \"cohere:c4ai-aya-expanse-8b\",\\\n    \"cohere:command\",\\\n    \"cohere:command-light\",\\\n    \"cohere:command-light-nightly\",\\\n    \"cohere:command-nightly\",\\\n    \"cohere:command-r\",\\\n    \"cohere:command-r-03-2024\",\\\n    \"cohere:command-r-08-2024\",\\\n    \"cohere:command-r-plus\",\\\n    \"cohere:command-r-plus-04-2024\",\\\n    \"cohere:command-r-plus-08-2024\",\\\n    \"cohere:command-r7b-12-2024\",\\\n    \"google-gla:gemini-1.0-pro\",\\\n    \"google-gla:gemini-1.5-flash\",\\\n    \"google-gla:gemini-1.5-flash-8b\",\\\n    \"google-gla:gemini-1.5-pro\",\\\n    \"google-gla:gemini-2.0-flash-exp\",\\\n    \"google-gla:gemini-2.0-flash-thinking-exp-01-21\",\\\n    \"google-gla:gemini-exp-1206\",\\\n    \"google-gla:gemini-2.0-flash\",\\\n    \"google-gla:gemini-2.0-flash-lite-preview-02-05\",\\\n    \"google-vertex:gemini-1.0-pro\",\\\n    \"google-vertex:gemini-1.5-flash\",\\\n    \"google-vertex:gemini-1.5-flash-8b\",\\\n    \"google-vertex:gemini-1.5-pro\",\\\n    \"google-vertex:gemini-2.0-flash-exp\",\\\n    \"google-vertex:gemini-2.0-flash-thinking-exp-01-21\",\\\n    \"google-vertex:gemini-exp-1206\",\\\n    \"google-vertex:gemini-2.0-flash\",\\\n    \"google-vertex:gemini-2.0-flash-lite-preview-02-05\",\\\n    \"gpt-3.5-turbo\",\\\n    \"gpt-3.5-turbo-0125\",\\\n    \"gpt-3.5-turbo-0301\",\\\n    \"gpt-3.5-turbo-0613\",\\\n    \"gpt-3.5-turbo-1106\",\\\n    \"gpt-3.5-turbo-16k\",\\\n    \"gpt-3.5-turbo-16k-0613\",\\\n    \"gpt-4\",\\\n    \"gpt-4-0125-preview\",\\\n    \"gpt-4-0314\",\\\n    \"gpt-4-0613\",\\\n    \"gpt-4-1106-preview\",\\\n    \"gpt-4-32k\",\\\n    \"gpt-4-32k-0314\",\\\n    \"gpt-4-32k-0613\",\\\n    \"gpt-4-turbo\",\\\n    \"gpt-4-turbo-2024-04-09\",\\\n    \"gpt-4-turbo-preview\",\\\n    \"gpt-4-vision-preview\",\\\n    \"gpt-4o\",\\\n    \"gpt-4o-2024-05-13\",\\\n    \"gpt-4o-2024-08-06\",\\\n    \"gpt-4o-2024-11-20\",\\\n    \"gpt-4o-audio-preview\",\\\n    \"gpt-4o-audio-preview-2024-10-01\",\\\n    \"gpt-4o-audio-preview-2024-12-17\",\\\n    \"gpt-4o-mini\",\\\n    \"gpt-4o-mini-2024-07-18\",\\\n    \"gpt-4o-mini-audio-preview\",\\\n    \"gpt-4o-mini-audio-preview-2024-12-17\",\\\n    \"groq:gemma2-9b-it\",\\\n    \"groq:llama-3.1-8b-instant\",\\\n    \"groq:llama-3.2-11b-vision-preview\",\\\n    \"groq:llama-3.2-1b-preview\",\\\n    \"groq:llama-3.2-3b-preview\",\\\n    \"groq:llama-3.2-90b-vision-preview\",\\\n    \"groq:llama-3.3-70b-specdec\",\\\n    \"groq:llama-3.3-70b-versatile\",\\\n    \"groq:llama3-70b-8192\",\\\n    \"groq:llama3-8b-8192\",\\\n    \"groq:mixtral-8x7b-32768\",\\\n    \"mistral:codestral-latest\",\\\n    \"mistral:mistral-large-latest\",\\\n    \"mistral:mistral-moderation-latest\",\\\n    \"mistral:mistral-small-latest\",\\\n    \"o1\",\\\n    \"o1-2024-12-17\",\\\n    \"o1-mini\",\\\n    \"o1-mini-2024-09-12\",\\\n    \"o1-preview\",\\\n    \"o1-preview-2024-09-12\",\\\n    \"o3-mini\",\\\n    \"o3-mini-2025-01-31\",\\\n    \"openai:chatgpt-4o-latest\",\\\n    \"openai:gpt-3.5-turbo\",\\\n    \"openai:gpt-3.5-turbo-0125\",\\\n    \"openai:gpt-3.5-turbo-0301\",\\\n    \"openai:gpt-3.5-turbo-0613\",\\\n    \"openai:gpt-3.5-turbo-1106\",\\\n    \"openai:gpt-3.5-turbo-16k\",\\\n    \"openai:gpt-3.5-turbo-16k-0613\",\\\n    \"openai:gpt-4\",\\\n    \"openai:gpt-4-0125-preview\",\\\n    \"openai:gpt-4-0314\",\\\n    \"openai:gpt-4-0613\",\\\n    \"openai:gpt-4-1106-preview\",\\\n    \"openai:gpt-4-32k\",\\\n    \"openai:gpt-4-32k-0314\",\\\n    \"openai:gpt-4-32k-0613\",\\\n    \"openai:gpt-4-turbo\",\\\n    \"openai:gpt-4-turbo-2024-04-09\",\\\n    \"openai:gpt-4-turbo-preview\",\\\n    \"openai:gpt-4-vision-preview\",\\\n    \"openai:gpt-4o\",\\\n    \"openai:gpt-4o-2024-05-13\",\\\n    \"openai:gpt-4o-2024-08-06\",\\\n    \"openai:gpt-4o-2024-11-20\",\\\n    \"openai:gpt-4o-audio-preview\",\\\n    \"openai:gpt-4o-audio-preview-2024-10-01\",\\\n    \"openai:gpt-4o-audio-preview-2024-12-17\",\\\n    \"openai:gpt-4o-mini\",\\\n    \"openai:gpt-4o-mini-2024-07-18\",\\\n    \"openai:gpt-4o-mini-audio-preview\",\\\n    \"openai:gpt-4o-mini-audio-preview-2024-12-17\",\\\n    \"openai:o1\",\\\n    \"openai:o1-2024-12-17\",\\\n    \"openai:o1-mini\",\\\n    \"openai:o1-mini-2024-09-12\",\\\n    \"openai:o1-preview\",\\\n    \"openai:o1-preview-2024-09-12\",\\\n    \"openai:o3-mini\",\\\n    \"openai:o3-mini-2025-01-31\",\\\n    \"test\",\\\n]\n\n```\n\nKnown model names that can be used with the `model` parameter of [`Agent`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent).\n\n`KnownModelName` is provided as a concise way to specify a model.\n\n### ModelRequestParameters`dataclass`\n\nConfiguration for an agent's request to a model, specifically related to tools and result handling.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>``` | ```<br>@dataclass<br>class ModelRequestParameters:<br>    \"\"\"Configuration for an agent's request to a model, specifically related to tools and result handling.\"\"\"<br>    function_tools: list[ToolDefinition]<br>    allow_text_result: bool<br>    result_tools: list[ToolDefinition]<br>``` |\n\n### Model\n\nBases: `ABC`\n\nAbstract class for a model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>``` | ```<br>class Model(ABC):<br>    \"\"\"Abstract class for a model.\"\"\"<br>    @abstractmethod<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, Usage]:<br>        \"\"\"Make a request to the model.\"\"\"<br>        raise NotImplementedError()<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        \"\"\"Make a request to the model and return a streaming response.\"\"\"<br>        # This method is not required, but you need to implement it if you want to support streamed responses<br>        raise NotImplementedError(f'Streamed requests not supported by this {self.__class__.__name__}')<br>        # yield is required to make this a generator for type checking<br>        # noinspection PyUnreachableCode<br>        yield  # pragma: no cover<br>    @property<br>    @abstractmethod<br>    def model_name(self) -> str:<br>        \"\"\"The model name.\"\"\"<br>        raise NotImplementedError()<br>    @property<br>    @abstractmethod<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider, ex: openai.\"\"\"<br>        raise NotImplementedError()<br>``` |\n\n#### request`abstractmethod``async`\n\n```\nrequest(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]\n\n```\n\nMake a request to the model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>``` | ```<br>@abstractmethod<br>async def request(<br>    self,<br>    messages: list[ModelMessage],<br>    model_settings: ModelSettings | None,<br>    model_request_parameters: ModelRequestParameters,<br>) -> tuple[ModelResponse, Usage]:<br>    \"\"\"Make a request to the model.\"\"\"<br>    raise NotImplementedError()<br>``` |\n\n#### request\\_stream`async`\n\n```\nrequest_stream(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]\n\n```\n\nMake a request to the model and return a streaming response.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>``` | ```<br>@asynccontextmanager<br>async def request_stream(<br>    self,<br>    messages: list[ModelMessage],<br>    model_settings: ModelSettings | None,<br>    model_request_parameters: ModelRequestParameters,<br>) -> AsyncIterator[StreamedResponse]:<br>    \"\"\"Make a request to the model and return a streaming response.\"\"\"<br>    # This method is not required, but you need to implement it if you want to support streamed responses<br>    raise NotImplementedError(f'Streamed requests not supported by this {self.__class__.__name__}')<br>    # yield is required to make this a generator for type checking<br>    # noinspection PyUnreachableCode<br>    yield  # pragma: no cover<br>``` |\n\n#### model\\_name`abstractmethod``property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n#### system`abstractmethod``property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider, ex: openai.\n\n### StreamedResponse`dataclass`\n\nBases: `ABC`\n\nStreamed response from an LLM when calling a tool.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>``` | ```<br>@dataclass<br>class StreamedResponse(ABC):<br>    \"\"\"Streamed response from an LLM when calling a tool.\"\"\"<br>    _parts_manager: ModelResponsePartsManager = field(default_factory=ModelResponsePartsManager, init=False)<br>    _event_iterator: AsyncIterator[ModelResponseStreamEvent] | None = field(default=None, init=False)<br>    _usage: Usage = field(default_factory=Usage, init=False)<br>    def __aiter__(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        \"\"\"Stream the response as an async iterable of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.\"\"\"<br>        if self._event_iterator is None:<br>            self._event_iterator = self._get_event_iterator()<br>        return self._event_iterator<br>    @abstractmethod<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        \"\"\"Return an async iterator of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.<br>        This method should be implemented by subclasses to translate the vendor-specific stream of events into<br>        pydantic_ai-format events.<br>        \"\"\"<br>        raise NotImplementedError()<br>        # noinspection PyUnreachableCode<br>        yield<br>    def get(self) -> ModelResponse:<br>        \"\"\"Build a [`ModelResponse`][pydantic_ai.messages.ModelResponse] from the data received from the stream so far.\"\"\"<br>        return ModelResponse(<br>            parts=self._parts_manager.get_parts(), model_name=self.model_name, timestamp=self.timestamp<br>        )<br>    def usage(self) -> Usage:<br>        \"\"\"Get the usage of the response so far. This will not be the final usage until the stream is exhausted.\"\"\"<br>        return self._usage<br>    @property<br>    @abstractmethod<br>    def model_name(self) -> str:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        raise NotImplementedError()<br>    @property<br>    @abstractmethod<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        raise NotImplementedError()<br>``` |\n\n#### \\_\\_aiter\\_\\_\n\n```\n__aiter__() -> AsyncIterator[ModelResponseStreamEvent]\n\n```\n\nStream the response as an async iterable of [`ModelResponseStreamEvent`](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.ModelResponseStreamEvent) s.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>225<br>226<br>227<br>228<br>229<br>``` | ```<br>def __aiter__(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>    \"\"\"Stream the response as an async iterable of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.\"\"\"<br>    if self._event_iterator is None:<br>        self._event_iterator = self._get_event_iterator()<br>    return self._event_iterator<br>``` |\n\n#### get\n\n```\nget() -> ModelResponse\n\n```\n\nBuild a [`ModelResponse`](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.ModelResponse) from the data received from the stream so far.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>242<br>243<br>244<br>245<br>246<br>``` | ```<br>def get(self) -> ModelResponse:<br>    \"\"\"Build a [`ModelResponse`][pydantic_ai.messages.ModelResponse] from the data received from the stream so far.\"\"\"<br>    return ModelResponse(<br>        parts=self._parts_manager.get_parts(), model_name=self.model_name, timestamp=self.timestamp<br>    )<br>``` |\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nGet the usage of the response so far. This will not be the final usage until the stream is exhausted.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>248<br>249<br>250<br>``` | ```<br>def usage(self) -> Usage:<br>    \"\"\"Get the usage of the response so far. This will not be the final usage until the stream is exhausted.\"\"\"<br>    return self._usage<br>``` |\n\n#### model\\_name`abstractmethod``property`\n\n```\nmodel_name: str\n\n```\n\nGet the model name of the response.\n\n#### timestamp`abstractmethod``property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n### ALLOW\\_MODEL\\_REQUESTS`module-attribute`\n\n```\nALLOW_MODEL_REQUESTS = True\n\n```\n\nWhether to allow requests to models.\n\nThis global setting allows you to disable request to most models, e.g. to make sure you don't accidentally\nmake costly requests to a model during tests.\n\nThe testing models [`TestModel`](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel) and\n[`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) are no affected by this setting.\n\n### check\\_allow\\_model\\_requests\n\n```\ncheck_allow_model_requests() -> None\n\n```\n\nCheck if model requests are allowed.\n\nIf you're defining your own models that have costs or latency associated with their use, you should call this in\n[`Model.request`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.Model.request) and [`Model.request_stream`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.Model.request_stream).\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `RuntimeError` | If model requests are not allowed. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>``` | ```<br>def check_allow_model_requests() -> None:<br>    \"\"\"Check if model requests are allowed.<br>    If you're defining your own models that have costs or latency associated with their use, you should call this in<br>    [`Model.request`][pydantic_ai.models.Model.request] and [`Model.request_stream`][pydantic_ai.models.Model.request_stream].<br>    Raises:<br>        RuntimeError: If model requests are not allowed.<br>    \"\"\"<br>    if not ALLOW_MODEL_REQUESTS:<br>        raise RuntimeError('Model requests are not allowed, since ALLOW_MODEL_REQUESTS is False')<br>``` |\n\n### override\\_allow\\_model\\_requests\n\n```\noverride_allow_model_requests(\n    allow_model_requests: bool,\n) -> Iterator[None]\n\n```\n\nContext manager to temporarily override [`ALLOW_MODEL_REQUESTS`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.ALLOW_MODEL_REQUESTS).\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `allow_model_requests` | `bool` | Whether to allow model requests within the context. | _required_ |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n\n|     |     |\n| --- | --- |\n| ```<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>``` | ```<br>@contextmanager<br>def override_allow_model_requests(allow_model_requests: bool) -> Iterator[None]:<br>    \"\"\"Context manager to temporarily override [`ALLOW_MODEL_REQUESTS`][pydantic_ai.models.ALLOW_MODEL_REQUESTS].<br>    Args:<br>        allow_model_requests: Whether to allow model requests within the context.<br>    \"\"\"<br>    global ALLOW_MODEL_REQUESTS<br>    old_value = ALLOW_MODEL_REQUESTS<br>    ALLOW_MODEL_REQUESTS = allow_model_requests  # pyright: ignore[reportConstantRedefinition]<br>    try:<br>        yield<br>    finally:<br>        ALLOW_MODEL_REQUESTS = old_value  # pyright: ignore[reportConstantRedefinition]<br>``` |",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/base/",
      "ogUrl": "https://ai.pydantic.dev/api/models/base/",
      "title": "pydantic_ai.models - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/base/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/base.png",
      "ogTitle": "pydantic_ai.models - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/base.png",
      "og:title": "pydantic_ai.models - PydanticAI",
      "scrapeId": "75e420ec-9db4-41e2-b0c8-7fa5334ab87b",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/base/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/base.png",
      "twitter:title": "pydantic_ai.models - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/bank-support/#running-the-example)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Bank support\n\nSmall but complete example of using PydanticAI to build a support agent for a bank.\n\nDemonstrates:\n\n- [dynamic system prompt](https://ai.pydantic.dev/agents/#system-prompts)\n- [structured `result_type`](https://ai.pydantic.dev/results/#structured-result-validation)\n- [tools](https://ai.pydantic.dev/tools/)\n\n## Running the Example\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/bank-support/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/bank-support/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.bank_support\n\n```\n\n```\nuv run -m pydantic_ai_examples.bank_support\n\n```\n\n(or `PYDANTIC_AI_MODEL=gemini-1.5-flash ...`)\n\n## Example Code\n\nbank\\_support.py\n\n```\nfrom dataclasses import dataclass\n\nfrom pydantic import BaseModel, Field\n\nfrom pydantic_ai import Agent, RunContext\n\nclass DatabaseConn:\n    \"\"\"This is a fake database for example purposes.\n\n    In reality, you'd be connecting to an external database\n    (e.g. PostgreSQL) to get information about customers.\n    \"\"\"\n\n    @classmethod\n    async def customer_name(cls, *, id: int) -> str | None:\n        if id == 123:\n            return 'John'\n\n    @classmethod\n    async def customer_balance(cls, *, id: int, include_pending: bool) -> float:\n        if id == 123 and include_pending:\n            return 123.45\n        else:\n            raise ValueError('Customer not found')\n\n@dataclass\nclass SupportDependencies:\n    customer_id: int\n    db: DatabaseConn\n\nclass SupportResult(BaseModel):\n    support_advice: str = Field(description='Advice returned to the customer')\n    block_card: bool = Field(description='Whether to block their card or not')\n    risk: int = Field(description='Risk level of query', ge=0, le=10)\n\nsupport_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=SupportDependencies,\n    result_type=SupportResult,\n    system_prompt=(\n        'You are a support agent in our bank, give the '\n        'customer support and judge the risk level of their query. '\n        \"Reply using the customer's name.\"\n    ),\n)\n\n@support_agent.system_prompt\nasync def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:\n    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)\n    return f\"The customer's name is {customer_name!r}\"\n\n@support_agent.tool\nasync def customer_balance(\n    ctx: RunContext[SupportDependencies], include_pending: bool\n) -> str:\n    \"\"\"Returns the customer's current account balance.\"\"\"\n    balance = await ctx.deps.db.customer_balance(\n        id=ctx.deps.customer_id,\n        include_pending=include_pending,\n    )\n    return f'${balance:.2f}'\n\nif __name__ == '__main__':\n    deps = SupportDependencies(customer_id=123, db=DatabaseConn())\n    result = support_agent.run_sync('What is my balance?', deps=deps)\n    print(result.data)\n    \"\"\"\n    support_advice='Hello John, your current account balance, including pending transactions, is $123.45.' block_card=False risk=1\n    \"\"\"\n\n    result = support_agent.run_sync('I just lost my card!', deps=deps)\n    print(result.data)\n    \"\"\"\n    support_advice=\"I'm sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions.\" block_card=True risk=8\n    \"\"\"\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/bank-support/",
      "ogUrl": "https://ai.pydantic.dev/examples/bank-support/",
      "title": "Bank support - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/bank-support/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/bank-support.png",
      "ogTitle": "Bank support - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/bank-support.png",
      "og:title": "Bank support - PydanticAI",
      "scrapeId": "d5efaa3a-a78a-4f7c-a735-080cb5cfc8fc",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/bank-support/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/bank-support.png",
      "twitter:title": "Bank support - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/cohere/#pydantic_aimodelscohere)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.cohere`\n\n## Setup\n\nFor details on how to set up authentication with this model, see [model configuration for Cohere](https://ai.pydantic.dev/models/#cohere).\n\n### LatestCohereModelNames`module-attribute`\n\n```\nLatestCohereModelNames = Literal[\\\n    \"c4ai-aya-expanse-32b\",\\\n    \"c4ai-aya-expanse-8b\",\\\n    \"command\",\\\n    \"command-light\",\\\n    \"command-light-nightly\",\\\n    \"command-nightly\",\\\n    \"command-r\",\\\n    \"command-r-03-2024\",\\\n    \"command-r-08-2024\",\\\n    \"command-r-plus\",\\\n    \"command-r-plus-04-2024\",\\\n    \"command-r-plus-08-2024\",\\\n    \"command-r7b-12-2024\",\\\n]\n\n```\n\nLatest Cohere models.\n\n### CohereModelName`module-attribute`\n\n```\nCohereModelName = Union[str, LatestCohereModelNames]\n\n```\n\nPossible Cohere model names.\n\nSince Cohere supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [Cohere's docs](https://docs.cohere.com/v2/docs/models) for a list of all available models.\n\n### CohereModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Cohere model request.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`\n\n|     |     |\n| --- | --- |\n| ```<br>81<br>82<br>``` | ```<br>class CohereModelSettings(ModelSettings):<br>    \"\"\"Settings used for a Cohere model request.\"\"\"<br>``` |\n\n### CohereModel`dataclass`\n\nBases: `Model`\n\nA model that uses the Cohere API.\n\nInternally, this uses the [Cohere Python client](https://github.com/cohere-ai/cohere-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>``` | ```<br>@dataclass(init=False)<br>class CohereModel(Model):<br>    \"\"\"A model that uses the Cohere API.<br>    Internally, this uses the [Cohere Python client](<br>    https://github.com/cohere-ai/cohere-python) to interact with the API.<br>    Apart from `__init__`, all methods are private or match those of the base class.<br>    \"\"\"<br>    client: AsyncClientV2 = field(repr=False)<br>    _model_name: CohereModelName = field(repr=False)<br>    _system: str | None = field(default='cohere', repr=False)<br>    def __init__(<br>        self,<br>        model_name: CohereModelName,<br>        *,<br>        api_key: str | None = None,<br>        cohere_client: AsyncClientV2 | None = None,<br>        http_client: AsyncHTTPClient | None = None,<br>    ):<br>        \"\"\"Initialize an Cohere model.<br>        Args:<br>            model_name: The name of the Cohere model to use. List of model names<br>                available [here](https://docs.cohere.com/docs/models#command).<br>            api_key: The API key to use for authentication, if not provided, the<br>                `CO_API_KEY` environment variable will be used if available.<br>            cohere_client: An existing Cohere async client to use. If provided,<br>                `api_key` and `http_client` must be `None`.<br>            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>        \"\"\"<br>        self._model_name: CohereModelName = model_name<br>        if cohere_client is not None:<br>            assert http_client is None, 'Cannot provide both `cohere_client` and `http_client`'<br>            assert api_key is None, 'Cannot provide both `cohere_client` and `api_key`'<br>            self.client = cohere_client<br>        else:<br>            self.client = AsyncClientV2(api_key=api_key, httpx_client=http_client)  # type: ignore<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, result.Usage]:<br>        check_allow_model_requests()<br>        response = await self._chat(messages, cast(CohereModelSettings, model_settings or {}), model_request_parameters)<br>        return self._process_response(response), _map_usage(response)<br>    @property<br>    def model_name(self) -> CohereModelName:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>    async def _chat(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: CohereModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> ChatResponse:<br>        tools = self._get_tools(model_request_parameters)<br>        cohere_messages = list(chain(*(self._map_message(m) for m in messages)))<br>        return await self.client.chat(<br>            model=self._model_name,<br>            messages=cohere_messages,<br>            tools=tools or OMIT,<br>            max_tokens=model_settings.get('max_tokens', OMIT),<br>            temperature=model_settings.get('temperature', OMIT),<br>            p=model_settings.get('top_p', OMIT),<br>            seed=model_settings.get('seed', OMIT),<br>            presence_penalty=model_settings.get('presence_penalty', OMIT),<br>            frequency_penalty=model_settings.get('frequency_penalty', OMIT),<br>        )<br>    def _process_response(self, response: ChatResponse) -> ModelResponse:<br>        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"<br>        parts: list[ModelResponsePart] = []<br>        if response.message.content is not None and len(response.message.content) > 0:<br>            # While Cohere's API returns a list, it only does that for future proofing<br>            # and currently only one item is being returned.<br>            choice = response.message.content[0]<br>            parts.append(TextPart(choice.text))<br>        for c in response.message.tool_calls or []:<br>            if c.function and c.function.name and c.function.arguments:<br>                parts.append(<br>                    ToolCallPart(<br>                        tool_name=c.function.name,<br>                        args=c.function.arguments,<br>                        tool_call_id=c.id,<br>                    )<br>                )<br>        return ModelResponse(parts=parts, model_name=self._model_name)<br>    def _map_message(self, message: ModelMessage) -> Iterable[ChatMessageV2]:<br>        \"\"\"Just maps a `pydantic_ai.Message` to a `cohere.ChatMessageV2`.\"\"\"<br>        if isinstance(message, ModelRequest):<br>            yield from self._map_user_message(message)<br>        elif isinstance(message, ModelResponse):<br>            texts: list[str] = []<br>            tool_calls: list[ToolCallV2] = []<br>            for item in message.parts:<br>                if isinstance(item, TextPart):<br>                    texts.append(item.content)<br>                elif isinstance(item, ToolCallPart):<br>                    tool_calls.append(self._map_tool_call(item))<br>                else:<br>                    assert_never(item)<br>            message_param = AssistantChatMessageV2(role='assistant')<br>            if texts:<br>                message_param.content = [TextAssistantMessageContentItem(text='\\n\\n'.join(texts))]<br>            if tool_calls:<br>                message_param.tool_calls = tool_calls<br>            yield message_param<br>        else:<br>            assert_never(message)<br>    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[ToolV2]:<br>        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]<br>        if model_request_parameters.result_tools:<br>            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]<br>        return tools<br>    @staticmethod<br>    def _map_tool_call(t: ToolCallPart) -> ToolCallV2:<br>        return ToolCallV2(<br>            id=_guard_tool_call_id(t=t, model_source='Cohere'),<br>            type='function',<br>            function=ToolCallV2Function(<br>                name=t.tool_name,<br>                arguments=t.args_as_json_str(),<br>            ),<br>        )<br>    @staticmethod<br>    def _map_tool_definition(f: ToolDefinition) -> ToolV2:<br>        return ToolV2(<br>            type='function',<br>            function=ToolV2Function(<br>                name=f.name,<br>                description=f.description,<br>                parameters=f.parameters_json_schema,<br>            ),<br>        )<br>    @classmethod<br>    def _map_user_message(cls, message: ModelRequest) -> Iterable[ChatMessageV2]:<br>        for part in message.parts:<br>            if isinstance(part, SystemPromptPart):<br>                yield SystemChatMessageV2(role='system', content=part.content)<br>            elif isinstance(part, UserPromptPart):<br>                yield UserChatMessageV2(role='user', content=part.content)<br>            elif isinstance(part, ToolReturnPart):<br>                yield ToolChatMessageV2(<br>                    role='tool',<br>                    tool_call_id=_guard_tool_call_id(t=part, model_source='Cohere'),<br>                    content=part.model_response_str(),<br>                )<br>            elif isinstance(part, RetryPromptPart):<br>                if part.tool_name is None:<br>                    yield UserChatMessageV2(role='user', content=part.model_response())<br>                else:<br>                    yield ToolChatMessageV2(<br>                        role='tool',<br>                        tool_call_id=_guard_tool_call_id(t=part, model_source='Cohere'),<br>                        content=part.model_response(),<br>                    )<br>            else:<br>                assert_never(part)<br>``` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: CohereModelName,\n    *,\n    api_key: str | None = None,\n    cohere_client: AsyncClientV2 | None = None,\n    http_client: AsyncClient | None = None\n)\n\n```\n\nInitialize an Cohere model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `CohereModelName` | The name of the Cohere model to use. List of model names<br>available [here](https://docs.cohere.com/docs/models#command). | _required_ |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the<br>`CO_API_KEY` environment variable will be used if available. | `None` |\n| `cohere_client` | `AsyncClientV2 | None` | An existing Cohere async client to use. If provided,<br>`api_key` and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`\n\n|     |     |\n| --- | --- |\n| ```<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>``` | ```<br>def __init__(<br>    self,<br>    model_name: CohereModelName,<br>    *,<br>    api_key: str | None = None,<br>    cohere_client: AsyncClientV2 | None = None,<br>    http_client: AsyncHTTPClient | None = None,<br>):<br>    \"\"\"Initialize an Cohere model.<br>    Args:<br>        model_name: The name of the Cohere model to use. List of model names<br>            available [here](https://docs.cohere.com/docs/models#command).<br>        api_key: The API key to use for authentication, if not provided, the<br>            `CO_API_KEY` environment variable will be used if available.<br>        cohere_client: An existing Cohere async client to use. If provided,<br>            `api_key` and `http_client` must be `None`.<br>        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>    \"\"\"<br>    self._model_name: CohereModelName = model_name<br>    if cohere_client is not None:<br>        assert http_client is None, 'Cannot provide both `cohere_client` and `http_client`'<br>        assert api_key is None, 'Cannot provide both `cohere_client` and `api_key`'<br>        self.client = cohere_client<br>    else:<br>        self.client = AsyncClientV2(api_key=api_key, httpx_client=http_client)  # type: ignore<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: CohereModelName\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/cohere/",
      "ogUrl": "https://ai.pydantic.dev/api/models/cohere/",
      "title": "pydantic_ai.models.cohere - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/cohere/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/cohere.png",
      "ogTitle": "pydantic_ai.models.cohere - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/cohere.png",
      "og:title": "pydantic_ai.models.cohere - PydanticAI",
      "scrapeId": "97987883-a420-4d75-8c71-ab09638ed6a6",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/cohere/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/cohere.png",
      "twitter:title": "pydantic_ai.models.cohere - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/pydantic-model/#pydantic-model)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Pydantic Model\n\nSimple example of using PydanticAI to construct a Pydantic model from a text input.\n\nDemonstrates:\n\n- [structured `result_type`](https://ai.pydantic.dev/results/#structured-result-validation)\n\n## Running the Example\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/pydantic-model/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/pydantic-model/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.pydantic_model\n\n```\n\n```\nuv run -m pydantic_ai_examples.pydantic_model\n\n```\n\nThis examples uses `openai:gpt-4o` by default, but it works well with other models, e.g. you can run it\nwith Gemini using:\n\n[pip](https://ai.pydantic.dev/examples/pydantic-model/#__tabbed_2_1)[uv](https://ai.pydantic.dev/examples/pydantic-model/#__tabbed_2_2)\n\n```\nPYDANTIC_AI_MODEL=gemini-1.5-pro python -m pydantic_ai_examples.pydantic_model\n\n```\n\n```\nPYDANTIC_AI_MODEL=gemini-1.5-pro uv run -m pydantic_ai_examples.pydantic_model\n\n```\n\n(or `PYDANTIC_AI_MODEL=gemini-1.5-flash ...`)\n\n## Example Code\n\npydantic\\_model.py\n\n```\nimport os\nfrom typing import cast\n\nimport logfire\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models import KnownModelName\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nclass MyModel(BaseModel):\n    city: str\n    country: str\n\nmodel = cast(KnownModelName, os.getenv('PYDANTIC_AI_MODEL', 'openai:gpt-4o'))\nprint(f'Using model: {model}')\nagent = Agent(model, result_type=MyModel)\n\nif __name__ == '__main__':\n    result = agent.run_sync('The windy city in the US of A.')\n    print(result.data)\n    print(result.usage())\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/pydantic-model/",
      "ogUrl": "https://ai.pydantic.dev/examples/pydantic-model/",
      "title": "Pydantic Model - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/pydantic-model/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/pydantic-model.png",
      "ogTitle": "Pydantic Model - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/pydantic-model.png",
      "og:title": "Pydantic Model - PydanticAI",
      "scrapeId": "4f977894-d07f-4789-9d56-fde2479489f6",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/pydantic-model/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/pydantic-model.png",
      "twitter:title": "Pydantic Model - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/#introduction)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Introduction\n\n![PydanticAI](https://ai.pydantic.dev/img/pydantic-ai-dark.svg#only-dark)\n\n![PydanticAI](https://ai.pydantic.dev/img/pydantic-ai-light.svg#only-light)\n\n_Agent Framework / shim to use Pydantic with LLMs_\n\n[![CI](https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml/badge.svg?event=push)](https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml?query=branch%3Amain)[![Coverage](https://coverage-badge.samuelcolvin.workers.dev/pydantic/pydantic-ai.svg)](https://coverage-badge.samuelcolvin.workers.dev/redirect/pydantic/pydantic-ai)[![PyPI](https://img.shields.io/pypi/v/pydantic-ai.svg)](https://pypi.python.org/pypi/pydantic-ai)[![versions](https://img.shields.io/pypi/pyversions/pydantic-ai.svg)](https://github.com/pydantic/pydantic-ai)[![license](https://img.shields.io/github/license/pydantic/pydantic-ai.svg)](https://github.com/pydantic/pydantic-ai/blob/main/LICENSE)\n\nPydanticAI is a Python agent framework designed to make it less painful to\nbuild production grade applications with Generative AI.\n\nPydanticAI is a Python Agent Framework designed to make it less painful to\nbuild production grade applications with Generative AI.\n\nFastAPI revolutionized web development by offering an innovative and ergonomic design, built on the foundation of [Pydantic](https://docs.pydantic.dev/).\n\nSimilarly, virtually every agent framework and LLM library in Python uses Pydantic, yet when we began to use LLMs in [Pydantic Logfire](https://pydantic.dev/logfire), we couldn't find anything that gave us the same feeling.\n\nWe built PydanticAI with one simple aim: to bring that FastAPI feeling to GenAI app development.\n\n## Why use PydanticAI\n\n- **Built by the Pydantic Team**:\nBuilt by the team behind [Pydantic](https://docs.pydantic.dev/latest/) (the validation layer of the OpenAI SDK, the Anthropic SDK, LangChain, LlamaIndex, AutoGPT, Transformers, CrewAI, Instructor and many more).\n\n- **Model-agnostic**:\nSupports OpenAI, Anthropic, Gemini, Deepseek, Ollama, Groq, Cohere, and Mistral, and there is a simple interface to implement support for [other models](https://ai.pydantic.dev/models/).\n\n- **Pydantic Logfire Integration**:\nSeamlessly [integrates](https://ai.pydantic.dev/logfire/) with [Pydantic Logfire](https://pydantic.dev/logfire) for real-time debugging, performance monitoring, and behavior tracking of your LLM-powered applications.\n\n- **Type-safe**:\nDesigned to make [type checking](https://ai.pydantic.dev/agents/#static-type-checking) as powerful and informative as possible for you.\n\n- **Python-centric Design**:\nLeverages Python's familiar control flow and agent composition to build your AI-driven projects, making it easy to apply standard Python best practices you'd use in any other (non-AI) project.\n\n- **Structured Responses**:\nHarnesses the power of [Pydantic](https://docs.pydantic.dev/latest/) to [validate and structure](https://ai.pydantic.dev/results/#structured-result-validation) model outputs, ensuring responses are consistent across runs.\n\n- **Dependency Injection System**:\nOffers an optional [dependency injection](https://ai.pydantic.dev/dependencies/) system to provide data and services to your agent's [system prompts](https://ai.pydantic.dev/agents/#system-prompts), [tools](https://ai.pydantic.dev/tools/) and [result validators](https://ai.pydantic.dev/results/#result-validators-functions).\nThis is useful for testing and eval-driven iterative development.\n\n- **Streamed Responses**:\nProvides the ability to [stream](https://ai.pydantic.dev/results/#streamed-results) LLM outputs continuously, with immediate validation, ensuring rapid and accurate results.\n\n- **Graph Support**:\n[Pydantic Graph](https://ai.pydantic.dev/graph/) provides a powerful way to define graphs using typing hints, this is useful in complex applications where standard control flow can degrade to spaghetti code.\n\n\nIn Beta\n\nPydanticAI is in early beta, the API is still subject to change and there's a lot more to do.\n[Feedback](https://github.com/pydantic/pydantic-ai/issues) is very welcome!\n\n## Hello World Example\n\nHere's a minimal example of PydanticAI:\n\nhello\\_world.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent(\n    'google-gla:gemini-1.5-flash',\n    system_prompt='Be concise, reply with one sentence.',\n)\n\nresult = agent.run_sync('Where does \"hello world\" come from?')\nprint(result.data)\n\"\"\"\nThe first known use of \"hello, world\" was in a 1974 textbook about the C programming language.\n\"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nThe exchange should be very short: PydanticAI will send the system prompt and the user query to the LLM, the model will return a text response.\n\nNot very interesting yet, but we can easily add \"tools\", dynamic system prompts, and structured responses to build more powerful agents.\n\n## Tools & Dependency Injection Example\n\nHere is a concise example using PydanticAI to build a support agent for a bank:\n\nbank\\_support.py\n\n```\nfrom dataclasses import dataclass\n\nfrom pydantic import BaseModel, Field\nfrom pydantic_ai import Agent, RunContext\n\nfrom bank_database import DatabaseConn\n\n@dataclass\nclass SupportDependencies:\n    customer_id: int\n    db: DatabaseConn\n\nclass SupportResult(BaseModel):\n    support_advice: str = Field(description='Advice returned to the customer')\n    block_card: bool = Field(description=\"Whether to block the customer's card\")\n    risk: int = Field(description='Risk level of query', ge=0, le=10)\n\nsupport_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=SupportDependencies,\n    result_type=SupportResult,\n    system_prompt=(\n        'You are a support agent in our bank, give the '\n        'customer support and judge the risk level of their query.'\n    ),\n)\n\n@support_agent.system_prompt\nasync def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:\n    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)\n    return f\"The customer's name is {customer_name!r}\"\n\n@support_agent.tool\nasync def customer_balance(\n    ctx: RunContext[SupportDependencies], include_pending: bool\n) -> float:\n    \"\"\"Returns the customer's current account balance.\"\"\"\n    return await ctx.deps.db.customer_balance(\n        id=ctx.deps.customer_id,\n        include_pending=include_pending,\n    )\n\n...\n\nasync def main():\n    deps = SupportDependencies(customer_id=123, db=DatabaseConn())\n    result = await support_agent.run('What is my balance?', deps=deps)\n    print(result.data)\n    \"\"\"\n    support_advice='Hello John, your current account balance, including pending transactions, is $123.45.' block_card=False risk=1\n    \"\"\"\n\n    result = await support_agent.run('I just lost my card!', deps=deps)\n    print(result.data)\n    \"\"\"\n    support_advice=\"I'm sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions.\" block_card=True risk=8\n    \"\"\"\n\n```\n\nComplete `bank_support.py` example\n\nThe code included here is incomplete for the sake of brevity (the definition of `DatabaseConn` is missing); you can find the complete `bank_support.py` example [here](https://ai.pydantic.dev/examples/bank-support/).\n\n## Instrumentation with Pydantic Logfire\n\nTo understand the flow of the above runs, we can watch the agent in action using Pydantic Logfire.\n\nTo do this, we need to set up logfire, and add the following to our code:\n\nbank\\_support\\_with\\_logfire.py\n\n```\n...\nfrom bank_database import DatabaseConn\n\nimport logfire\nlogfire.configure()\nlogfire.instrument_asyncpg()\n...\n\n```\n\nThat's enough to get the following view of your agent in action:\n\nSee [Monitoring and Performance](https://ai.pydantic.dev/logfire/) to learn more.\n\n## Next Steps\n\nTo try PydanticAI yourself, follow the instructions [in the examples](https://ai.pydantic.dev/examples/).\n\nRead the [docs](https://ai.pydantic.dev/agents/) to learn more about building applications with PydanticAI.\n\nRead the [API Reference](https://ai.pydantic.dev/api/agent/) to understand PydanticAI's interface.",
    "metadata": {
      "url": "https://ai.pydantic.dev/",
      "ogUrl": "https://ai.pydantic.dev/",
      "title": "PydanticAI",
      "og:url": "https://ai.pydantic.dev/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/index.png",
      "ogTitle": "Introduction",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/index.png",
      "og:title": "Introduction",
      "scrapeId": "4882a24a-fbc5-487f-9bac-4a1e66e367c7",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/index.png",
      "twitter:title": "Introduction",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/models/#openai)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Models\n\nPydanticAI is Model-agnostic and has built in support for the following model providers:\n\n- [OpenAI](https://ai.pydantic.dev/models/#openai)\n- [Anthropic](https://ai.pydantic.dev/models/#anthropic)\n- Gemini via two different APIs: [Generative Language API](https://ai.pydantic.dev/models/#gemini) and [VertexAI API](https://ai.pydantic.dev/models/#gemini-via-vertexai)\n- [Ollama](https://ai.pydantic.dev/models/#ollama)\n- [Deepseek](https://ai.pydantic.dev/models/#deepseek)\n- [Groq](https://ai.pydantic.dev/models/#groq)\n- [Mistral](https://ai.pydantic.dev/models/#mistral)\n- [Cohere](https://ai.pydantic.dev/models/#cohere)\n\nSee [OpenAI-compatible models](https://ai.pydantic.dev/models/#openai-compatible-models) for more examples on how to use models such as [OpenRouter](https://ai.pydantic.dev/models/#openrouter), and [Grok (xAI)](https://ai.pydantic.dev/models/#grok-xai) that support the OpenAI SDK.\n\nYou can also [add support for other models](https://ai.pydantic.dev/models/#implementing-custom-models).\n\nPydanticAI also comes with [`TestModel`](https://ai.pydantic.dev/api/models/test/) and [`FunctionModel`](https://ai.pydantic.dev/api/models/function/) for testing and development.\n\nTo use each model provider, you need to configure your local environment and make sure you have the right packages installed.\n\n## OpenAI\n\n### Install\n\nTo use OpenAI models, you need to either install [`pydantic-ai`](https://ai.pydantic.dev/install/), or install [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install) with the `openai` optional group:\n\n[pip](https://ai.pydantic.dev/models/#__tabbed_1_1)[uv](https://ai.pydantic.dev/models/#__tabbed_1_2)\n\n```\npip install 'pydantic-ai-slim[openai]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[openai]'\n\n```\n\n### Configuration\n\nTo use [`OpenAIModel`](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel) through their main API, go to [platform.openai.com](https://platform.openai.com/) and follow your nose until you find the place to generate an API key.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport OPENAI_API_KEY='your-api-key'\n\n```\n\nYou can then use [`OpenAIModel`](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel) by name:\n\nopenai\\_model\\_by\\_name.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\nopenai\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel('gpt-4o')\nagent = Agent(model)\n...\n\n```\n\n### `api_key` argument\n\nIf you don't want to or can't set the environment variable, you can pass it at runtime via the [`api_key` argument](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel.__init__):\n\nopenai\\_model\\_api\\_key.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel('gpt-4o', api_key='your-api-key')\nagent = Agent(model)\n...\n\n```\n\n### Custom OpenAI Client\n\n`OpenAIModel` also accepts a custom `AsyncOpenAI` client via the [`openai_client` parameter](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel.__init__),\nso you can customise the `organization`, `project`, `base_url` etc. as defined in the [OpenAI API docs](https://platform.openai.com/docs/api-reference).\n\nYou could also use the [`AsyncAzureOpenAI`](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/switching-endpoints) client to use the Azure OpenAI API.\n\nopenai\\_azure.py\n\n```\nfrom openai import AsyncAzureOpenAI\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nclient = AsyncAzureOpenAI(\n    azure_endpoint='...',\n    api_version='2024-07-01-preview',\n    api_key='your-api-key',\n)\n\nmodel = OpenAIModel('gpt-4o', openai_client=client)\nagent = Agent(model)\n...\n\n```\n\n## Anthropic\n\n### Install\n\nTo use [`AnthropicModel`](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModel) models, you need to either install [`pydantic-ai`](https://ai.pydantic.dev/install/), or install [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install) with the `anthropic` optional group:\n\n[pip](https://ai.pydantic.dev/models/#__tabbed_2_1)[uv](https://ai.pydantic.dev/models/#__tabbed_2_2)\n\n```\npip install 'pydantic-ai-slim[anthropic]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[anthropic]'\n\n```\n\n### Configuration\n\nTo use [Anthropic](https://anthropic.com/) through their API, go to [console.anthropic.com/settings/keys](https://console.anthropic.com/settings/keys) to generate an API key.\n\n[`AnthropicModelName`](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModelName) contains a list of available Anthropic models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport ANTHROPIC_API_KEY='your-api-key'\n\n```\n\nYou can then use [`AnthropicModel`](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModel) by name:\n\nanthropic\\_model\\_by\\_name.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('anthropic:claude-3-5-sonnet-latest')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\nanthropic\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import AnthropicModel\n\nmodel = AnthropicModel('claude-3-5-sonnet-latest')\nagent = Agent(model)\n...\n\n```\n\n### `api_key` argument\n\nIf you don't want to or can't set the environment variable, you can pass it at runtime via the [`api_key` argument](https://ai.pydantic.dev/api/models/anthropic/#pydantic_ai.models.anthropic.AnthropicModel.__init__):\n\nanthropic\\_model\\_api\\_key.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import AnthropicModel\n\nmodel = AnthropicModel('claude-3-5-sonnet-latest', api_key='your-api-key')\nagent = Agent(model)\n...\n\n```\n\n## Gemini\n\nFor prototyping only\n\nGoogle themselves refer to this API as the \"hobby\" API, I've received 503 responses from it a number of times.\nThe API is easy to use and useful for prototyping and simple demos, but I would not rely on it in production.\n\nIf you want to run Gemini models in production, you should use the [VertexAI API](https://ai.pydantic.dev/models/#gemini-via-vertexai) described below.\n\n### Install\n\nTo use [`GeminiModel`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) models, you just need to install [`pydantic-ai`](https://ai.pydantic.dev/install/) or [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install), no extra dependencies are required.\n\n### Configuration\n\n[`GeminiModel`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) let's you use the Google's Gemini models through their [Generative Language API](https://ai.google.dev/api/all-methods), `generativelanguage.googleapis.com`.\n\n[`GeminiModelName`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModelName) contains a list of available Gemini models that can be used through this interface.\n\nTo use `GeminiModel`, go to [aistudio.google.com](https://aistudio.google.com/) and follow your nose until you find the place to generate an API key.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport GEMINI_API_KEY=your-api-key\n\n```\n\nYou can then use [`GeminiModel`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) by name:\n\ngemini\\_model\\_by\\_name.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('google-gla:gemini-1.5-flash')\n...\n\n```\n\nNote\n\nThe `google-gla` provider prefix represents the [Google **G** enerative **L** anguage **A** PI](https://ai.google.dev/api/all-methods) for `GeminiModel` s.\n`google-vertex` is used with [Vertex AI](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models) for `VertexAIModel` s.\n\nOr initialise the model directly with just the model name:\n\ngemini\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\n\nmodel = GeminiModel('gemini-1.5-flash')\nagent = Agent(model)\n...\n\n```\n\n### `api_key` argument\n\nIf you don't want to or can't set the environment variable, you can pass it at runtime via the [`api_key` argument](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel.__init__):\n\ngemini\\_model\\_api\\_key.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\n\nmodel = GeminiModel('gemini-1.5-flash', api_key='your-api-key')\nagent = Agent(model)\n...\n\n```\n\n## Gemini via VertexAI\n\nTo run Google's Gemini models in production, you should use [`VertexAIModel`](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VertexAIModel) which uses the `*-aiplatform.googleapis.com` API.\n\n[`GeminiModelName`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModelName) contains a list of available Gemini models that can be used through this interface.\n\n### Install\n\nTo use [`VertexAIModel`](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VertexAIModel), you need to either install [`pydantic-ai`](https://ai.pydantic.dev/install/), or install [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install) with the `vertexai` optional group:\n\n[pip](https://ai.pydantic.dev/models/#__tabbed_3_1)[uv](https://ai.pydantic.dev/models/#__tabbed_3_2)\n\n```\npip install 'pydantic-ai-slim[vertexai]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[vertexai]'\n\n```\n\n### Configuration\n\nThis interface has a number of advantages over `generativelanguage.googleapis.com` documented above:\n\n1. The VertexAI API is more reliably and marginally lower latency in our experience.\n2. You can\n    [purchase provisioned throughput](https://cloud.google.com/vertex-ai/generative-ai/docs/provisioned-throughput#purchase-provisioned-throughput)\n    with VertexAI to guarantee capacity.\n3. If you're running PydanticAI inside GCP, you don't need to set up authentication, it should \"just work\".\n4. You can decide which region to use, which might be important from a regulatory perspective,\n    and might improve latency.\n\nThe big disadvantage is that for local development you may need to create and configure a \"service account\", which I've found extremely painful to get right in the past.\n\nWhichever way you authenticate, you'll need to have VertexAI enabled in your GCP account.\n\n### Application default credentials\n\nLuckily if you're running PydanticAI inside GCP, or you have the [`gcloud` CLI](https://cloud.google.com/sdk/gcloud) installed and configured, you should be able to use `VertexAIModel` without any additional setup.\n\nTo use `VertexAIModel`, with [application default credentials](https://cloud.google.com/docs/authentication/application-default-credentials) configured (e.g. with `gcloud`), you can simply use:\n\nvertexai\\_application\\_default\\_credentials.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.vertexai import VertexAIModel\n\nmodel = VertexAIModel('gemini-1.5-flash')\nagent = Agent(model)\n...\n\n```\n\nInternally this uses [`google.auth.default()`](https://google-auth.readthedocs.io/en/master/reference/google.auth.html) from the `google-auth` package to obtain credentials.\n\nWon't fail until `agent.run()`\n\nBecause `google.auth.default()` requires network requests and can be slow, it's not run until you call `agent.run()`. Meaning any configuration or permissions error will only be raised when you try to use the model. To initialize the model for this check to be run, call [`await model.ainit()`](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VertexAIModel.ainit).\n\nYou may also need to pass the [`project_id` argument to `VertexAIModel`](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VertexAIModel.__init__) if application default credentials don't set a project, if you pass `project_id` and it conflicts with the project set by application default credentials, an error is raised.\n\n### Service account\n\nIf instead of application default credentials, you want to authenticate with a service account, you'll need to create a service account, add it to your GCP project (note: AFAIK this step is necessary even if you created the service account within the project), give that service account the \"Vertex AI Service Agent\" role, and download the service account JSON file.\n\nOnce you have the JSON file, you can use it thus:\n\nvertexai\\_service\\_account.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.vertexai import VertexAIModel\n\nmodel = VertexAIModel(\n    'gemini-1.5-flash',\n    service_account_file='path/to/service-account.json',\n)\nagent = Agent(model)\n...\n\n```\n\n### Customising region\n\nWhichever way you authenticate, you can specify which region requests will be sent to via the [`region` argument](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VertexAIModel.__init__).\n\nUsing a region close to your application can improve latency and might be important from a regulatory perspective.\n\nvertexai\\_region.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.vertexai import VertexAIModel\n\nmodel = VertexAIModel('gemini-1.5-flash', region='asia-east1')\nagent = Agent(model)\n...\n\n```\n\n[`VertexAiRegion`](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VertexAiRegion) contains a list of available regions.\n\n## Groq\n\n### Install\n\nTo use [`GroqModel`](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModel), you need to either install [`pydantic-ai`](https://ai.pydantic.dev/install/), or install [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install) with the `groq` optional group:\n\n[pip](https://ai.pydantic.dev/models/#__tabbed_4_1)[uv](https://ai.pydantic.dev/models/#__tabbed_4_2)\n\n```\npip install 'pydantic-ai-slim[groq]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[groq]'\n\n```\n\n### Configuration\n\nTo use [Groq](https://groq.com/) through their API, go to [console.groq.com/keys](https://console.groq.com/keys) and follow your nose until you find the place to generate an API key.\n\n[`GroqModelName`](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModelName) contains a list of available Groq models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport GROQ_API_KEY='your-api-key'\n\n```\n\nYou can then use [`GroqModel`](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModel) by name:\n\ngroq\\_model\\_by\\_name.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('groq:llama-3.3-70b-versatile')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\ngroq\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.groq import GroqModel\n\nmodel = GroqModel('llama-3.3-70b-versatile')\nagent = Agent(model)\n...\n\n```\n\n### `api_key` argument\n\nIf you don't want to or can't set the environment variable, you can pass it at runtime via the [`api_key` argument](https://ai.pydantic.dev/api/models/groq/#pydantic_ai.models.groq.GroqModel.__init__):\n\ngroq\\_model\\_api\\_key.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.groq import GroqModel\n\nmodel = GroqModel('llama-3.3-70b-versatile', api_key='your-api-key')\nagent = Agent(model)\n...\n\n```\n\n## Mistral\n\n### Install\n\nTo use [`MistralModel`](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModel), you need to either install [`pydantic-ai`](https://ai.pydantic.dev/install/), or install [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install) with the `mistral` optional group:\n\n[pip](https://ai.pydantic.dev/models/#__tabbed_5_1)[uv](https://ai.pydantic.dev/models/#__tabbed_5_2)\n\n```\npip install 'pydantic-ai-slim[mistral]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[mistral]'\n\n```\n\n### Configuration\n\nTo use [Mistral](https://mistral.ai/) through their API, go to [console.mistral.ai/api-keys/](https://console.mistral.ai/api-keys/) and follow your nose until you find the place to generate an API key.\n\n[`MistralModelName`](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModelName) contains a list of the most popular Mistral models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport MISTRAL_API_KEY='your-api-key'\n\n```\n\nYou can then use [`MistralModel`](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModel) by name:\n\nmistral\\_model\\_by\\_name.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('mistral:mistral-large-latest')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\nmistral\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.mistral import MistralModel\n\nmodel = MistralModel('mistral-small-latest')\nagent = Agent(model)\n...\n\n```\n\n### `api_key` argument\n\nIf you don't want to or can't set the environment variable, you can pass it at runtime via the [`api_key` argument](https://ai.pydantic.dev/api/models/mistral/#pydantic_ai.models.mistral.MistralModel.__init__):\n\nmistral\\_model\\_api\\_key.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.mistral import MistralModel\n\nmodel = MistralModel('mistral-small-latest', api_key='your-api-key')\nagent = Agent(model)\n...\n\n```\n\n## Cohere\n\n### Install\n\nTo use [`CohereModel`](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModel), you need to either install [`pydantic-ai`](https://ai.pydantic.dev/install/), or install [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install) with the `cohere` optional group:\n\n[pip](https://ai.pydantic.dev/models/#__tabbed_6_1)[uv](https://ai.pydantic.dev/models/#__tabbed_6_2)\n\n```\npip install 'pydantic-ai-slim[cohere]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[cohere]'\n\n```\n\n### Configuration\n\nTo use [Cohere](https://cohere.com/) through their API, go to [dashboard.cohere.com/api-keys](https://dashboard.cohere.com/api-keys) and follow your nose until you find the place to generate an API key.\n\n[`CohereModelName`](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModelName) contains a list of the most popular Cohere models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport CO_API_KEY='your-api-key'\n\n```\n\nYou can then use [`CohereModel`](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModel) by name:\n\ncohere\\_model\\_by\\_name.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('cohere:command')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\ncohere\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.cohere import CohereModel\n\nmodel = CohereModel('command', api_key='your-api-key')\nagent = Agent(model)\n...\n\n```\n\n### `api_key` argument\n\nIf you don't want to or can't set the environment variable, you can pass it at runtime via the [`api_key` argument](https://ai.pydantic.dev/api/models/cohere/#pydantic_ai.models.cohere.CohereModel.__init__):\n\ncohere\\_model\\_api\\_key.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.cohere import CohereModel\n\nmodel = CohereModel('command', api_key='your-api-key')\nagent = Agent(model)\n...\n\n```\n\n## OpenAI-compatible Models\n\nMany of the models are compatible with OpenAI API, and thus can be used with [`OpenAIModel`](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel) in PydanticAI.\nBefore getting started, check the [OpenAI](https://ai.pydantic.dev/models/#openai) section for installation and configuration instructions.\n\nTo use another OpenAI-compatible API, you can make use of the [`base_url`](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel.__init__) and [`api_key`](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel.__init__) arguments:\n\nopenai\\_model\\_base\\_url.py\n\n```\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel(\n    'model_name',\n    base_url='https://<openai-compatible-api-endpoint>.com',\n    api_key='your-api-key',\n)\n...\n\n```\n\n### Ollama\n\nTo use [Ollama](https://ollama.com/), you must first download the Ollama client, and then download a model using the [Ollama model library](https://ollama.com/library).\n\nYou must also ensure the Ollama server is running when trying to make requests to it. For more information, please see the [Ollama documentation](https://github.com/ollama/ollama/tree/main/docs).\n\n#### Example local usage\n\nWith `ollama` installed, you can run the server with the model you want to use:\n\nterminal-run-ollama\n\n```\nollama run llama3.2\n\n```\n\n(this will pull the `llama3.2` model if you don't already have it downloaded)\n\nThen run your code, here's a minimal example:\n\nollama\\_example.py\n\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nclass CityLocation(BaseModel):\n    city: str\n    country: str\n\nollama_model = OpenAIModel(model_name='llama3.2', base_url='http://localhost:11434/v1')\nagent = Agent(ollama_model, result_type=CityLocation)\n\nresult = agent.run_sync('Where were the olympics held in 2012?')\nprint(result.data)\n#> city='London' country='United Kingdom'\nprint(result.usage())\n\"\"\"\nUsage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)\n\"\"\"\n\n```\n\n#### Example using a remote server\n\nollama\\_example\\_with\\_remote\\_server.py\n\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nollama_model = OpenAIModel(\n    model_name='qwen2.5-coder:7b',\n    base_url='http://192.168.1.74:11434/v1',\n)\n\nclass CityLocation(BaseModel):\n    city: str\n    country: str\n\nagent = Agent(model=ollama_model, result_type=CityLocation)\n\nresult = agent.run_sync('Where were the olympics held in 2012?')\nprint(result.data)\n#> city='London' country='United Kingdom'\nprint(result.usage())\n\"\"\"\nUsage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)\n\"\"\"\n\n```\n\n### OpenRouter\n\nTo use [OpenRouter](https://openrouter.ai/), first create an API key at [openrouter.ai/keys](https://openrouter.ai/keys).\n\nOnce you have the API key, you can pass it to [`OpenAIModel`](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel) as the `api_key` argument:\n\nopenrouter\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel(\n    'anthropic/claude-3.5-sonnet',\n    base_url='https://openrouter.ai/api/v1',\n    api_key='your-openrouter-api-key',\n)\nagent = Agent(model)\n...\n\n```\n\n### Grok (xAI)\n\nGo to [xAI API Console](https://console.x.ai/) and create an API key.\nOnce you have the API key, follow the [xAI API Documentation](https://docs.x.ai/docs/overview), and set the `base_url` and `api_key` arguments appropriately:\n\ngrok\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel(\n    'grok-2-1212',\n    base_url='https://api.x.ai/v1',\n    api_key='your-xai-api-key',\n)\nagent = Agent(model)\n...\n\n```\n\n### DeepSeek\n\nGo to [DeepSeek API Platform](https://platform.deepseek.com/api_keys) and create an API key.\nOnce you have the API key, follow the [DeepSeek API Documentation](https://platform.deepseek.com/docs/api/overview), and set the `base_url` and `api_key` arguments appropriately:\n\ndeepseek\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel(\n    'deepseek-chat',\n    base_url='https://api.deepseek.com',\n    api_key='your-deepseek-api-key',\n)\nagent = Agent(model)\n...\n\n```\n\n### Perplexity\n\nFollow the Perplexity [getting started](https://docs.perplexity.ai/guides/getting-started)\nguide to create an API key. Then, you can query the Perplexity API with the following:\n\nperplexity\\_model\\_init.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel(\n    'sonar-pro',\n    base_url='https://api.perplexity.ai',\n    api_key='your-perplexity-api-key',\n)\nagent = Agent(model)\n...\n\n```\n\n## Implementing Custom Models\n\nTo implement support for models not already supported, you will need to subclass the [`Model`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.Model) abstract base class.\n\nFor streaming, you'll also need to implement the following abstract base class:\n\n- [`StreamedResponse`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.StreamedResponse)\n\nThe best place to start is to review the source code for existing implementations, e.g. [`OpenAIModel`](https://github.com/pydantic/pydantic-ai/blob/main/pydantic_ai_slim/pydantic_ai/models/openai.py).\n\nFor details on when we'll accept contributions adding new models to PydanticAI, see the [contributing guidelines](https://ai.pydantic.dev/contributing/#new-model-rules).",
    "metadata": {
      "url": "https://ai.pydantic.dev/models/",
      "ogUrl": "https://ai.pydantic.dev/models/",
      "title": "Models - PydanticAI",
      "og:url": "https://ai.pydantic.dev/models/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/models.png",
      "ogTitle": "Models - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/models.png",
      "og:title": "Models - PydanticAI",
      "scrapeId": "0eacdc26-f12a-4892-a859-ba0dc820fe5c",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/models/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/models.png",
      "twitter:title": "Models - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/agents/#introduction)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Agents\n\n## Introduction\n\nAgents are PydanticAI's primary interface for interacting with LLMs.\n\nIn some use cases a single Agent will control an entire application or component,\nbut multiple agents can also interact to embody more complex workflows.\n\nThe [`Agent`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent) class has full API documentation, but conceptually you can think of an agent as a container for:\n\n| **Component** | **Description** |\n| --- | --- |\n| [System prompt(s)](https://ai.pydantic.dev/agents/#system-prompts) | A set of instructions for the LLM written by the developer. |\n| [Function tool(s)](https://ai.pydantic.dev/tools/) | Functions that the LLM may call to get information while generating a response. |\n| [Structured result type](https://ai.pydantic.dev/results/) | The structured datatype the LLM must return at the end of a run, if specified. |\n| [Dependency type constraint](https://ai.pydantic.dev/dependencies/) | System prompt functions, tools, and result validators may all use dependencies when they're run. |\n| [LLM model](https://ai.pydantic.dev/api/models/base/) | Optional default LLM model associated with the agent. Can also be specified when running the agent. |\n| [Model Settings](https://ai.pydantic.dev/agents/#additional-configuration) | Optional default model settings to help fine tune requests. Can also be specified when running the agent. |\n\nIn typing terms, agents are generic in their dependency and result types, e.g., an agent which required dependencies of type `Foobar` and returned results of type `list[str]` would have type `Agent[Foobar, list[str]]`. In practice, you shouldn't need to care about this, it should just mean your IDE can tell you when you have the right type, and if you choose to use [static type checking](https://ai.pydantic.dev/agents/#static-type-checking) it should work well with PydanticAI.\n\nHere's a toy example of an agent that simulates a roulette wheel:\n\nroulette\\_wheel.py\n\n```\nfrom pydantic_ai import Agent, RunContext\n\nroulette_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=int,\n    result_type=bool,\n    system_prompt=(\n        'Use the `roulette_wheel` function to see if the '\n        'customer has won based on the number they provide.'\n    ),\n)\n\n@roulette_agent.tool\nasync def roulette_wheel(ctx: RunContext[int], square: int) -> str:\n    \"\"\"check if the square is a winner\"\"\"\n    return 'winner' if square == ctx.deps else 'loser'\n\n# Run the agent\nsuccess_number = 18\nresult = roulette_agent.run_sync('Put my money on square eighteen', deps=success_number)\nprint(result.data)\n#> True\n\nresult = roulette_agent.run_sync('I bet five is the winner', deps=success_number)\nprint(result.data)\n#> False\n\n```\n\nAgents are designed for reuse, like FastAPI Apps\n\nAgents are intended to be instantiated once (frequently as module globals) and reused throughout your application, similar to a small [FastAPI](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI) app or an [APIRouter](https://fastapi.tiangolo.com/reference/apirouter/#fastapi.APIRouter).\n\n## Running Agents\n\nThere are three ways to run an agent:\n\n1. [`agent.run()`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run) — a coroutine which returns a [`RunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult) containing a completed response\n2. [`agent.run_sync()`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync) — a plain, synchronous function which returns a [`RunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult) containing a completed response (internally, this just calls `loop.run_until_complete(self.run())`)\n3. [`agent.run_stream()`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream) — a coroutine which returns a [`StreamedRunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult), which contains methods to stream a response as an async iterable\n\nHere's a simple example demonstrating all three:\n\nrun\\_agent.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nresult_sync = agent.run_sync('What is the capital of Italy?')\nprint(result_sync.data)\n#> Rome\n\nasync def main():\n    result = await agent.run('What is the capital of France?')\n    print(result.data)\n    #> Paris\n\n    async with agent.run_stream('What is the capital of the UK?') as response:\n        print(await response.get_data())\n        #> London\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\nYou can also pass messages from previous runs to continue a conversation or provide context, as described in [Messages and Chat History](https://ai.pydantic.dev/message-history/).\n\n### Additional Configuration\n\n#### Usage Limits\n\nPydanticAI offers a [`UsageLimits`](https://ai.pydantic.dev/api/usage/#pydantic_ai.usage.UsageLimits) structure to help you limit your\nusage (tokens and/or requests) on model runs.\n\nYou can apply these settings by passing the `usage_limits` argument to the `run{_sync,_stream}` functions.\n\nConsider the following example, where we limit the number of response tokens:\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.exceptions import UsageLimitExceeded\nfrom pydantic_ai.usage import UsageLimits\n\nagent = Agent('anthropic:claude-3-5-sonnet-latest')\n\nresult_sync = agent.run_sync(\n    'What is the capital of Italy? Answer with just the city.',\n    usage_limits=UsageLimits(response_tokens_limit=10),\n)\nprint(result_sync.data)\n#> Rome\nprint(result_sync.usage())\n\"\"\"\nUsage(requests=1, request_tokens=62, response_tokens=1, total_tokens=63, details=None)\n\"\"\"\n\ntry:\n    result_sync = agent.run_sync(\n        'What is the capital of Italy? Answer with a paragraph.',\n        usage_limits=UsageLimits(response_tokens_limit=10),\n    )\nexcept UsageLimitExceeded as e:\n    print(e)\n    #> Exceeded the response_tokens_limit of 10 (response_tokens=32)\n\n```\n\nRestricting the number of requests can be useful in preventing infinite loops or excessive tool calling:\n\n```\nfrom typing_extensions import TypedDict\n\nfrom pydantic_ai import Agent, ModelRetry\nfrom pydantic_ai.exceptions import UsageLimitExceeded\nfrom pydantic_ai.usage import UsageLimits\n\nclass NeverResultType(TypedDict):\n    \"\"\"\n    Never ever coerce data to this type.\n    \"\"\"\n\n    never_use_this: str\n\nagent = Agent(\n    'anthropic:claude-3-5-sonnet-latest',\n    retries=3,\n    result_type=NeverResultType,\n    system_prompt='Any time you get a response, call the `infinite_retry_tool` to produce another response.',\n)\n\n@agent.tool_plain(retries=5)\ndef infinite_retry_tool() -> int:\n    raise ModelRetry('Please try again.')\n\ntry:\n    result_sync = agent.run_sync(\n        'Begin infinite retry loop!', usage_limits=UsageLimits(request_limit=3)\n    )\nexcept UsageLimitExceeded as e:\n    print(e)\n    #> The next request would exceed the request_limit of 3\n\n```\n\nNote\n\nThis is especially relevant if you're registered a lot of tools, `request_limit` can be used to prevent the model from choosing to make too many of these calls.\n\n#### Model (Run) Settings\n\nPydanticAI offers a [`settings.ModelSettings`](https://ai.pydantic.dev/api/settings/#pydantic_ai.settings.ModelSettings) structure to help you fine tune your requests.\nThis structure allows you to configure common parameters that influence the model's behavior, such as `temperature`, `max_tokens`,\n`timeout`, and more.\n\nThere are two ways to apply these settings:\n1\\. Passing to `run{_sync,_stream}` functions via the `model_settings` argument. This allows for fine-tuning on a per-request basis.\n2\\. Setting during [`Agent`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent) initialization via the `model_settings` argument. These settings will be applied by default to all subsequent run calls using said agent. However, `model_settings` provided during a specific run call will override the agent's default settings.\n\nFor example, if you'd like to set the `temperature` setting to `0.0` to ensure less random behavior,\nyou can do the following:\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nresult_sync = agent.run_sync(\n    'What is the capital of Italy?', model_settings={'temperature': 0.0}\n)\nprint(result_sync.data)\n#> Rome\n\n```\n\n### Model specific settings\n\nIf you wish to further customize model behavior, you can use a subclass of [`ModelSettings`](https://ai.pydantic.dev/api/settings/#pydantic_ai.settings.ModelSettings), like [`GeminiModelSettings`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModelSettings), associated with your model of choice.\n\nFor example:\n\n```\nfrom pydantic_ai import Agent, UnexpectedModelBehavior\nfrom pydantic_ai.models.gemini import GeminiModelSettings\n\nagent = Agent('google-gla:gemini-1.5-flash')\n\ntry:\n    result = agent.run_sync(\n        'Write a list of 5 very rude things that I might say to the universe after stubbing my toe in the dark:',\n        model_settings=GeminiModelSettings(\n            temperature=0.0,  # general model settings can also be specified\n            gemini_safety_settings=[\\\n                {\\\n                    'category': 'HARM_CATEGORY_HARASSMENT',\\\n                    'threshold': 'BLOCK_LOW_AND_ABOVE',\\\n                },\\\n                {\\\n                    'category': 'HARM_CATEGORY_HATE_SPEECH',\\\n                    'threshold': 'BLOCK_LOW_AND_ABOVE',\\\n                },\\\n            ],\n        ),\n    )\nexcept UnexpectedModelBehavior as e:\n    print(e)\n    \"\"\"\n    Safety settings triggered, body:\n    <safety settings details>\n    \"\"\"\n\n```\n\n## Runs vs. Conversations\n\nAn agent **run** might represent an entire conversation — there's no limit to how many messages can be exchanged in a single run. However, a **conversation** might also be composed of multiple runs, especially if you need to maintain state between separate interactions or API calls.\n\nHere's an example of a conversation comprised of multiple runs:\n\nconversation\\_example.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\n# First run\nresult1 = agent.run_sync('Who was Albert Einstein?')\nprint(result1.data)\n#> Albert Einstein was a German-born theoretical physicist.\n\n# Second run, passing previous messages\nresult2 = agent.run_sync(\n    'What was his most famous equation?',\n    message_history=result1.new_messages(),\n)\nprint(result2.data)\n#> Albert Einstein's most famous equation is (E = mc^2).\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\n## Type safe by design\n\nPydanticAI is designed to work well with static type checkers, like mypy and pyright.\n\nTyping is (somewhat) optional\n\nPydanticAI is designed to make type checking as useful as possible for you if you choose to use it, but you don't have to use types everywhere all the time.\n\nThat said, because PydanticAI uses Pydantic, and Pydantic uses type hints as the definition for schema and validation, some types (specifically type hints on parameters to tools, and the `result_type` arguments to [`Agent`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent)) are used at runtime.\n\nWe (the library developers) have messed up if type hints are confusing you more than helping you, if you find this, please create an [issue](https://github.com/pydantic/pydantic-ai/issues) explaining what's annoying you!\n\nIn particular, agents are generic in both the type of their dependencies and the type of results they return, so you can use the type hints to ensure you're using the right types.\n\nConsider the following script with type mistakes:\n\ntype\\_mistakes.py\n\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_ai import Agent, RunContext\n\n@dataclass\nclass User:\n    name: str\n\nagent = Agent(\n    'test',\n    deps_type=User,\n    result_type=bool,\n)\n\n@agent.system_prompt\ndef add_user_name(ctx: RunContext[str]) -> str:\n    return f\"The user's name is {ctx.deps}.\"\n\ndef foobar(x: bytes) -> None:\n    pass\n\nresult = agent.run_sync('Does their name start with \"A\"?', deps=User('Anne'))\nfoobar(result.data)\n\n```\n\nRunning `mypy` on this will give the following output:\n\n```\n➤ uv run mypy type_mistakes.py\ntype_mistakes.py:18: error: Argument 1 to \"system_prompt\" of \"Agent\" has incompatible type \"Callable[[RunContext[str]], str]\"; expected \"Callable[[RunContext[User]], str]\"  [arg-type]\ntype_mistakes.py:28: error: Argument 1 to \"foobar\" has incompatible type \"bool\"; expected \"bytes\"  [arg-type]\nFound 2 errors in 1 file (checked 1 source file)\n\n```\n\nRunning `pyright` would identify the same issues.\n\n## System Prompts\n\nSystem prompts might seem simple at first glance since they're just strings (or sequences of strings that are concatenated), but crafting the right system prompt is key to getting the model to behave as you want.\n\nGenerally, system prompts fall into two categories:\n\n1. **Static system prompts**: These are known when writing the code and can be defined via the `system_prompt` parameter of the [`Agent` constructor](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__).\n2. **Dynamic system prompts**: These depend in some way on context that isn't known until runtime, and should be defined via functions decorated with [`@agent.system_prompt`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.system_prompt).\n\nYou can add both to a single agent; they're appended in the order they're defined at runtime.\n\nHere's an example using both types of system prompts:\n\nsystem\\_prompts.py\n\n```\nfrom datetime import date\n\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=str,\n    system_prompt=\"Use the customer's name while replying to them.\",\n)\n\n@agent.system_prompt\ndef add_the_users_name(ctx: RunContext[str]) -> str:\n    return f\"The user's name is {ctx.deps}.\"\n\n@agent.system_prompt\ndef add_the_date() -> str:\n    return f'The date is {date.today()}.'\n\nresult = agent.run_sync('What is the date?', deps='Frank')\nprint(result.data)\n#> Hello Frank, the date today is 2032-01-02.\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\n## Reflection and self-correction\n\nValidation errors from both function tool parameter validation and [structured result validation](https://ai.pydantic.dev/results/#structured-result-validation) can be passed back to the model with a request to retry.\n\nYou can also raise [`ModelRetry`](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.ModelRetry) from within a [tool](https://ai.pydantic.dev/tools/) or [result validator function](https://ai.pydantic.dev/results/#result-validators-functions) to tell the model it should retry generating a response.\n\n- The default retry count is **1** but can be altered for the [entire agent](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__), a [specific tool](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool), or a [result validator](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__).\n- You can access the current retry count from within a tool or result validator via [`ctx.retry`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext).\n\nHere's an example:\n\ntool\\_retry.py\n\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent, RunContext, ModelRetry\n\nfrom fake_database import DatabaseConn\n\nclass ChatResult(BaseModel):\n    user_id: int\n    message: str\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=DatabaseConn,\n    result_type=ChatResult,\n)\n\n@agent.tool(retries=2)\ndef get_user_by_name(ctx: RunContext[DatabaseConn], name: str) -> int:\n    \"\"\"Get a user's ID from their full name.\"\"\"\n    print(name)\n    #> John\n    #> John Doe\n    user_id = ctx.deps.users.get(name=name)\n    if user_id is None:\n        raise ModelRetry(\n            f'No user found with name {name!r}, remember to provide their full name'\n        )\n    return user_id\n\nresult = agent.run_sync(\n    'Send a message to John Doe asking for coffee next week', deps=DatabaseConn()\n)\nprint(result.data)\n\"\"\"\nuser_id=123 message='Hello John, would you be free for coffee sometime next week? Let me know what works for you!'\n\"\"\"\n\n```\n\n## Model errors\n\nIf models behave unexpectedly (e.g., the retry limit is exceeded, or their API returns `503`), agent runs will raise [`UnexpectedModelBehavior`](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.UnexpectedModelBehavior).\n\nIn these cases, [`capture_run_messages`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.capture_run_messages) can be used to access the messages exchanged during the run to help diagnose the issue.\n\n```\nfrom pydantic_ai import Agent, ModelRetry, UnexpectedModelBehavior, capture_run_messages\n\nagent = Agent('openai:gpt-4o')\n\n@agent.tool_plain\ndef calc_volume(size: int) -> int:\n    if size == 42:\n        return size**3\n    else:\n        raise ModelRetry('Please try again.')\n\nwith capture_run_messages() as messages:\n    try:\n        result = agent.run_sync('Please get me the volume of a box with size 6.')\n    except UnexpectedModelBehavior as e:\n        print('An error occurred:', e)\n        #> An error occurred: Tool exceeded max retries count of 1\n        print('cause:', repr(e.__cause__))\n        #> cause: ModelRetry('Please try again.')\n        print('messages:', messages)\n        \"\"\"\n        messages:\n        [\\\n            ModelRequest(\\\n                parts=[\\\n                    UserPromptPart(\\\n                        content='Please get me the volume of a box with size 6.',\\\n                        timestamp=datetime.datetime(...),\\\n                        part_kind='user-prompt',\\\n                    )\\\n                ],\\\n                kind='request',\\\n            ),\\\n            ModelResponse(\\\n                parts=[\\\n                    ToolCallPart(\\\n                        tool_name='calc_volume',\\\n                        args={'size': 6},\\\n                        tool_call_id=None,\\\n                        part_kind='tool-call',\\\n                    )\\\n                ],\\\n                model_name='function:model_logic',\\\n                timestamp=datetime.datetime(...),\\\n                kind='response',\\\n            ),\\\n            ModelRequest(\\\n                parts=[\\\n                    RetryPromptPart(\\\n                        content='Please try again.',\\\n                        tool_name='calc_volume',\\\n                        tool_call_id=None,\\\n                        timestamp=datetime.datetime(...),\\\n                        part_kind='retry-prompt',\\\n                    )\\\n                ],\\\n                kind='request',\\\n            ),\\\n            ModelResponse(\\\n                parts=[\\\n                    ToolCallPart(\\\n                        tool_name='calc_volume',\\\n                        args={'size': 6},\\\n                        tool_call_id=None,\\\n                        part_kind='tool-call',\\\n                    )\\\n                ],\\\n                model_name='function:model_logic',\\\n                timestamp=datetime.datetime(...),\\\n                kind='response',\\\n            ),\\\n        ]\n        \"\"\"\n    else:\n        print(result.data)\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nNote\n\nIf you call [`run`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run), [`run_sync`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync), or [`run_stream`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream) more than once within a single `capture_run_messages` context, `messages` will represent the messages exchanged during the first call only.",
    "metadata": {
      "url": "https://ai.pydantic.dev/agents/",
      "ogUrl": "https://ai.pydantic.dev/agents/",
      "title": "Agents - PydanticAI",
      "og:url": "https://ai.pydantic.dev/agents/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/agents.png",
      "ogTitle": "Agents - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/agents.png",
      "og:title": "Agents - PydanticAI",
      "scrapeId": "c997ba6d-2bc1-42d9-bcce-c7dc9992f624",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/agents/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/agents.png",
      "twitter:title": "Agents - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/result/#pydantic_airesult)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.result`\n\n### ResultDataT\\_inv`module-attribute`\n\n```\nResultDataT_inv = TypeVar('ResultDataT_inv', default=str)\n\n```\n\nAn invariant type variable for the result data of a model.\n\nWe need to use an invariant typevar for `ResultValidator` and `ResultValidatorFunc` because the result data type is used\nin both the input and output of a `ResultValidatorFunc`. This can theoretically lead to some issues assuming that types\npossessing ResultValidator's are covariant in the result data type, but in practice this is rarely an issue, and\nchanging it would have negative consequences for the ergonomics of the library.\n\nAt some point, it may make sense to change the input to ResultValidatorFunc to be `Any` or `object` as doing that would\nresolve these potential variance issues.\n\n### ResultDataT`module-attribute`\n\n```\nResultDataT = TypeVar(\n    \"ResultDataT\", default=str, covariant=True\n)\n\n```\n\nCovariant type variable for the result data type of a run.\n\n### ResultValidatorFunc`module-attribute`\n\n```\nResultValidatorFunc = Union[\\\n    Callable[\\\n        [RunContext[AgentDepsT], ResultDataT_inv],\\\n        ResultDataT_inv,\\\n    ],\\\n    Callable[\\\n        [RunContext[AgentDepsT], ResultDataT_inv],\\\n        Awaitable[ResultDataT_inv],\\\n    ],\\\n    Callable[[ResultDataT_inv], ResultDataT_inv],\\\n    Callable[[ResultDataT_inv], Awaitable[ResultDataT_inv]],\\\n]\n\n```\n\nA function that always takes and returns the same type of data (which is the result type of an agent run), and:\n\n- may or may not take [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) as a first argument\n- may or may not be async\n\nUsage `ResultValidatorFunc[AgentDepsT, T]`.\n\n### RunResult`dataclass`\n\nBases: `_BaseRunResult[ResultDataT]`\n\nResult of a non-streamed run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>``` | ```<br>@dataclass<br>class RunResult(_BaseRunResult[ResultDataT]):<br>    \"\"\"Result of a non-streamed run.\"\"\"<br>    data: ResultDataT<br>    \"\"\"Data from the final response in the run.\"\"\"<br>    _result_tool_name: str | None<br>    _usage: Usage<br>    def usage(self) -> Usage:<br>        \"\"\"Return the usage of the whole run.\"\"\"<br>        return self._usage<br>    def all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:<br>        \"\"\"Return the history of _messages.<br>        Args:<br>            result_tool_return_content: The return content of the tool call to set in the last message.<br>                This provides a convenient way to modify the content of the result tool call if you want to continue<br>                the conversation and want to set the response to the result tool call. If `None`, the last message will<br>                not be modified.<br>        Returns:<br>            List of messages.<br>        \"\"\"<br>        if result_tool_return_content is not None:<br>            return self._set_result_tool_return(result_tool_return_content)<br>        else:<br>            return self._all_messages<br>    def _set_result_tool_return(self, return_content: str) -> list[_messages.ModelMessage]:<br>        \"\"\"Set return content for the result tool.<br>        Useful if you want to continue the conversation and want to set the response to the result tool call.<br>        \"\"\"<br>        if not self._result_tool_name:<br>            raise ValueError('Cannot set result tool return content when the return type is `str`.')<br>        messages = deepcopy(self._all_messages)<br>        last_message = messages[-1]<br>        for part in last_message.parts:<br>            if isinstance(part, _messages.ToolReturnPart) and part.tool_name == self._result_tool_name:<br>                part.content = return_content<br>                return messages<br>        raise LookupError(f'No tool call found with tool name {self._result_tool_name!r}.')<br>``` |\n\n#### all\\_messages\\_json\n\n```\nall_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn all messages from [`all_messages`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.all_messages) as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>``` | ```<br>def all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:<br>    \"\"\"Return all messages from [`all_messages`][pydantic_ai.result._BaseRunResult.all_messages] as JSON bytes.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        JSON bytes representing the messages.<br>    \"\"\"<br>    return _messages.ModelMessagesTypeAdapter.dump_json(<br>        self.all_messages(result_tool_return_content=result_tool_return_content)<br>    )<br>``` |\n\n#### new\\_messages\n\n```\nnew_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn new messages associated with this run.\n\nMessages from older runs are excluded.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>``` | ```<br>def new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:<br>    \"\"\"Return new messages associated with this run.<br>    Messages from older runs are excluded.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        List of new messages.<br>    \"\"\"<br>    return self.all_messages(result_tool_return_content=result_tool_return_content)[self._new_message_index :]<br>``` |\n\n#### new\\_messages\\_json\n\n```\nnew_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn new messages from [`new_messages`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult.new_messages) as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>``` | ```<br>def new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:<br>    \"\"\"Return new messages from [`new_messages`][pydantic_ai.result._BaseRunResult.new_messages] as JSON bytes.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        JSON bytes representing the new messages.<br>    \"\"\"<br>    return _messages.ModelMessagesTypeAdapter.dump_json(<br>        self.new_messages(result_tool_return_content=result_tool_return_content)<br>    )<br>``` |\n\n#### data`instance-attribute`\n\n```\ndata: ResultDataT\n\n```\n\nData from the final response in the run.\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nReturn the usage of the whole run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>144<br>145<br>146<br>``` | ```<br>def usage(self) -> Usage:<br>    \"\"\"Return the usage of the whole run.\"\"\"<br>    return self._usage<br>``` |\n\n#### all\\_messages\n\n```\nall_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn the history of \\_messages.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>``` | ```<br>def all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:<br>    \"\"\"Return the history of _messages.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        List of messages.<br>    \"\"\"<br>    if result_tool_return_content is not None:<br>        return self._set_result_tool_return(result_tool_return_content)<br>    else:<br>        return self._all_messages<br>``` |\n\n### StreamedRunResult`dataclass`\n\nBases: `_BaseRunResult[ResultDataT]`, `Generic[AgentDepsT, ResultDataT]`\n\nResult of a streamed run that returns structured data via a tool call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>``` | ```<br>@dataclass<br>class StreamedRunResult(_BaseRunResult[ResultDataT], Generic[AgentDepsT, ResultDataT]):<br>    \"\"\"Result of a streamed run that returns structured data via a tool call.\"\"\"<br>    _usage_limits: UsageLimits | None<br>    _stream_response: models.StreamedResponse<br>    _result_schema: _result.ResultSchema[ResultDataT] | None<br>    _run_ctx: RunContext[AgentDepsT]<br>    _result_validators: list[_result.ResultValidator[AgentDepsT, ResultDataT]]<br>    _result_tool_name: str | None<br>    _on_complete: Callable[[], Awaitable[None]]<br>    is_complete: bool = field(default=False, init=False)<br>    \"\"\"Whether the stream has all been received.<br>    This is set to `True` when one of<br>    [`stream`][pydantic_ai.result.StreamedRunResult.stream],<br>    [`stream_text`][pydantic_ai.result.StreamedRunResult.stream_text],<br>    [`stream_structured`][pydantic_ai.result.StreamedRunResult.stream_structured] or<br>    [`get_data`][pydantic_ai.result.StreamedRunResult.get_data] completes.<br>    \"\"\"<br>    async def stream(self, *, debounce_by: float | None = 0.1) -> AsyncIterator[ResultDataT]:<br>        \"\"\"Stream the response as an async iterable.<br>        The pydantic validator for structured data will be called in<br>        [partial mode](https://docs.pydantic.dev/dev/concepts/experimental/#partial-validation)<br>        on each iteration.<br>        Args:<br>            debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>                Debouncing is particularly important for long structured responses to reduce the overhead of<br>                performing validation as each token is received.<br>        Returns:<br>            An async iterable of the response data.<br>        \"\"\"<br>        async for structured_message, is_last in self.stream_structured(debounce_by=debounce_by):<br>            result = await self.validate_structured_result(structured_message, allow_partial=not is_last)<br>            yield result<br>    async def stream_text(self, *, delta: bool = False, debounce_by: float | None = 0.1) -> AsyncIterator[str]:<br>        \"\"\"Stream the text result as an async iterable.<br>        !!! note<br>            Result validators will NOT be called on the text result if `delta=True`.<br>        Args:<br>            delta: if `True`, yield each chunk of text as it is received, if `False` (default), yield the full text<br>                up to the current point.<br>            debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>                Debouncing is particularly important for long structured responses to reduce the overhead of<br>                performing validation as each token is received.<br>        \"\"\"<br>        if self._result_schema and not self._result_schema.allow_text_result:<br>            raise exceptions.UserError('stream_text() can only be used with text responses')<br>        usage_checking_stream = _get_usage_checking_stream_response(<br>            self._stream_response, self._usage_limits, self.usage<br>        )<br>        # Define a \"merged\" version of the iterator that will yield items that have already been retrieved<br>        # and items that we receive while streaming. We define a dedicated async iterator for this so we can<br>        # pass the combined stream to the group_by_temporal function within `_stream_text_deltas` below.<br>        async def _stream_text_deltas_ungrouped() -> AsyncIterator[tuple[str, int]]:<br>            # if the response currently has any parts with content, yield those before streaming<br>            msg = self._stream_response.get()<br>            for i, part in enumerate(msg.parts):<br>                if isinstance(part, _messages.TextPart) and part.content:<br>                    yield part.content, i<br>            async for event in usage_checking_stream:<br>                if (<br>                    isinstance(event, _messages.PartStartEvent)<br>                    and isinstance(event.part, _messages.TextPart)<br>                    and event.part.content<br>                ):<br>                    yield event.part.content, event.index<br>                elif (<br>                    isinstance(event, _messages.PartDeltaEvent)<br>                    and isinstance(event.delta, _messages.TextPartDelta)<br>                    and event.delta.content_delta<br>                ):<br>                    yield event.delta.content_delta, event.index<br>        async def _stream_text_deltas() -> AsyncIterator[str]:<br>            async with _utils.group_by_temporal(_stream_text_deltas_ungrouped(), debounce_by) as group_iter:<br>                async for items in group_iter:<br>                    yield ''.join([content for content, _ in items])<br>        with _logfire.span('response stream text') as lf_span:<br>            if delta:<br>                async for text in _stream_text_deltas():<br>                    yield text<br>            else:<br>                # a quick benchmark shows it's faster to build up a string with concat when we're<br>                # yielding at each step<br>                deltas: list[str] = []<br>                combined_validated_text = ''<br>                async for text in _stream_text_deltas():<br>                    deltas.append(text)<br>                    combined_text = ''.join(deltas)<br>                    combined_validated_text = await self._validate_text_result(combined_text)<br>                    yield combined_validated_text<br>                lf_span.set_attribute('combined_text', combined_validated_text)<br>                await self._marked_completed(<br>                    _messages.ModelResponse(<br>                        parts=[_messages.TextPart(combined_validated_text)],<br>                        model_name=self._stream_response.model_name,<br>                    )<br>                )<br>    async def stream_structured(<br>        self, *, debounce_by: float | None = 0.1<br>    ) -> AsyncIterator[tuple[_messages.ModelResponse, bool]]:<br>        \"\"\"Stream the response as an async iterable of Structured LLM Messages.<br>        Args:<br>            debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>                Debouncing is particularly important for long structured responses to reduce the overhead of<br>                performing validation as each token is received.<br>        Returns:<br>            An async iterable of the structured response message and whether that is the last message.<br>        \"\"\"<br>        usage_checking_stream = _get_usage_checking_stream_response(<br>            self._stream_response, self._usage_limits, self.usage<br>        )<br>        with _logfire.span('response stream structured') as lf_span:<br>            # if the message currently has any parts with content, yield before streaming<br>            msg = self._stream_response.get()<br>            for part in msg.parts:<br>                if part.has_content():<br>                    yield msg, False<br>                    break<br>            async with _utils.group_by_temporal(usage_checking_stream, debounce_by) as group_iter:<br>                async for _events in group_iter:<br>                    msg = self._stream_response.get()<br>                    yield msg, False<br>                msg = self._stream_response.get()<br>                yield msg, True<br>                # TODO: Should this now be `final_response` instead of `structured_response`?<br>                lf_span.set_attribute('structured_response', msg)<br>                await self._marked_completed(msg)<br>    async def get_data(self) -> ResultDataT:<br>        \"\"\"Stream the whole response, validate and return it.\"\"\"<br>        usage_checking_stream = _get_usage_checking_stream_response(<br>            self._stream_response, self._usage_limits, self.usage<br>        )<br>        async for _ in usage_checking_stream:<br>            pass<br>        message = self._stream_response.get()<br>        await self._marked_completed(message)<br>        return await self.validate_structured_result(message)<br>    def usage(self) -> Usage:<br>        \"\"\"Return the usage of the whole run.<br>        !!! note<br>            This won't return the full usage until the stream is finished.<br>        \"\"\"<br>        return self._run_ctx.usage + self._stream_response.usage()<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._stream_response.timestamp<br>    async def validate_structured_result(<br>        self, message: _messages.ModelResponse, *, allow_partial: bool = False<br>    ) -> ResultDataT:<br>        \"\"\"Validate a structured result message.\"\"\"<br>        if self._result_schema is not None and self._result_tool_name is not None:<br>            match = self._result_schema.find_named_tool(message.parts, self._result_tool_name)<br>            if match is None:<br>                raise exceptions.UnexpectedModelBehavior(<br>                    f'Invalid response, unable to find tool: {self._result_schema.tool_names()}'<br>                )<br>            call, result_tool = match<br>            result_data = result_tool.validate(call, allow_partial=allow_partial, wrap_validation_errors=False)<br>            for validator in self._result_validators:<br>                result_data = await validator.validate(result_data, call, self._run_ctx)<br>            return result_data<br>        else:<br>            text = '\\n\\n'.join(x.content for x in message.parts if isinstance(x, _messages.TextPart))<br>            for validator in self._result_validators:<br>                text = await validator.validate(<br>                    text,<br>                    None,<br>                    self._run_ctx,<br>                )<br>            # Since there is no result tool, we can assume that str is compatible with ResultDataT<br>            return cast(ResultDataT, text)<br>    async def _validate_text_result(self, text: str) -> str:<br>        for validator in self._result_validators:<br>            text = await validator.validate(<br>                text,<br>                None,<br>                self._run_ctx,<br>            )<br>        return text<br>    async def _marked_completed(self, message: _messages.ModelResponse) -> None:<br>        self.is_complete = True<br>        self._all_messages.append(message)<br>        await self._on_complete()<br>``` |\n\n#### all\\_messages\n\n```\nall_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn the history of \\_messages.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>``` | ```<br>def all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:<br>    \"\"\"Return the history of _messages.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        List of messages.<br>    \"\"\"<br>    # this is a method to be consistent with the other methods<br>    if result_tool_return_content is not None:<br>        raise NotImplementedError('Setting result tool return content is not supported for this result type.')<br>    return self._all_messages<br>``` |\n\n#### all\\_messages\\_json\n\n```\nall_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn all messages from [`all_messages`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.all_messages) as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>``` | ```<br>def all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:<br>    \"\"\"Return all messages from [`all_messages`][pydantic_ai.result._BaseRunResult.all_messages] as JSON bytes.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        JSON bytes representing the messages.<br>    \"\"\"<br>    return _messages.ModelMessagesTypeAdapter.dump_json(<br>        self.all_messages(result_tool_return_content=result_tool_return_content)<br>    )<br>``` |\n\n#### new\\_messages\n\n```\nnew_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn new messages associated with this run.\n\nMessages from older runs are excluded.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>``` | ```<br>def new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:<br>    \"\"\"Return new messages associated with this run.<br>    Messages from older runs are excluded.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        List of new messages.<br>    \"\"\"<br>    return self.all_messages(result_tool_return_content=result_tool_return_content)[self._new_message_index :]<br>``` |\n\n#### new\\_messages\\_json\n\n```\nnew_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn new messages from [`new_messages`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult.new_messages) as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message.<br>This provides a convenient way to modify the content of the result tool call if you want to continue<br>the conversation and want to set the response to the result tool call. If `None`, the last message will<br>not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>``` | ```<br>def new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:<br>    \"\"\"Return new messages from [`new_messages`][pydantic_ai.result._BaseRunResult.new_messages] as JSON bytes.<br>    Args:<br>        result_tool_return_content: The return content of the tool call to set in the last message.<br>            This provides a convenient way to modify the content of the result tool call if you want to continue<br>            the conversation and want to set the response to the result tool call. If `None`, the last message will<br>            not be modified.<br>    Returns:<br>        JSON bytes representing the new messages.<br>    \"\"\"<br>    return _messages.ModelMessagesTypeAdapter.dump_json(<br>        self.new_messages(result_tool_return_content=result_tool_return_content)<br>    )<br>``` |\n\n#### is\\_complete`class-attribute``instance-attribute`\n\n```\nis_complete: bool = field(default=False, init=False)\n\n```\n\nWhether the stream has all been received.\n\nThis is set to `True` when one of\n[`stream`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream),\n[`stream_text`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream_text),\n[`stream_structured`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream_structured) or\n[`get_data`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.get_data) completes.\n\n#### stream`async`\n\n```\nstream(\n    *, debounce_by: float | None = 0.1\n) -> AsyncIterator[ResultDataT]\n\n```\n\nStream the response as an async iterable.\n\nThe pydantic validator for structured data will be called in\n[partial mode](https://docs.pydantic.dev/dev/concepts/experimental/#partial-validation)\non each iteration.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `debounce_by` | `float | None` | by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>Debouncing is particularly important for long structured responses to reduce the overhead of<br>performing validation as each token is received. | `0.1` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[ResultDataT]` | An async iterable of the response data. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>``` | ```<br>async def stream(self, *, debounce_by: float | None = 0.1) -> AsyncIterator[ResultDataT]:<br>    \"\"\"Stream the response as an async iterable.<br>    The pydantic validator for structured data will be called in<br>    [partial mode](https://docs.pydantic.dev/dev/concepts/experimental/#partial-validation)<br>    on each iteration.<br>    Args:<br>        debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>            Debouncing is particularly important for long structured responses to reduce the overhead of<br>            performing validation as each token is received.<br>    Returns:<br>        An async iterable of the response data.<br>    \"\"\"<br>    async for structured_message, is_last in self.stream_structured(debounce_by=debounce_by):<br>        result = await self.validate_structured_result(structured_message, allow_partial=not is_last)<br>        yield result<br>``` |\n\n#### stream\\_text`async`\n\n```\nstream_text(\n    *, delta: bool = False, debounce_by: float | None = 0.1\n) -> AsyncIterator[str]\n\n```\n\nStream the text result as an async iterable.\n\nNote\n\nResult validators will NOT be called on the text result if `delta=True`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `delta` | `bool` | if `True`, yield each chunk of text as it is received, if `False` (default), yield the full text<br>up to the current point. | `False` |\n| `debounce_by` | `float | None` | by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>Debouncing is particularly important for long structured responses to reduce the overhead of<br>performing validation as each token is received. | `0.1` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>``` | ```<br>async def stream_text(self, *, delta: bool = False, debounce_by: float | None = 0.1) -> AsyncIterator[str]:<br>    \"\"\"Stream the text result as an async iterable.<br>    !!! note<br>        Result validators will NOT be called on the text result if `delta=True`.<br>    Args:<br>        delta: if `True`, yield each chunk of text as it is received, if `False` (default), yield the full text<br>            up to the current point.<br>        debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>            Debouncing is particularly important for long structured responses to reduce the overhead of<br>            performing validation as each token is received.<br>    \"\"\"<br>    if self._result_schema and not self._result_schema.allow_text_result:<br>        raise exceptions.UserError('stream_text() can only be used with text responses')<br>    usage_checking_stream = _get_usage_checking_stream_response(<br>        self._stream_response, self._usage_limits, self.usage<br>    )<br>    # Define a \"merged\" version of the iterator that will yield items that have already been retrieved<br>    # and items that we receive while streaming. We define a dedicated async iterator for this so we can<br>    # pass the combined stream to the group_by_temporal function within `_stream_text_deltas` below.<br>    async def _stream_text_deltas_ungrouped() -> AsyncIterator[tuple[str, int]]:<br>        # if the response currently has any parts with content, yield those before streaming<br>        msg = self._stream_response.get()<br>        for i, part in enumerate(msg.parts):<br>            if isinstance(part, _messages.TextPart) and part.content:<br>                yield part.content, i<br>        async for event in usage_checking_stream:<br>            if (<br>                isinstance(event, _messages.PartStartEvent)<br>                and isinstance(event.part, _messages.TextPart)<br>                and event.part.content<br>            ):<br>                yield event.part.content, event.index<br>            elif (<br>                isinstance(event, _messages.PartDeltaEvent)<br>                and isinstance(event.delta, _messages.TextPartDelta)<br>                and event.delta.content_delta<br>            ):<br>                yield event.delta.content_delta, event.index<br>    async def _stream_text_deltas() -> AsyncIterator[str]:<br>        async with _utils.group_by_temporal(_stream_text_deltas_ungrouped(), debounce_by) as group_iter:<br>            async for items in group_iter:<br>                yield ''.join([content for content, _ in items])<br>    with _logfire.span('response stream text') as lf_span:<br>        if delta:<br>            async for text in _stream_text_deltas():<br>                yield text<br>        else:<br>            # a quick benchmark shows it's faster to build up a string with concat when we're<br>            # yielding at each step<br>            deltas: list[str] = []<br>            combined_validated_text = ''<br>            async for text in _stream_text_deltas():<br>                deltas.append(text)<br>                combined_text = ''.join(deltas)<br>                combined_validated_text = await self._validate_text_result(combined_text)<br>                yield combined_validated_text<br>            lf_span.set_attribute('combined_text', combined_validated_text)<br>            await self._marked_completed(<br>                _messages.ModelResponse(<br>                    parts=[_messages.TextPart(combined_validated_text)],<br>                    model_name=self._stream_response.model_name,<br>                )<br>            )<br>``` |\n\n#### stream\\_structured`async`\n\n```\nstream_structured(\n    *, debounce_by: float | None = 0.1\n) -> AsyncIterator[tuple[ModelResponse, bool]]\n\n```\n\nStream the response as an async iterable of Structured LLM Messages.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `debounce_by` | `float | None` | by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>Debouncing is particularly important for long structured responses to reduce the overhead of<br>performing validation as each token is received. | `0.1` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[tuple[ModelResponse, bool]]` | An async iterable of the structured response message and whether that is the last message. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>``` | ```<br>async def stream_structured(<br>    self, *, debounce_by: float | None = 0.1<br>) -> AsyncIterator[tuple[_messages.ModelResponse, bool]]:<br>    \"\"\"Stream the response as an async iterable of Structured LLM Messages.<br>    Args:<br>        debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.<br>            Debouncing is particularly important for long structured responses to reduce the overhead of<br>            performing validation as each token is received.<br>    Returns:<br>        An async iterable of the structured response message and whether that is the last message.<br>    \"\"\"<br>    usage_checking_stream = _get_usage_checking_stream_response(<br>        self._stream_response, self._usage_limits, self.usage<br>    )<br>    with _logfire.span('response stream structured') as lf_span:<br>        # if the message currently has any parts with content, yield before streaming<br>        msg = self._stream_response.get()<br>        for part in msg.parts:<br>            if part.has_content():<br>                yield msg, False<br>                break<br>        async with _utils.group_by_temporal(usage_checking_stream, debounce_by) as group_iter:<br>            async for _events in group_iter:<br>                msg = self._stream_response.get()<br>                yield msg, False<br>            msg = self._stream_response.get()<br>            yield msg, True<br>            # TODO: Should this now be `final_response` instead of `structured_response`?<br>            lf_span.set_attribute('structured_response', msg)<br>            await self._marked_completed(msg)<br>``` |\n\n#### get\\_data`async`\n\n```\nget_data() -> ResultDataT\n\n```\n\nStream the whole response, validate and return it.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>``` | ```<br>async def get_data(self) -> ResultDataT:<br>    \"\"\"Stream the whole response, validate and return it.\"\"\"<br>    usage_checking_stream = _get_usage_checking_stream_response(<br>        self._stream_response, self._usage_limits, self.usage<br>    )<br>    async for _ in usage_checking_stream:<br>        pass<br>    message = self._stream_response.get()<br>    await self._marked_completed(message)<br>    return await self.validate_structured_result(message)<br>``` |\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nReturn the usage of the whole run.\n\nNote\n\nThis won't return the full usage until the stream is finished.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>``` | ```<br>def usage(self) -> Usage:<br>    \"\"\"Return the usage of the whole run.<br>    !!! note<br>        This won't return the full usage until the stream is finished.<br>    \"\"\"<br>    return self._run_ctx.usage + self._stream_response.usage()<br>``` |\n\n#### timestamp\n\n```\ntimestamp() -> datetime\n\n```\n\nGet the timestamp of the response.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>348<br>349<br>350<br>``` | ```<br>def timestamp(self) -> datetime:<br>    \"\"\"Get the timestamp of the response.\"\"\"<br>    return self._stream_response.timestamp<br>``` |\n\n#### validate\\_structured\\_result`async`\n\n```\nvalidate_structured_result(\n    message: ModelResponse, *, allow_partial: bool = False\n) -> ResultDataT\n\n```\n\nValidate a structured result message.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n\n|     |     |\n| --- | --- |\n| ```<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>``` | ```<br>async def validate_structured_result(<br>    self, message: _messages.ModelResponse, *, allow_partial: bool = False<br>) -> ResultDataT:<br>    \"\"\"Validate a structured result message.\"\"\"<br>    if self._result_schema is not None and self._result_tool_name is not None:<br>        match = self._result_schema.find_named_tool(message.parts, self._result_tool_name)<br>        if match is None:<br>            raise exceptions.UnexpectedModelBehavior(<br>                f'Invalid response, unable to find tool: {self._result_schema.tool_names()}'<br>            )<br>        call, result_tool = match<br>        result_data = result_tool.validate(call, allow_partial=allow_partial, wrap_validation_errors=False)<br>        for validator in self._result_validators:<br>            result_data = await validator.validate(result_data, call, self._run_ctx)<br>        return result_data<br>    else:<br>        text = '\\n\\n'.join(x.content for x in message.parts if isinstance(x, _messages.TextPart))<br>        for validator in self._result_validators:<br>            text = await validator.validate(<br>                text,<br>                None,<br>                self._run_ctx,<br>            )<br>        # Since there is no result tool, we can assume that str is compatible with ResultDataT<br>        return cast(ResultDataT, text)<br>``` |",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/result/",
      "ogUrl": "https://ai.pydantic.dev/api/result/",
      "title": "pydantic_ai.result - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/result/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/result.png",
      "ogTitle": "pydantic_ai.result - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/result.png",
      "og:title": "pydantic_ai.result - PydanticAI",
      "scrapeId": "70e5a27e-7248-4f5f-914d-9623d68737a0",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/result/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/result.png",
      "twitter:title": "pydantic_ai.result - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/#examples)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Examples\n\nExamples of how to use PydanticAI and what it can do.\n\n## Usage\n\nThese examples are distributed with `pydantic-ai` so you can run them either by cloning the [pydantic-ai repo](https://github.com/pydantic/pydantic-ai) or by simply installing `pydantic-ai` from PyPI with `pip` or `uv`.\n\n### Installing required dependencies\n\nEither way you'll need to install extra dependencies to run some examples, you just need to install the `examples` optional dependency group.\n\nIf you've installed `pydantic-ai` via pip/uv, you can install the extra dependencies with:\n\n[pip](https://ai.pydantic.dev/examples/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/#__tabbed_1_2)\n\n```\npip install 'pydantic-ai[examples]'\n\n```\n\n```\nuv add 'pydantic-ai[examples]'\n\n```\n\nIf you clone the repo, you should instead use `uv sync --extra examples` to install extra dependencies.\n\n### Setting model environment variables\n\nThese examples will need you to set up authentication with one or more of the LLMs, see the [model configuration](https://ai.pydantic.dev/models/) docs for details on how to do this.\n\nTL;DR: in most cases you'll need to set one of the following environment variables:\n\n[OpenAI](https://ai.pydantic.dev/examples/#__tabbed_2_1)[Google Gemini](https://ai.pydantic.dev/examples/#__tabbed_2_2)\n\n```\nexport OPENAI_API_KEY=your-api-key\n\n```\n\n```\nexport GEMINI_API_KEY=your-api-key\n\n```\n\n### Running Examples\n\nTo run the examples (this will work whether you installed `pydantic_ai`, or cloned the repo), run:\n\n[pip](https://ai.pydantic.dev/examples/#__tabbed_3_1)[uv](https://ai.pydantic.dev/examples/#__tabbed_3_2)\n\n```\npython -m pydantic_ai_examples.<example_module_name>\n\n```\n\n```\nuv run -m pydantic_ai_examples.<example_module_name>\n\n```\n\nFor examples, to run the very simple [`pydantic_model`](https://ai.pydantic.dev/examples/pydantic-model/) example:\n\n[pip](https://ai.pydantic.dev/examples/#__tabbed_4_1)[uv](https://ai.pydantic.dev/examples/#__tabbed_4_2)\n\n```\npython -m pydantic_ai_examples.pydantic_model\n\n```\n\n```\nuv run -m pydantic_ai_examples.pydantic_model\n\n```\n\nIf you like one-liners and you're using uv, you can run a pydantic-ai example with zero setup:\n\n```\nOPENAI_API_KEY='your-api-key' \\\n  uv run --with 'pydantic-ai[examples]' \\\n  -m pydantic_ai_examples.pydantic_model\n\n```\n\n* * *\n\nYou'll probably want to edit examples in addition to just running them. You can copy the examples to a new directory with:\n\n[pip](https://ai.pydantic.dev/examples/#__tabbed_5_1)[uv](https://ai.pydantic.dev/examples/#__tabbed_5_2)\n\n```\npython -m pydantic_ai_examples --copy-to examples/\n\n```\n\n```\nuv run -m pydantic_ai_examples --copy-to examples/\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/",
      "ogUrl": "https://ai.pydantic.dev/examples/",
      "title": "Examples - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/index.png",
      "ogTitle": "Examples - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/index.png",
      "og:title": "Examples - PydanticAI",
      "scrapeId": "7bb77683-9840-4ee2-a023-0a12b8ec22bf",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/index.png",
      "twitter:title": "Examples - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/testing-evals/#testing-and-evals)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Testing and Evals\n\nWith PydanticAI and LLM integrations in general, there are two distinct kinds of test:\n\n1. **Unit tests** — tests of your application code, and whether it's behaving correctly\n2. **Evals** — tests of the LLM, and how good or bad its responses are\n\nFor the most part, these two kinds of tests have pretty separate goals and considerations.\n\n## Unit tests\n\nUnit tests for PydanticAI code are just like unit tests for any other Python code.\n\nBecause for the most part they're nothing new, we have pretty well established tools and patterns for writing and running these kinds of tests.\n\nUnless you're really sure you know better, you'll probably want to follow roughly this strategy:\n\n- Use [`pytest`](https://docs.pytest.org/en/stable/) as your test harness\n- If you find yourself typing out long assertions, use [inline-snapshot](https://15r10nk.github.io/inline-snapshot/latest/)\n- Similarly, [dirty-equals](https://dirty-equals.helpmanual.io/latest/) can be useful for comparing large data structures\n- Use [`TestModel`](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel) or [`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) in place of your actual model to avoid the usage, latency and variability of real LLM calls\n- Use [`Agent.override`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.override) to replace your model inside your application logic\n- Set [`ALLOW_MODEL_REQUESTS=False`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.ALLOW_MODEL_REQUESTS) globally to block any requests from being made to non-test models accidentally\n\n### Unit testing with `TestModel`\n\nThe simplest and fastest way to exercise most of your application code is using [`TestModel`](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel), this will (by default) call all tools in the agent, then return either plain text or a structured response depending on the return type of the agent.\n\n`TestModel` is not magic\n\nThe \"clever\" (but not too clever) part of `TestModel` is that it will attempt to generate valid structured data for [function tools](https://ai.pydantic.dev/tools/) and [result types](https://ai.pydantic.dev/results/#structured-result-validation) based on the schema of the registered tools.\n\nThere's no ML or AI in `TestModel`, it's just plain old procedural Python code that tries to generate data that satisfies the JSON schema of a tool.\n\nThe resulting data won't look pretty or relevant, but it should pass Pydantic's validation in most cases.\nIf you want something more sophisticated, use [`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) and write your own data generation logic.\n\nLet's write unit tests for the following application code:\n\nweather\\_app.py\n\n```\nimport asyncio\nfrom datetime import date\n\nfrom pydantic_ai import Agent, RunContext\n\nfrom fake_database import DatabaseConn\nfrom weather_service import WeatherService\n\nweather_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=WeatherService,\n    system_prompt='Providing a weather forecast at the locations the user provides.',\n)\n\n@weather_agent.tool\ndef weather_forecast(\n    ctx: RunContext[WeatherService], location: str, forecast_date: date\n) -> str:\n    if forecast_date < date.today():\n        return ctx.deps.get_historic_weather(location, forecast_date)\n    else:\n        return ctx.deps.get_forecast(location, forecast_date)\n\nasync def run_weather_forecast(\n    user_prompts: list[tuple[str, int]], conn: DatabaseConn\n):\n    \"\"\"Run weather forecast for a list of user prompts and save.\"\"\"\n    async with WeatherService() as weather_service:\n\n        async def run_forecast(prompt: str, user_id: int):\n            result = await weather_agent.run(prompt, deps=weather_service)\n            await conn.store_forecast(user_id, result.data)\n\n        # run all prompts in parallel\n        await asyncio.gather(\n            *(run_forecast(prompt, user_id) for (prompt, user_id) in user_prompts)\n        )\n\n```\n\nHere we have a function that takes a list of `(user_prompt, user_id)` tuples, gets a weather forecast for each prompt, and stores the result in the database.\n\n**We want to test this code without having to mock certain objects or modify our code so we can pass test objects in.**\n\nHere's how we would write tests using [`TestModel`](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel):\n\ntest\\_weather\\_app.py\n\n```\nfrom datetime import timezone\nimport pytest\n\nfrom dirty_equals import IsNow\n\nfrom pydantic_ai import models, capture_run_messages\nfrom pydantic_ai.models.test import TestModel\nfrom pydantic_ai.messages import (\n    ModelResponse,\n    SystemPromptPart,\n    TextPart,\n    ToolCallPart,\n    ToolReturnPart,\n    UserPromptPart,\n    ModelRequest,\n)\n\nfrom fake_database import DatabaseConn\nfrom weather_app import run_weather_forecast, weather_agent\n\npytestmark = pytest.mark.anyio\nmodels.ALLOW_MODEL_REQUESTS = False\n\nasync def test_forecast():\n    conn = DatabaseConn()\n    user_id = 1\n    with capture_run_messages() as messages:\n        with weather_agent.override(model=TestModel()):\n            prompt = 'What will the weather be like in London on 2024-11-28?'\n            await run_weather_forecast([(prompt, user_id)], conn)\n\n    forecast = await conn.get_forecast(user_id)\n    assert forecast == '{\"weather_forecast\":\"Sunny with a chance of rain\"}'\n\n    assert messages == [\\\n        ModelRequest(\\\n            parts=[\\\n                SystemPromptPart(\\\n                    content='Providing a weather forecast at the locations the user provides.',\\\n                ),\\\n                UserPromptPart(\\\n                    content='What will the weather be like in London on 2024-11-28?',\\\n                    timestamp=IsNow(tz=timezone.utc),\\\n                ),\\\n            ]\\\n        ),\\\n        ModelResponse(\\\n            parts=[\\\n                ToolCallPart(\\\n                    tool_name='weather_forecast',\\\n                    args={\\\n                        'location': 'a',\\\n                        'forecast_date': '2024-01-01',\\\n                    },\\\n                    tool_call_id=None,\\\n                )\\\n            ],\\\n            model_name='test',\\\n            timestamp=IsNow(tz=timezone.utc),\\\n        ),\\\n        ModelRequest(\\\n            parts=[\\\n                ToolReturnPart(\\\n                    tool_name='weather_forecast',\\\n                    content='Sunny with a chance of rain',\\\n                    tool_call_id=None,\\\n                    timestamp=IsNow(tz=timezone.utc),\\\n                ),\\\n            ],\\\n        ),\\\n        ModelResponse(\\\n            parts=[\\\n                TextPart(\\\n                    content='{\"weather_forecast\":\"Sunny with a chance of rain\"}',\\\n                )\\\n            ],\\\n            model_name='test',\\\n            timestamp=IsNow(tz=timezone.utc),\\\n        ),\\\n    ]\n\n```\n\n### Unit testing with `FunctionModel`\n\nThe above tests are a great start, but careful readers will notice that the `WeatherService.get_forecast` is never called since `TestModel` calls `weather_forecast` with a date in the past.\n\nTo fully exercise `weather_forecast`, we need to use [`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) to customise how the tools is called.\n\nHere's an example of using `FunctionModel` to test the `weather_forecast` tool with custom inputs\n\ntest\\_weather\\_app2.py\n\n```\nimport re\n\nimport pytest\n\nfrom pydantic_ai import models\nfrom pydantic_ai.messages import (\n    ModelMessage,\n    ModelResponse,\n    TextPart,\n    ToolCallPart,\n)\nfrom pydantic_ai.models.function import AgentInfo, FunctionModel\n\nfrom fake_database import DatabaseConn\nfrom weather_app import run_weather_forecast, weather_agent\n\npytestmark = pytest.mark.anyio\nmodels.ALLOW_MODEL_REQUESTS = False\n\ndef call_weather_forecast(\n    messages: list[ModelMessage], info: AgentInfo\n) -> ModelResponse:\n    if len(messages) == 1:\n        # first call, call the weather forecast tool\n        user_prompt = messages[0].parts[-1]\n        m = re.search(r'\\d{4}-\\d{2}-\\d{2}', user_prompt.content)\n        assert m is not None\n        args = {'location': 'London', 'forecast_date': m.group()}\n        return ModelResponse(parts=[ToolCallPart('weather_forecast', args)])\n    else:\n        # second call, return the forecast\n        msg = messages[-1].parts[0]\n        assert msg.part_kind == 'tool-return'\n        return ModelResponse(parts=[TextPart(f'The forecast is: {msg.content}')])\n\nasync def test_forecast_future():\n    conn = DatabaseConn()\n    user_id = 1\n    with weather_agent.override(model=FunctionModel(call_weather_forecast)):\n        prompt = 'What will the weather be like in London on 2032-01-01?'\n        await run_weather_forecast([(prompt, user_id)], conn)\n\n    forecast = await conn.get_forecast(user_id)\n    assert forecast == 'The forecast is: Rainy with a chance of sun'\n\n```\n\n### Overriding model via pytest fixtures\n\nIf you're writing lots of tests that all require model to be overridden, you can use [pytest fixtures](https://docs.pytest.org/en/6.2.x/fixture.html) to override the model with [`TestModel`](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel) or [`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) in a reusable way.\n\nHere's an example of a fixture that overrides the model with `TestModel`:\n\ntests.py\n\n```\nimport pytest\nfrom weather_app import weather_agent\n\nfrom pydantic_ai.models.test import TestModel\n\n@pytest.fixture\ndef override_weather_agent():\n    with weather_agent.override(model=TestModel()):\n        yield\n\nasync def test_forecast(override_weather_agent: None):\n    ...\n    # test code here\n\n```\n\n## Evals\n\n\"Evals\" refers to evaluating a models performance for a specific application.\n\nWarning\n\nUnlike unit tests, evals are an emerging art/science; anyone who claims to know for sure exactly how your evals should be defined can safely be ignored.\n\nEvals are generally more like benchmarks than unit tests, they never \"pass\" although they do \"fail\"; you care mostly about how they change over time.\n\nSince evals need to be run against the real model, then can be slow and expensive to run, you generally won't want to run them in CI for every commit.\n\n### Measuring performance\n\nThe hardest part of evals is measuring how well the model has performed.\n\nIn some cases (e.g. an agent to generate SQL) there are simple, easy to run tests that can be used to measure performance (e.g. is the SQL valid? Does it return the right results? Does it return just the right results?).\n\nIn other cases (e.g. an agent that gives advice on quitting smoking) it can be very hard or impossible to make quantitative measures of performance — in the smoking case you'd really need to run a double-blind trial over months, then wait 40 years and observe health outcomes to know if changes to your prompt were an improvement.\n\nThere are a few different strategies you can use to measure performance:\n\n- **End to end, self-contained tests** — like the SQL example, we can test the final result of the agent near-instantly\n- **Synthetic self-contained tests** — writing unit test style checks that the output is as expected, checks like `'chewing gum' in response`, while these checks might seem simplistic they can be helpful, one nice characteristic is that it's easy to tell what's wrong when they fail\n- **LLMs evaluating LLMs** — using another models, or even the same model with a different prompt to evaluate the performance of the agent (like when the class marks each other's homework because the teacher has a hangover), while the downsides and complexities of this approach are obvious, some think it can be a useful tool in the right circumstances\n- **Evals in prod** — measuring the end results of the agent in production, then creating a quantitative measure of performance, so you can easily measure changes over time as you change the prompt or model used, [logfire](https://ai.pydantic.dev/logfire/) can be extremely useful in this case since you can write a custom query to measure the performance of your agent\n\n### System prompt customization\n\nThe system prompt is the developer's primary tool in controlling an agent's behavior, so it's often useful to be able to customise the system prompt and see how performance changes. This is particularly relevant when the system prompt contains a list of examples and you want to understand how changing that list affects the model's performance.\n\nLet's assume we have the following app for running SQL generated from a user prompt (this examples omits a lot of details for brevity, see the [SQL gen](https://ai.pydantic.dev/examples/sql-gen/) example for a more complete code):\n\nsql\\_app.py\n\n```\nimport json\nfrom pathlib import Path\nfrom typing import Union\n\nfrom pydantic_ai import Agent, RunContext\n\nfrom fake_database import DatabaseConn\n\nclass SqlSystemPrompt:\n    def __init__(\n        self, examples: Union[list[dict[str, str]], None] = None, db: str = 'PostgreSQL'\n    ):\n        if examples is None:\n            # if examples aren't provided, load them from file, this is the default\n            with Path('examples.json').open('rb') as f:\n                self.examples = json.load(f)\n        else:\n            self.examples = examples\n\n        self.db = db\n\n    def build_prompt(self) -> str:\n        return f\"\"\"\\\nGiven the following {self.db} table of records, your job is to\nwrite a SQL query that suits the user's request.\n\nDatabase schema:\nCREATE TABLE records (\n  ...\n);\n\n{''.join(self.format_example(example) for example in self.examples)}\n\"\"\"\n\n    @staticmethod\n    def format_example(example: dict[str, str]) -> str:\n        return f\"\"\"\\\n<example>\n  <request>{example['request']}</request>\n  <sql>{example['sql']}</sql>\n</example>\n\"\"\"\n\nsql_agent = Agent(\n    'google-gla:gemini-1.5-flash',\n    deps_type=SqlSystemPrompt,\n)\n\n@sql_agent.system_prompt\nasync def system_prompt(ctx: RunContext[SqlSystemPrompt]) -> str:\n    return ctx.deps.build_prompt()\n\nasync def user_search(user_prompt: str) -> list[dict[str, str]]:\n    \"\"\"Search the database based on the user's prompts.\"\"\"\n    ...\n    result = await sql_agent.run(user_prompt, deps=SqlSystemPrompt())\n    conn = DatabaseConn()\n    return await conn.execute(result.data)\n\n```\n\n`examples.json` looks something like this:\n\n```\nrequest: show me error records with the tag \"foobar\"\nresponse: SELECT * FROM records WHERE level = 'error' and 'foobar' = ANY(tags)\n\n```\n\nexamples.json\n\n```\n{\n  \"examples\": [\\\n    {\\\n      \"request\": \"Show me all records\",\\\n      \"sql\": \"SELECT * FROM records;\"\\\n    },\\\n    {\\\n      \"request\": \"Show me all records from 2021\",\\\n      \"sql\": \"SELECT * FROM records WHERE date_trunc('year', date) = '2021-01-01';\"\\\n    },\\\n    {\\\n      \"request\": \"show me error records with the tag 'foobar'\",\\\n      \"sql\": \"SELECT * FROM records WHERE level = 'error' and 'foobar' = ANY(tags);\"\\\n    },\\\n    ...\\\n  ]\n}\n\n```\n\nNow we want a way to quantify the success of the SQL generation so we can judge how changes to the agent affect its performance.\n\nWe can use [`Agent.override`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.override) to replace the system prompt with a custom one that uses a subset of examples, and then run the application code (in this case `user_search`). We also run the actual SQL from the examples and compare the \"correct\" result from the example SQL to the SQL generated by the agent. (We compare the results of running the SQL rather than the SQL itself since the SQL might be semantically equivalent but written in a different way).\n\nTo get a quantitative measure of performance, we assign points to each run as follows:\n\n- **-100** points if the generated SQL is invalid\n- **-1** point for each row returned by the agent (so returning lots of results is discouraged)\n- **+5** points for each row returned by the agent that matches the expected result\n\nWe use 5-fold cross-validation to judge the performance of the agent using our existing set of examples.\n\nsql\\_app\\_evals.py\n\n```\nimport json\nimport statistics\nfrom pathlib import Path\nfrom itertools import chain\n\nfrom fake_database import DatabaseConn, QueryError\nfrom sql_app import sql_agent, SqlSystemPrompt, user_search\n\nasync def main():\n    with Path('examples.json').open('rb') as f:\n        examples = json.load(f)\n\n    # split examples into 5 folds\n    fold_size = len(examples) // 5\n    folds = [examples[i : i + fold_size] for i in range(0, len(examples), fold_size)]\n    conn = DatabaseConn()\n    scores = []\n\n    for i, fold in enumerate(folds):\n        fold_score = 0\n        # build all other folds into a list of examples\n        other_folds = list(chain(*(f for j, f in enumerate(folds) if j != i)))\n        # create a new system prompt with the other fold examples\n        system_prompt = SqlSystemPrompt(examples=other_folds)\n\n        # override the system prompt with the new one\n        with sql_agent.override(deps=system_prompt):\n            for case in fold:\n                try:\n                    agent_results = await user_search(case['request'])\n                except QueryError as e:\n                    print(f'Fold {i} {case}: {e}')\n                    fold_score -= 100\n                else:\n                    # get the expected results using the SQL from this case\n                    expected_results = await conn.execute(case['sql'])\n\n                agent_ids = [r['id'] for r in agent_results]\n                # each returned value has a score of -1\n                fold_score -= len(agent_ids)\n                expected_ids = {r['id'] for r in expected_results}\n\n                # each return value that matches the expected value has a score of 3\n                fold_score += 5 * len(set(agent_ids) & expected_ids)\n\n        scores.append(fold_score)\n\n    overall_score = statistics.mean(scores)\n    print(f'Overall score: {overall_score:0.2f}')\n    #> Overall score: 12.00\n\n```\n\nWe can then change the prompt, the model, or the examples and see how the score changes over time.",
    "metadata": {
      "url": "https://ai.pydantic.dev/testing-evals/",
      "ogUrl": "https://ai.pydantic.dev/testing-evals/",
      "title": "Testing and Evals - PydanticAI",
      "og:url": "https://ai.pydantic.dev/testing-evals/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/testing-evals.png",
      "ogTitle": "Testing and Evals - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/testing-evals.png",
      "og:title": "Testing and Evals - PydanticAI",
      "scrapeId": "7d220955-4a0e-4fbe-a31f-729fcafcf8b6",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/testing-evals/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/testing-evals.png",
      "twitter:title": "Testing and Evals - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_graph`\n\n### Graph`dataclass`\n\nBases: `Generic[StateT, DepsT, RunEndT]`\n\nDefinition of a graph.\n\nIn `pydantic-graph`, a graph is a collection of nodes that can be run in sequence. The nodes define\ntheir outgoing edges — e.g. which nodes may be run next, and thereby the structure of the graph.\n\nHere's a very simple example of a graph which increments a number by 1, but makes sure the number is never\n42 at the end.\n\nnever\\_42.py\n\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n@dataclass\nclass MyState:\n    number: int\n\n@dataclass\nclass Increment(BaseNode[MyState]):\n    async def run(self, ctx: GraphRunContext) -> Check42:\n        ctx.state.number += 1\n        return Check42()\n\n@dataclass\nclass Check42(BaseNode[MyState, None, int]):\n    async def run(self, ctx: GraphRunContext) -> Increment | End[int]:\n        if ctx.state.number == 42:\n            return Increment()\n        else:\n            return End(ctx.state.number)\n\nnever_42_graph = Graph(nodes=(Increment, Check42))\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nSee [`run`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.run) For an example of running graph, and\n[`mermaid_code`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.mermaid_code) for an example of generating a mermaid diagram\nfrom the graph.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 41<br> 42<br> 43<br> 44<br> 45<br> 46<br> 47<br> 48<br> 49<br> 50<br> 51<br> 52<br> 53<br> 54<br> 55<br> 56<br> 57<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>444<br>445<br>446<br>447<br>448<br>449<br>450<br>451<br>452<br>453<br>454<br>455<br>456<br>457<br>458<br>459<br>460<br>461<br>462<br>463<br>464<br>465<br>466<br>467<br>468<br>469<br>470<br>471<br>472<br>473<br>474<br>475<br>476<br>477<br>478<br>479<br>480<br>481<br>482<br>483<br>484<br>485<br>486<br>487<br>488<br>489<br>490<br>491<br>492<br>493<br>494<br>495<br>496<br>497<br>498<br>499<br>500<br>501<br>502<br>503<br>504<br>505<br>506<br>507<br>508<br>509<br>510<br>511<br>512<br>``` | ````<br>@dataclass(init=False)<br>class Graph(Generic[StateT, DepsT, RunEndT]):<br>    \"\"\"Definition of a graph.<br>    In `pydantic-graph`, a graph is a collection of nodes that can be run in sequence. The nodes define<br>    their outgoing edges — e.g. which nodes may be run next, and thereby the structure of the graph.<br>    Here's a very simple example of a graph which increments a number by 1, but makes sure the number is never<br>    42 at the end.<br>    ```py {title=\"never_42.py\" noqa=\"I001\" py=\"3.10\"}<br>    from __future__ import annotations<br>    from dataclasses import dataclass<br>    from pydantic_graph import BaseNode, End, Graph, GraphRunContext<br>    @dataclass<br>    class MyState:<br>        number: int<br>    @dataclass<br>    class Increment(BaseNode[MyState]):<br>        async def run(self, ctx: GraphRunContext) -> Check42:<br>            ctx.state.number += 1<br>            return Check42()<br>    @dataclass<br>    class Check42(BaseNode[MyState, None, int]):<br>        async def run(self, ctx: GraphRunContext) -> Increment | End[int]:<br>            if ctx.state.number == 42:<br>                return Increment()<br>            else:<br>                return End(ctx.state.number)<br>    never_42_graph = Graph(nodes=(Increment, Check42))<br>    ```<br>    _(This example is complete, it can be run \"as is\")_<br>    See [`run`][pydantic_graph.graph.Graph.run] For an example of running graph, and<br>    [`mermaid_code`][pydantic_graph.graph.Graph.mermaid_code] for an example of generating a mermaid diagram<br>    from the graph.<br>    \"\"\"<br>    name: str | None<br>    node_defs: dict[str, NodeDef[StateT, DepsT, RunEndT]]<br>    snapshot_state: Callable[[StateT], StateT]<br>    _state_type: type[StateT] | _utils.Unset = field(repr=False)<br>    _run_end_type: type[RunEndT] | _utils.Unset = field(repr=False)<br>    _auto_instrument: bool = field(repr=False)<br>    def __init__(<br>        self,<br>        *,<br>        nodes: Sequence[type[BaseNode[StateT, DepsT, RunEndT]]],<br>        name: str | None = None,<br>        state_type: type[StateT] | _utils.Unset = _utils.UNSET,<br>        run_end_type: type[RunEndT] | _utils.Unset = _utils.UNSET,<br>        snapshot_state: Callable[[StateT], StateT] = deep_copy_state,<br>        auto_instrument: bool = True,<br>    ):<br>        \"\"\"Create a graph from a sequence of nodes.<br>        Args:<br>            nodes: The nodes which make up the graph, nodes need to be unique and all be generic in the same<br>                state type.<br>            name: Optional name for the graph, if not provided the name will be inferred from the calling frame<br>                on the first call to a graph method.<br>            state_type: The type of the state for the graph, this can generally be inferred from `nodes`.<br>            run_end_type: The type of the result of running the graph, this can generally be inferred from `nodes`.<br>            snapshot_state: A function to snapshot the state of the graph, this is used in<br>                [`NodeStep`][pydantic_graph.state.NodeStep] and [`EndStep`][pydantic_graph.state.EndStep] to record<br>                the state before each step.<br>            auto_instrument: Whether to create a span for the graph run and the execution of each node's run method.<br>        \"\"\"<br>        self.name = name<br>        self._state_type = state_type<br>        self._run_end_type = run_end_type<br>        self._auto_instrument = auto_instrument<br>        self.snapshot_state = snapshot_state<br>        parent_namespace = _utils.get_parent_namespace(inspect.currentframe())<br>        self.node_defs: dict[str, NodeDef[StateT, DepsT, RunEndT]] = {}<br>        for node in nodes:<br>            self._register_node(node, parent_namespace)<br>        self._validate_edges()<br>    async def run(<br>        self: Graph[StateT, DepsT, T],<br>        start_node: BaseNode[StateT, DepsT, T],<br>        *,<br>        state: StateT = None,<br>        deps: DepsT = None,<br>        infer_name: bool = True,<br>    ) -> tuple[T, list[HistoryStep[StateT, T]]]:<br>        \"\"\"Run the graph from a starting node until it ends.<br>        Args:<br>            start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,<br>                you need to provide the starting node.<br>            state: The initial state of the graph.<br>            deps: The dependencies of the graph.<br>            infer_name: Whether to infer the graph name from the calling frame.<br>        Returns:<br>            The result type from ending the run and the history of the run.<br>        Here's an example of running the graph from [above][pydantic_graph.graph.Graph]:<br>        ```py {title=\"run_never_42.py\" noqa=\"I001\" py=\"3.10\"}<br>        from never_42 import Increment, MyState, never_42_graph<br>        async def main():<br>            state = MyState(1)<br>            _, history = await never_42_graph.run(Increment(), state=state)<br>            print(state)<br>            #> MyState(number=2)<br>            print(len(history))<br>            #> 3<br>            state = MyState(41)<br>            _, history = await never_42_graph.run(Increment(), state=state)<br>            print(state)<br>            #> MyState(number=43)<br>            print(len(history))<br>            #> 5<br>        ```<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        history: list[HistoryStep[StateT, T]] = []<br>        with ExitStack() as stack:<br>            run_span: logfire_api.LogfireSpan | None = None<br>            if self._auto_instrument:<br>                run_span = stack.enter_context(<br>                    _logfire.span(<br>                        '{graph_name} run {start=}',<br>                        graph_name=self.name or 'graph',<br>                        start=start_node,<br>                    )<br>                )<br>            next_node = start_node<br>            while True:<br>                next_node = await self.next(next_node, history, state=state, deps=deps, infer_name=False)<br>                if isinstance(next_node, End):<br>                    history.append(EndStep(result=next_node))<br>                    if run_span is not None:<br>                        run_span.set_attribute('history', history)<br>                    return next_node.data, history<br>                elif not isinstance(next_node, BaseNode):<br>                    if TYPE_CHECKING:<br>                        typing_extensions.assert_never(next_node)<br>                    else:<br>                        raise exceptions.GraphRuntimeError(<br>                            f'Invalid node return type: `{type(next_node).__name__}`. Expected `BaseNode` or `End`.'<br>                        )<br>    def run_sync(<br>        self: Graph[StateT, DepsT, T],<br>        start_node: BaseNode[StateT, DepsT, T],<br>        *,<br>        state: StateT = None,<br>        deps: DepsT = None,<br>        infer_name: bool = True,<br>    ) -> tuple[T, list[HistoryStep[StateT, T]]]:<br>        \"\"\"Run the graph synchronously.<br>        This is a convenience method that wraps [`self.run`][pydantic_graph.Graph.run] with `loop.run_until_complete(...)`.<br>        You therefore can't use this method inside async code or if there's an active event loop.<br>        Args:<br>            start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,<br>                you need to provide the starting node.<br>            state: The initial state of the graph.<br>            deps: The dependencies of the graph.<br>            infer_name: Whether to infer the graph name from the calling frame.<br>        Returns:<br>            The result type from ending the run and the history of the run.<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        return asyncio.get_event_loop().run_until_complete(<br>            self.run(start_node, state=state, deps=deps, infer_name=False)<br>        )<br>    async def next(<br>        self: Graph[StateT, DepsT, T],<br>        node: BaseNode[StateT, DepsT, T],<br>        history: list[HistoryStep[StateT, T]],<br>        *,<br>        state: StateT = None,<br>        deps: DepsT = None,<br>        infer_name: bool = True,<br>    ) -> BaseNode[StateT, DepsT, Any] | End[T]:<br>        \"\"\"Run a node in the graph and return the next node to run.<br>        Args:<br>            node: The node to run.<br>            history: The history of the graph run so far. NOTE: this will be mutated to add the new step.<br>            state: The current state of the graph.<br>            deps: The dependencies of the graph.<br>            infer_name: Whether to infer the graph name from the calling frame.<br>        Returns:<br>            The next node to run or [`End`][pydantic_graph.nodes.End] if the graph has finished.<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        node_id = node.get_id()<br>        if node_id not in self.node_defs:<br>            raise exceptions.GraphRuntimeError(f'Node `{node}` is not in the graph.')<br>        with ExitStack() as stack:<br>            if self._auto_instrument:<br>                stack.enter_context(_logfire.span('run node {node_id}', node_id=node_id, node=node))<br>            ctx = GraphRunContext(state, deps)<br>            start_ts = _utils.now_utc()<br>            start = perf_counter()<br>            next_node = await node.run(ctx)<br>            duration = perf_counter() - start<br>        history.append(<br>            NodeStep(state=state, node=node, start_ts=start_ts, duration=duration, snapshot_state=self.snapshot_state)<br>        )<br>        return next_node<br>    def dump_history(<br>        self: Graph[StateT, DepsT, T], history: list[HistoryStep[StateT, T]], *, indent: int | None = None<br>    ) -> bytes:<br>        \"\"\"Dump the history of a graph run as JSON.<br>        Args:<br>            history: The history of the graph run.<br>            indent: The number of spaces to indent the JSON.<br>        Returns:<br>            The JSON representation of the history.<br>        \"\"\"<br>        return self.history_type_adapter.dump_json(history, indent=indent)<br>    def load_history(self, json_bytes: str | bytes | bytearray) -> list[HistoryStep[StateT, RunEndT]]:<br>        \"\"\"Load the history of a graph run from JSON.<br>        Args:<br>            json_bytes: The JSON representation of the history.<br>        Returns:<br>            The history of the graph run.<br>        \"\"\"<br>        return self.history_type_adapter.validate_json(json_bytes)<br>    @cached_property<br>    def history_type_adapter(self) -> pydantic.TypeAdapter[list[HistoryStep[StateT, RunEndT]]]:<br>        nodes = [node_def.node for node_def in self.node_defs.values()]<br>        state_t = self._get_state_type()<br>        end_t = self._get_run_end_type()<br>        token = nodes_schema_var.set(nodes)<br>        try:<br>            ta = pydantic.TypeAdapter(list[Annotated[HistoryStep[state_t, end_t], pydantic.Discriminator('kind')]])<br>        finally:<br>            nodes_schema_var.reset(token)<br>        return ta<br>    def mermaid_code(<br>        self,<br>        *,<br>        start_node: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,<br>        title: str | None | typing_extensions.Literal[False] = None,<br>        edge_labels: bool = True,<br>        notes: bool = True,<br>        highlighted_nodes: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,<br>        highlight_css: str = mermaid.DEFAULT_HIGHLIGHT_CSS,<br>        infer_name: bool = True,<br>        direction: mermaid.StateDiagramDirection | None = None,<br>    ) -> str:<br>        \"\"\"Generate a diagram representing the graph as [mermaid](https://mermaid.js.org/) diagram.<br>        This method calls [`pydantic_graph.mermaid.generate_code`][pydantic_graph.mermaid.generate_code].<br>        Args:<br>            start_node: The node or nodes which can start the graph.<br>            title: The title of the diagram, use `False` to not include a title.<br>            edge_labels: Whether to include edge labels.<br>            notes: Whether to include notes on each node.<br>            highlighted_nodes: Optional node or nodes to highlight.<br>            highlight_css: The CSS to use for highlighting nodes.<br>            infer_name: Whether to infer the graph name from the calling frame.<br>            direction: The direction of flow.<br>        Returns:<br>            The mermaid code for the graph, which can then be rendered as a diagram.<br>        Here's an example of generating a diagram for the graph from [above][pydantic_graph.graph.Graph]:<br>        ```py {title=\"never_42.py\" py=\"3.10\"}<br>        from never_42 import Increment, never_42_graph<br>        print(never_42_graph.mermaid_code(start_node=Increment))<br>        '''<br>        ---<br>        title: never_42_graph<br>        ---<br>        stateDiagram-v2<br>          [*] --> Increment<br>          Increment --> Check42<br>          Check42 --> Increment<br>          Check42 --> [*]<br>        '''<br>        ```<br>        The rendered diagram will look like this:<br>        ```mermaid<br>        ---<br>        title: never_42_graph<br>        ---<br>        stateDiagram-v2<br>          [*] --> Increment<br>          Increment --> Check42<br>          Check42 --> Increment<br>          Check42 --> [*]<br>        ```<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        if title is None and self.name:<br>            title = self.name<br>        return mermaid.generate_code(<br>            self,<br>            start_node=start_node,<br>            highlighted_nodes=highlighted_nodes,<br>            highlight_css=highlight_css,<br>            title=title or None,<br>            edge_labels=edge_labels,<br>            notes=notes,<br>            direction=direction,<br>        )<br>    def mermaid_image(<br>        self, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]<br>    ) -> bytes:<br>        \"\"\"Generate a diagram representing the graph as an image.<br>        The format and diagram can be customized using `kwargs`,<br>        see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].<br>        !!! note \"Uses external service\"<br>            This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`<br>            is a free service not affiliated with Pydantic.<br>        Args:<br>            infer_name: Whether to infer the graph name from the calling frame.<br>            **kwargs: Additional arguments to pass to `mermaid.request_image`.<br>        Returns:<br>            The image bytes.<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        if 'title' not in kwargs and self.name:<br>            kwargs['title'] = self.name<br>        return mermaid.request_image(self, **kwargs)<br>    def mermaid_save(<br>        self, path: Path | str, /, *, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]<br>    ) -> None:<br>        \"\"\"Generate a diagram representing the graph and save it as an image.<br>        The format and diagram can be customized using `kwargs`,<br>        see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].<br>        !!! note \"Uses external service\"<br>            This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`<br>            is a free service not affiliated with Pydantic.<br>        Args:<br>            path: The path to save the image to.<br>            infer_name: Whether to infer the graph name from the calling frame.<br>            **kwargs: Additional arguments to pass to `mermaid.save_image`.<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        if 'title' not in kwargs and self.name:<br>            kwargs['title'] = self.name<br>        mermaid.save_image(path, self, **kwargs)<br>    def _get_state_type(self) -> type[StateT]:<br>        if _utils.is_set(self._state_type):<br>            return self._state_type<br>        for node_def in self.node_defs.values():<br>            for base in typing_extensions.get_original_bases(node_def.node):<br>                if typing_extensions.get_origin(base) is BaseNode:<br>                    args = typing_extensions.get_args(base)<br>                    if args:<br>                        return args[0]<br>                    # break the inner (bases) loop<br>                    break<br>        # state defaults to None, so use that if we can't infer it<br>        return type(None)  # pyright: ignore[reportReturnType]<br>    def _get_run_end_type(self) -> type[RunEndT]:<br>        if _utils.is_set(self._run_end_type):<br>            return self._run_end_type<br>        for node_def in self.node_defs.values():<br>            for base in typing_extensions.get_original_bases(node_def.node):<br>                if typing_extensions.get_origin(base) is BaseNode:<br>                    args = typing_extensions.get_args(base)<br>                    if len(args) == 3:<br>                        t = args[2]<br>                        if not _utils.is_never(t):<br>                            return t<br>                    # break the inner (bases) loop<br>                    break<br>        raise exceptions.GraphSetupError('Could not infer run end type from nodes, please set `run_end_type`.')<br>    def _register_node(<br>        self: Graph[StateT, DepsT, T],<br>        node: type[BaseNode[StateT, DepsT, T]],<br>        parent_namespace: dict[str, Any] | None,<br>    ) -> None:<br>        node_id = node.get_id()<br>        if existing_node := self.node_defs.get(node_id):<br>            raise exceptions.GraphSetupError(<br>                f'Node ID `{node_id}` is not unique — found on {existing_node.node} and {node}'<br>            )<br>        else:<br>            self.node_defs[node_id] = node.get_node_def(parent_namespace)<br>    def _validate_edges(self):<br>        known_node_ids = self.node_defs.keys()<br>        bad_edges: dict[str, list[str]] = {}<br>        for node_id, node_def in self.node_defs.items():<br>            for edge in node_def.next_node_edges.keys():<br>                if edge not in known_node_ids:<br>                    bad_edges.setdefault(edge, []).append(f'`{node_id}`')<br>        if bad_edges:<br>            bad_edges_list = [f'`{k}` is referenced by {_utils.comma_and(v)}' for k, v in bad_edges.items()]<br>            if len(bad_edges_list) == 1:<br>                raise exceptions.GraphSetupError(f'{bad_edges_list[0]} but not included in the graph.')<br>            else:<br>                b = '\\n'.join(f' {be}' for be in bad_edges_list)<br>                raise exceptions.GraphSetupError(<br>                    f'Nodes are referenced in the graph but not included in the graph:\\n{b}'<br>                )<br>    def _infer_name(self, function_frame: types.FrameType | None) -> None:<br>        \"\"\"Infer the agent name from the call frame.<br>        Usage should be `self._infer_name(inspect.currentframe())`.<br>        Copied from `Agent`.<br>        \"\"\"<br>        assert self.name is None, 'Name already set'<br>        if function_frame is not None and (parent_frame := function_frame.f_back):  # pragma: no branch<br>            for name, item in parent_frame.f_locals.items():<br>                if item is self:<br>                    self.name = name<br>                    return<br>            if parent_frame.f_locals != parent_frame.f_globals:<br>                # if we couldn't find the agent in locals and globals are a different dict, try globals<br>                for name, item in parent_frame.f_globals.items():<br>                    if item is self:<br>                        self.name = name<br>                        return<br>```` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    nodes: Sequence[type[BaseNode[StateT, DepsT, RunEndT]]],\n    name: str | None = None,\n    state_type: type[StateT] | Unset = UNSET,\n    run_end_type: type[RunEndT] | Unset = UNSET,\n    snapshot_state: Callable[\\\n        [StateT], StateT\\\n    ] = deep_copy_state,\n    auto_instrument: bool = True\n)\n\n```\n\nCreate a graph from a sequence of nodes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `nodes` | `Sequence[type[BaseNode[StateT, DepsT, RunEndT]]]` | The nodes which make up the graph, nodes need to be unique and all be generic in the same<br>state type. | _required_ |\n| `name` | `str | None` | Optional name for the graph, if not provided the name will be inferred from the calling frame<br>on the first call to a graph method. | `None` |\n| `state_type` | `type[StateT] | Unset` | The type of the state for the graph, this can generally be inferred from `nodes`. | `UNSET` |\n| `run_end_type` | `type[RunEndT] | Unset` | The type of the result of running the graph, this can generally be inferred from `nodes`. | `UNSET` |\n| `snapshot_state` | `Callable[[StateT], StateT]` | A function to snapshot the state of the graph, this is used in<br>[`NodeStep`](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graph.state.NodeStep) and [`EndStep`](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graph.state.EndStep) to record<br>the state before each step. | `deep_copy_state` |\n| `auto_instrument` | `bool` | Whether to create a span for the graph run and the execution of each node's run method. | `True` |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>``` | ```<br>def __init__(<br>    self,<br>    *,<br>    nodes: Sequence[type[BaseNode[StateT, DepsT, RunEndT]]],<br>    name: str | None = None,<br>    state_type: type[StateT] | _utils.Unset = _utils.UNSET,<br>    run_end_type: type[RunEndT] | _utils.Unset = _utils.UNSET,<br>    snapshot_state: Callable[[StateT], StateT] = deep_copy_state,<br>    auto_instrument: bool = True,<br>):<br>    \"\"\"Create a graph from a sequence of nodes.<br>    Args:<br>        nodes: The nodes which make up the graph, nodes need to be unique and all be generic in the same<br>            state type.<br>        name: Optional name for the graph, if not provided the name will be inferred from the calling frame<br>            on the first call to a graph method.<br>        state_type: The type of the state for the graph, this can generally be inferred from `nodes`.<br>        run_end_type: The type of the result of running the graph, this can generally be inferred from `nodes`.<br>        snapshot_state: A function to snapshot the state of the graph, this is used in<br>            [`NodeStep`][pydantic_graph.state.NodeStep] and [`EndStep`][pydantic_graph.state.EndStep] to record<br>            the state before each step.<br>        auto_instrument: Whether to create a span for the graph run and the execution of each node's run method.<br>    \"\"\"<br>    self.name = name<br>    self._state_type = state_type<br>    self._run_end_type = run_end_type<br>    self._auto_instrument = auto_instrument<br>    self.snapshot_state = snapshot_state<br>    parent_namespace = _utils.get_parent_namespace(inspect.currentframe())<br>    self.node_defs: dict[str, NodeDef[StateT, DepsT, RunEndT]] = {}<br>    for node in nodes:<br>        self._register_node(node, parent_namespace)<br>    self._validate_edges()<br>``` |\n\n#### run`async`\n\n```\nrun(\n    start_node: BaseNode[StateT, DepsT, T],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    infer_name: bool = True\n) -> tuple[T, list[HistoryStep[StateT, T]]]\n\n```\n\nRun the graph from a starting node until it ends.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `start_node` | `BaseNode[StateT, DepsT, T]` | the first node to run, since the graph definition doesn't define the entry point in the graph,<br>you need to provide the starting node. | _required_ |\n| `state` | `StateT` | The initial state of the graph. | `None` |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `tuple[T, list[HistoryStep[StateT, T]]]` | The result type from ending the run and the history of the run. |\n\nHere's an example of running the graph from [above](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph):\n\nrun\\_never\\_42.py\n\n```\nfrom never_42 import Increment, MyState, never_42_graph\n\nasync def main():\n    state = MyState(1)\n    _, history = await never_42_graph.run(Increment(), state=state)\n    print(state)\n    #> MyState(number=2)\n    print(len(history))\n    #> 3\n\n    state = MyState(41)\n    _, history = await never_42_graph.run(Increment(), state=state)\n    print(state)\n    #> MyState(number=43)\n    print(len(history))\n    #> 5\n\n```\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>``` | ````<br>async def run(<br>    self: Graph[StateT, DepsT, T],<br>    start_node: BaseNode[StateT, DepsT, T],<br>    *,<br>    state: StateT = None,<br>    deps: DepsT = None,<br>    infer_name: bool = True,<br>) -> tuple[T, list[HistoryStep[StateT, T]]]:<br>    \"\"\"Run the graph from a starting node until it ends.<br>    Args:<br>        start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,<br>            you need to provide the starting node.<br>        state: The initial state of the graph.<br>        deps: The dependencies of the graph.<br>        infer_name: Whether to infer the graph name from the calling frame.<br>    Returns:<br>        The result type from ending the run and the history of the run.<br>    Here's an example of running the graph from [above][pydantic_graph.graph.Graph]:<br>    ```py {title=\"run_never_42.py\" noqa=\"I001\" py=\"3.10\"}<br>    from never_42 import Increment, MyState, never_42_graph<br>    async def main():<br>        state = MyState(1)<br>        _, history = await never_42_graph.run(Increment(), state=state)<br>        print(state)<br>        #> MyState(number=2)<br>        print(len(history))<br>        #> 3<br>        state = MyState(41)<br>        _, history = await never_42_graph.run(Increment(), state=state)<br>        print(state)<br>        #> MyState(number=43)<br>        print(len(history))<br>        #> 5<br>    ```<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    history: list[HistoryStep[StateT, T]] = []<br>    with ExitStack() as stack:<br>        run_span: logfire_api.LogfireSpan | None = None<br>        if self._auto_instrument:<br>            run_span = stack.enter_context(<br>                _logfire.span(<br>                    '{graph_name} run {start=}',<br>                    graph_name=self.name or 'graph',<br>                    start=start_node,<br>                )<br>            )<br>        next_node = start_node<br>        while True:<br>            next_node = await self.next(next_node, history, state=state, deps=deps, infer_name=False)<br>            if isinstance(next_node, End):<br>                history.append(EndStep(result=next_node))<br>                if run_span is not None:<br>                    run_span.set_attribute('history', history)<br>                return next_node.data, history<br>            elif not isinstance(next_node, BaseNode):<br>                if TYPE_CHECKING:<br>                    typing_extensions.assert_never(next_node)<br>                else:<br>                    raise exceptions.GraphRuntimeError(<br>                        f'Invalid node return type: `{type(next_node).__name__}`. Expected `BaseNode` or `End`.'<br>                    )<br>```` |\n\n#### run\\_sync\n\n```\nrun_sync(\n    start_node: BaseNode[StateT, DepsT, T],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    infer_name: bool = True\n) -> tuple[T, list[HistoryStep[StateT, T]]]\n\n```\n\nRun the graph synchronously.\n\nThis is a convenience method that wraps [`self.run`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.run) with `loop.run_until_complete(...)`.\nYou therefore can't use this method inside async code or if there's an active event loop.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `start_node` | `BaseNode[StateT, DepsT, T]` | the first node to run, since the graph definition doesn't define the entry point in the graph,<br>you need to provide the starting node. | _required_ |\n| `state` | `StateT` | The initial state of the graph. | `None` |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `tuple[T, list[HistoryStep[StateT, T]]]` | The result type from ending the run and the history of the run. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>``` | ```<br>def run_sync(<br>    self: Graph[StateT, DepsT, T],<br>    start_node: BaseNode[StateT, DepsT, T],<br>    *,<br>    state: StateT = None,<br>    deps: DepsT = None,<br>    infer_name: bool = True,<br>) -> tuple[T, list[HistoryStep[StateT, T]]]:<br>    \"\"\"Run the graph synchronously.<br>    This is a convenience method that wraps [`self.run`][pydantic_graph.Graph.run] with `loop.run_until_complete(...)`.<br>    You therefore can't use this method inside async code or if there's an active event loop.<br>    Args:<br>        start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,<br>            you need to provide the starting node.<br>        state: The initial state of the graph.<br>        deps: The dependencies of the graph.<br>        infer_name: Whether to infer the graph name from the calling frame.<br>    Returns:<br>        The result type from ending the run and the history of the run.<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    return asyncio.get_event_loop().run_until_complete(<br>        self.run(start_node, state=state, deps=deps, infer_name=False)<br>    )<br>``` |\n\n#### next`async`\n\n```\nnext(\n    node: BaseNode[StateT, DepsT, T],\n    history: list[HistoryStep[StateT, T]],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    infer_name: bool = True\n) -> BaseNode[StateT, DepsT, Any] | End[T]\n\n```\n\nRun a node in the graph and return the next node to run.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `node` | `BaseNode[StateT, DepsT, T]` | The node to run. | _required_ |\n| `history` | `list[HistoryStep[StateT, T]]` | The history of the graph run so far. NOTE: this will be mutated to add the new step. | _required_ |\n| `state` | `StateT` | The current state of the graph. | `None` |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `BaseNode[StateT, DepsT, Any] | End[T]` | The next node to run or [`End`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End) if the graph has finished. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>``` | ```<br>async def next(<br>    self: Graph[StateT, DepsT, T],<br>    node: BaseNode[StateT, DepsT, T],<br>    history: list[HistoryStep[StateT, T]],<br>    *,<br>    state: StateT = None,<br>    deps: DepsT = None,<br>    infer_name: bool = True,<br>) -> BaseNode[StateT, DepsT, Any] | End[T]:<br>    \"\"\"Run a node in the graph and return the next node to run.<br>    Args:<br>        node: The node to run.<br>        history: The history of the graph run so far. NOTE: this will be mutated to add the new step.<br>        state: The current state of the graph.<br>        deps: The dependencies of the graph.<br>        infer_name: Whether to infer the graph name from the calling frame.<br>    Returns:<br>        The next node to run or [`End`][pydantic_graph.nodes.End] if the graph has finished.<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    node_id = node.get_id()<br>    if node_id not in self.node_defs:<br>        raise exceptions.GraphRuntimeError(f'Node `{node}` is not in the graph.')<br>    with ExitStack() as stack:<br>        if self._auto_instrument:<br>            stack.enter_context(_logfire.span('run node {node_id}', node_id=node_id, node=node))<br>        ctx = GraphRunContext(state, deps)<br>        start_ts = _utils.now_utc()<br>        start = perf_counter()<br>        next_node = await node.run(ctx)<br>        duration = perf_counter() - start<br>    history.append(<br>        NodeStep(state=state, node=node, start_ts=start_ts, duration=duration, snapshot_state=self.snapshot_state)<br>    )<br>    return next_node<br>``` |\n\n#### dump\\_history\n\n```\ndump_history(\n    history: list[HistoryStep[StateT, T]],\n    *,\n    indent: int | None = None\n) -> bytes\n\n```\n\nDump the history of a graph run as JSON.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `history` | `list[HistoryStep[StateT, T]]` | The history of the graph run. | _required_ |\n| `indent` | `int | None` | The number of spaces to indent the JSON. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | The JSON representation of the history. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>``` | ```<br>def dump_history(<br>    self: Graph[StateT, DepsT, T], history: list[HistoryStep[StateT, T]], *, indent: int | None = None<br>) -> bytes:<br>    \"\"\"Dump the history of a graph run as JSON.<br>    Args:<br>        history: The history of the graph run.<br>        indent: The number of spaces to indent the JSON.<br>    Returns:<br>        The JSON representation of the history.<br>    \"\"\"<br>    return self.history_type_adapter.dump_json(history, indent=indent)<br>``` |\n\n#### load\\_history\n\n```\nload_history(\n    json_bytes: str | bytes | bytearray,\n) -> list[HistoryStep[StateT, RunEndT]]\n\n```\n\nLoad the history of a graph run from JSON.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `json_bytes` | `str | bytes | bytearray` | The JSON representation of the history. | _required_ |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[HistoryStep[StateT, RunEndT]]` | The history of the graph run. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>``` | ```<br>def load_history(self, json_bytes: str | bytes | bytearray) -> list[HistoryStep[StateT, RunEndT]]:<br>    \"\"\"Load the history of a graph run from JSON.<br>    Args:<br>        json_bytes: The JSON representation of the history.<br>    Returns:<br>        The history of the graph run.<br>    \"\"\"<br>    return self.history_type_adapter.validate_json(json_bytes)<br>``` |\n\n#### mermaid\\_code\n\n```\nmermaid_code(\n    *,\n    start_node: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    title: str | None | Literal[False] = None,\n    edge_labels: bool = True,\n    notes: bool = True,\n    highlighted_nodes: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    highlight_css: str = DEFAULT_HIGHLIGHT_CSS,\n    infer_name: bool = True,\n    direction: StateDiagramDirection | None = None\n) -> str\n\n```\n\nGenerate a diagram representing the graph as [mermaid](https://mermaid.js.org/) diagram.\n\nThis method calls [`pydantic_graph.mermaid.generate_code`](https://ai.pydantic.dev/api/pydantic_graph/mermaid/#pydantic_graph.mermaid.generate_code).\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `start_node` | `Sequence[NodeIdent] | NodeIdent | None` | The node or nodes which can start the graph. | `None` |\n| `title` | `str | None | Literal[False]` | The title of the diagram, use `False` to not include a title. | `None` |\n| `edge_labels` | `bool` | Whether to include edge labels. | `True` |\n| `notes` | `bool` | Whether to include notes on each node. | `True` |\n| `highlighted_nodes` | `Sequence[NodeIdent] | NodeIdent | None` | Optional node or nodes to highlight. | `None` |\n| `highlight_css` | `str` | The CSS to use for highlighting nodes. | `DEFAULT_HIGHLIGHT_CSS` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n| `direction` | `StateDiagramDirection | None` | The direction of flow. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `str` | The mermaid code for the graph, which can then be rendered as a diagram. |\n\nHere's an example of generating a diagram for the graph from [above](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph):\n\nnever\\_42.py\n\n```\nfrom never_42 import Increment, never_42_graph\n\nprint(never_42_graph.mermaid_code(start_node=Increment))\n'''\n---\ntitle: never_42_graph\n---\nstateDiagram-v2\n  [*] --> Increment\n  Increment --> Check42\n  Check42 --> Increment\n  Check42 --> [*]\n'''\n\n```\n\nThe rendered diagram will look like this:\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>``` | ````<br>def mermaid_code(<br>    self,<br>    *,<br>    start_node: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,<br>    title: str | None | typing_extensions.Literal[False] = None,<br>    edge_labels: bool = True,<br>    notes: bool = True,<br>    highlighted_nodes: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,<br>    highlight_css: str = mermaid.DEFAULT_HIGHLIGHT_CSS,<br>    infer_name: bool = True,<br>    direction: mermaid.StateDiagramDirection | None = None,<br>) -> str:<br>    \"\"\"Generate a diagram representing the graph as [mermaid](https://mermaid.js.org/) diagram.<br>    This method calls [`pydantic_graph.mermaid.generate_code`][pydantic_graph.mermaid.generate_code].<br>    Args:<br>        start_node: The node or nodes which can start the graph.<br>        title: The title of the diagram, use `False` to not include a title.<br>        edge_labels: Whether to include edge labels.<br>        notes: Whether to include notes on each node.<br>        highlighted_nodes: Optional node or nodes to highlight.<br>        highlight_css: The CSS to use for highlighting nodes.<br>        infer_name: Whether to infer the graph name from the calling frame.<br>        direction: The direction of flow.<br>    Returns:<br>        The mermaid code for the graph, which can then be rendered as a diagram.<br>    Here's an example of generating a diagram for the graph from [above][pydantic_graph.graph.Graph]:<br>    ```py {title=\"never_42.py\" py=\"3.10\"}<br>    from never_42 import Increment, never_42_graph<br>    print(never_42_graph.mermaid_code(start_node=Increment))<br>    '''<br>    ---<br>    title: never_42_graph<br>    ---<br>    stateDiagram-v2<br>      [*] --> Increment<br>      Increment --> Check42<br>      Check42 --> Increment<br>      Check42 --> [*]<br>    '''<br>    ```<br>    The rendered diagram will look like this:<br>    ```mermaid<br>    ---<br>    title: never_42_graph<br>    ---<br>    stateDiagram-v2<br>      [*] --> Increment<br>      Increment --> Check42<br>      Check42 --> Increment<br>      Check42 --> [*]<br>    ```<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    if title is None and self.name:<br>        title = self.name<br>    return mermaid.generate_code(<br>        self,<br>        start_node=start_node,<br>        highlighted_nodes=highlighted_nodes,<br>        highlight_css=highlight_css,<br>        title=title or None,<br>        edge_labels=edge_labels,<br>        notes=notes,<br>        direction=direction,<br>    )<br>```` |\n\n#### mermaid\\_image\n\n```\nmermaid_image(\n    infer_name: bool = True, **kwargs: Unpack[MermaidConfig]\n) -> bytes\n\n```\n\nGenerate a diagram representing the graph as an image.\n\nThe format and diagram can be customized using `kwargs`,\nsee [`pydantic_graph.mermaid.MermaidConfig`](https://ai.pydantic.dev/api/pydantic_graph/mermaid/#pydantic_graph.mermaid.MermaidConfig).\n\nUses external service\n\nThis method makes a request to [mermaid.ink](https://mermaid.ink/) to render the image, `mermaid.ink`\nis a free service not affiliated with Pydantic.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional arguments to pass to `mermaid.request_image`. | `{}` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | The image bytes. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>``` | ```<br>def mermaid_image(<br>    self, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]<br>) -> bytes:<br>    \"\"\"Generate a diagram representing the graph as an image.<br>    The format and diagram can be customized using `kwargs`,<br>    see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].<br>    !!! note \"Uses external service\"<br>        This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`<br>        is a free service not affiliated with Pydantic.<br>    Args:<br>        infer_name: Whether to infer the graph name from the calling frame.<br>        **kwargs: Additional arguments to pass to `mermaid.request_image`.<br>    Returns:<br>        The image bytes.<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    if 'title' not in kwargs and self.name:<br>        kwargs['title'] = self.name<br>    return mermaid.request_image(self, **kwargs)<br>``` |\n\n#### mermaid\\_save\n\n```\nmermaid_save(\n    path: Path | str,\n    /,\n    *,\n    infer_name: bool = True,\n    **kwargs: Unpack[MermaidConfig],\n) -> None\n\n```\n\nGenerate a diagram representing the graph and save it as an image.\n\nThe format and diagram can be customized using `kwargs`,\nsee [`pydantic_graph.mermaid.MermaidConfig`](https://ai.pydantic.dev/api/pydantic_graph/mermaid/#pydantic_graph.mermaid.MermaidConfig).\n\nUses external service\n\nThis method makes a request to [mermaid.ink](https://mermaid.ink/) to render the image, `mermaid.ink`\nis a free service not affiliated with Pydantic.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str` | The path to save the image to. | _required_ |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional arguments to pass to `mermaid.save_image`. | `{}` |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>``` | ```<br>def mermaid_save(<br>    self, path: Path | str, /, *, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]<br>) -> None:<br>    \"\"\"Generate a diagram representing the graph and save it as an image.<br>    The format and diagram can be customized using `kwargs`,<br>    see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].<br>    !!! note \"Uses external service\"<br>        This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`<br>        is a free service not affiliated with Pydantic.<br>    Args:<br>        path: The path to save the image to.<br>        infer_name: Whether to infer the graph name from the calling frame.<br>        **kwargs: Additional arguments to pass to `mermaid.save_image`.<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    if 'title' not in kwargs and self.name:<br>        kwargs['title'] = self.name<br>    mermaid.save_image(path, self, **kwargs)<br>``` |",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/pydantic_graph/graph/",
      "ogUrl": "https://ai.pydantic.dev/api/pydantic_graph/graph/",
      "title": "pydantic_graph - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/pydantic_graph/graph/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/graph.png",
      "ogTitle": "pydantic_graph - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/graph.png",
      "og:title": "pydantic_graph - PydanticAI",
      "scrapeId": "1f730e1a-60af-4701-86b5-cea0ec42b99b",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/pydantic_graph/graph/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/graph.png",
      "twitter:title": "pydantic_graph - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/exceptions/#pydantic_aiexceptions)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.exceptions`\n\n### ModelRetry\n\nBases: `Exception`\n\nException raised when a tool function should be retried.\n\nThe agent will return the message to the model and ask it to try calling the function/tool again.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 8<br> 9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>``` | ```<br>class ModelRetry(Exception):<br>    \"\"\"Exception raised when a tool function should be retried.<br>    The agent will return the message to the model and ask it to try calling the function/tool again.<br>    \"\"\"<br>    message: str<br>    \"\"\"The message to return to the model.\"\"\"<br>    def __init__(self, message: str):<br>        self.message = message<br>        super().__init__(message)<br>``` |\n\n#### message`instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nThe message to return to the model.\n\n### UserError\n\nBases: `RuntimeError`\n\nError caused by a usage mistake by the application developer — You!\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n\n|     |     |\n| --- | --- |\n| ```<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>``` | ```<br>class UserError(RuntimeError):<br>    \"\"\"Error caused by a usage mistake by the application developer — You!\"\"\"<br>    message: str<br>    \"\"\"Description of the mistake.\"\"\"<br>    def __init__(self, message: str):<br>        self.message = message<br>        super().__init__(message)<br>``` |\n\n#### message`instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nDescription of the mistake.\n\n### AgentRunError\n\nBases: `RuntimeError`\n\nBase class for errors occurring during an agent run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n\n|     |     |\n| --- | --- |\n| ```<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>``` | ```<br>class AgentRunError(RuntimeError):<br>    \"\"\"Base class for errors occurring during an agent run.\"\"\"<br>    message: str<br>    \"\"\"The error message.\"\"\"<br>    def __init__(self, message: str):<br>        self.message = message<br>        super().__init__(message)<br>    def __str__(self) -> str:<br>        return self.message<br>``` |\n\n#### message`instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nThe error message.\n\n### UsageLimitExceeded\n\nBases: `AgentRunError`\n\nError raised when a Model's usage exceeds the specified limits.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n\n|     |     |\n| --- | --- |\n| ```<br>47<br>48<br>``` | ```<br>class UsageLimitExceeded(AgentRunError):<br>    \"\"\"Error raised when a Model's usage exceeds the specified limits.\"\"\"<br>``` |\n\n### UnexpectedModelBehavior\n\nBases: `AgentRunError`\n\nError caused by unexpected Model behavior, e.g. an unexpected response code.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n\n|     |     |\n| --- | --- |\n| ```<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>``` | ```<br>class UnexpectedModelBehavior(AgentRunError):<br>    \"\"\"Error caused by unexpected Model behavior, e.g. an unexpected response code.\"\"\"<br>    message: str<br>    \"\"\"Description of the unexpected behavior.\"\"\"<br>    body: str | None<br>    \"\"\"The body of the response, if available.\"\"\"<br>    def __init__(self, message: str, body: str | None = None):<br>        self.message = message<br>        if body is None:<br>            self.body: str | None = None<br>        else:<br>            try:<br>                self.body = json.dumps(json.loads(body), indent=2)<br>            except ValueError:<br>                self.body = body<br>        super().__init__(message)<br>    def __str__(self) -> str:<br>        if self.body:<br>            return f'{self.message}, body:\\n{self.body}'<br>        else:<br>            return self.message<br>``` |\n\n#### message`instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nDescription of the unexpected behavior.\n\n#### body`instance-attribute`\n\n```\nbody: str | None = dumps(loads(body), indent=2)\n\n```\n\nThe body of the response, if available.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/exceptions/",
      "ogUrl": "https://ai.pydantic.dev/api/exceptions/",
      "title": "pydantic_ai.exceptions - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/exceptions/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/exceptions.png",
      "ogTitle": "pydantic_ai.exceptions - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/exceptions.png",
      "og:title": "pydantic_ai.exceptions - PydanticAI",
      "scrapeId": "4325d6f8-456f-43b9-b8dd-bbb1a8ca340d",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/exceptions/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/exceptions.png",
      "twitter:title": "pydantic_ai.exceptions - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/stream-markdown/#running-the-example)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Stream markdown\n\nThis example shows how to stream markdown from an agent, using the [`rich`](https://github.com/Textualize/rich) library to highlight the output in the terminal.\n\nIt'll run the example with both OpenAI and Google Gemini models if the required environment variables are set.\n\nDemonstrates:\n\n- [streaming text responses](https://ai.pydantic.dev/results/#streaming-text)\n\n## Running the Example\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/stream-markdown/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/stream-markdown/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.stream_markdown\n\n```\n\n```\nuv run -m pydantic_ai_examples.stream_markdown\n\n```\n\n## Example Code\n\n```\nimport asyncio\nimport os\n\nimport logfire\nfrom rich.console import Console, ConsoleOptions, RenderResult\nfrom rich.live import Live\nfrom rich.markdown import CodeBlock, Markdown\nfrom rich.syntax import Syntax\nfrom rich.text import Text\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models import KnownModelName\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nagent = Agent()\n\n# models to try, and the appropriate env var\nmodels: list[tuple[KnownModelName, str]] = [\\\n    ('google-gla:gemini-1.5-flash', 'GEMINI_API_KEY'),\\\n    ('openai:gpt-4o-mini', 'OPENAI_API_KEY'),\\\n    ('groq:llama-3.3-70b-versatile', 'GROQ_API_KEY'),\\\n]\n\nasync def main():\n    prettier_code_blocks()\n    console = Console()\n    prompt = 'Show me a short example of using Pydantic.'\n    console.log(f'Asking: {prompt}...', style='cyan')\n    for model, env_var in models:\n        if env_var in os.environ:\n            console.log(f'Using model: {model}')\n            with Live('', console=console, vertical_overflow='visible') as live:\n                async with agent.run_stream(prompt, model=model) as result:\n                    async for message in result.stream():\n                        live.update(Markdown(message))\n            console.log(result.usage())\n        else:\n            console.log(f'{model} requires {env_var} to be set.')\n\ndef prettier_code_blocks():\n    \"\"\"Make rich code blocks prettier and easier to copy.\n\n    From https://github.com/samuelcolvin/aicli/blob/v0.8.0/samuelcolvin_aicli.py#L22\n    \"\"\"\n\n    class SimpleCodeBlock(CodeBlock):\n        def __rich_console__(\n            self, console: Console, options: ConsoleOptions\n        ) -> RenderResult:\n            code = str(self.text).rstrip()\n            yield Text(self.lexer_name, style='dim')\n            yield Syntax(\n                code,\n                self.lexer_name,\n                theme=self.theme,\n                background_color='default',\n                word_wrap=True,\n            )\n            yield Text(f'/{self.lexer_name}', style='dim')\n\n    Markdown.elements['fence'] = SimpleCodeBlock\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/stream-markdown/",
      "ogUrl": "https://ai.pydantic.dev/examples/stream-markdown/",
      "title": "Stream markdown - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/stream-markdown/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/stream-markdown.png",
      "ogTitle": "Stream markdown - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/stream-markdown.png",
      "og:title": "Stream markdown - PydanticAI",
      "scrapeId": "9b8ac029-bca4-4404-9e1f-179b09a47426",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/stream-markdown/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/stream-markdown.png",
      "twitter:title": "Stream markdown - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/help/#getting-help)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Getting Help\n\nIf you need help getting started with PydanticAI or with advanced usage, the following sources may be useful.\n\n## Slack\n\nJoin the `#pydantic-ai` channel in the [Pydantic Slack](https://join.slack.com/t/pydanticlogfire/shared_invite/zt-2war8jrjq-w_nWG6ZX7Zm~gnzY7cXSog) to ask questions, get help, and chat about PydanticAI. There's also channels for Pydantic, Logfire, and FastUI.\n\nIf you're on a [Logfire](https://pydantic.dev/logfire) Pro plan, you can also get a dedicated private slack collab channel with us.\n\n## GitHub Issues\n\nThe [PydanticAI GitHub Issues](https://github.com/pydantic/pydantic-ai/issues) are a great place to ask questions and give us feedback.",
    "metadata": {
      "url": "https://ai.pydantic.dev/help/",
      "ogUrl": "https://ai.pydantic.dev/help/",
      "title": "Getting Help - PydanticAI",
      "og:url": "https://ai.pydantic.dev/help/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/help.png",
      "ogTitle": "Getting Help - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/help.png",
      "og:title": "Getting Help - PydanticAI",
      "scrapeId": "dbf2a027-f90a-4717-925b-e6d644780b7b",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/help/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/help.png",
      "twitter:title": "Getting Help - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/question-graph/#question-graph)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Question Graph\n\nExample of a graph for asking and evaluating questions.\n\nDemonstrates:\n\n- [`pydantic_graph`](https://ai.pydantic.dev/graph/)\n\n## Running the Example\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/question-graph/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/question-graph/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.question_graph\n\n```\n\n```\nuv run -m pydantic_ai_examples.question_graph\n\n```\n\n## Example Code\n\nquestion\\_graph.py\n\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\nfrom typing import Annotated\n\nimport logfire\nfrom devtools import debug\nfrom pydantic_graph import BaseNode, Edge, End, Graph, GraphRunContext, HistoryStep\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nask_agent = Agent('openai:gpt-4o', result_type=str)\n\n@dataclass\nclass QuestionState:\n    question: str | None = None\n    ask_agent_messages: list[ModelMessage] = field(default_factory=list)\n    evaluate_agent_messages: list[ModelMessage] = field(default_factory=list)\n\n@dataclass\nclass Ask(BaseNode[QuestionState]):\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Answer:\n        result = await ask_agent.run(\n            'Ask a simple question with a single correct answer.',\n            message_history=ctx.state.ask_agent_messages,\n        )\n        ctx.state.ask_agent_messages += result.all_messages()\n        ctx.state.question = result.data\n        return Answer()\n\n@dataclass\nclass Answer(BaseNode[QuestionState]):\n    answer: str | None = None\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Evaluate:\n        assert self.answer is not None\n        return Evaluate(self.answer)\n\n@dataclass\nclass EvaluationResult:\n    correct: bool\n    comment: str\n\nevaluate_agent = Agent(\n    'openai:gpt-4o',\n    result_type=EvaluationResult,\n    system_prompt='Given a question and answer, evaluate if the answer is correct.',\n)\n\n@dataclass\nclass Evaluate(BaseNode[QuestionState]):\n    answer: str\n\n    async def run(\n        self,\n        ctx: GraphRunContext[QuestionState],\n    ) -> Congratulate | Reprimand:\n        assert ctx.state.question is not None\n        result = await evaluate_agent.run(\n            format_as_xml({'question': ctx.state.question, 'answer': self.answer}),\n            message_history=ctx.state.evaluate_agent_messages,\n        )\n        ctx.state.evaluate_agent_messages += result.all_messages()\n        if result.data.correct:\n            return Congratulate(result.data.comment)\n        else:\n            return Reprimand(result.data.comment)\n\n@dataclass\nclass Congratulate(BaseNode[QuestionState, None, None]):\n    comment: str\n\n    async def run(\n        self, ctx: GraphRunContext[QuestionState]\n    ) -> Annotated[End, Edge(label='success')]:\n        print(f'Correct answer! {self.comment}')\n        return End(None)\n\n@dataclass\nclass Reprimand(BaseNode[QuestionState]):\n    comment: str\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Ask:\n        print(f'Comment: {self.comment}')\n        # > Comment: Vichy is no longer the capital of France.\n        ctx.state.question = None\n        return Ask()\n\nquestion_graph = Graph(\n    nodes=(Ask, Answer, Evaluate, Congratulate, Reprimand), state_type=QuestionState\n)\n\nasync def run_as_continuous():\n    state = QuestionState()\n    node = Ask()\n    history: list[HistoryStep[QuestionState, None]] = []\n    with logfire.span('run questions graph'):\n        while True:\n            node = await question_graph.next(node, history, state=state)\n            if isinstance(node, End):\n                debug([e.data_snapshot() for e in history])\n                break\n            elif isinstance(node, Answer):\n                assert state.question\n                node.answer = input(f'{state.question} ')\n            # otherwise just continue\n\nasync def run_as_cli(answer: str | None):\n    history_file = Path('question_graph_history.json')\n    history = (\n        question_graph.load_history(history_file.read_bytes())\n        if history_file.exists()\n        else []\n    )\n\n    if history:\n        last = history[-1]\n        assert last.kind == 'node', 'expected last step to be a node'\n        state = last.state\n        assert answer is not None, 'answer is required to continue from history'\n        node = Answer(answer)\n    else:\n        state = QuestionState()\n        node = Ask()\n    debug(state, node)\n\n    with logfire.span('run questions graph'):\n        while True:\n            node = await question_graph.next(node, history, state=state)\n            if isinstance(node, End):\n                debug([e.data_snapshot() for e in history])\n                print('Finished!')\n                break\n            elif isinstance(node, Answer):\n                print(state.question)\n                break\n            # otherwise just continue\n\n    history_file.write_bytes(question_graph.dump_history(history, indent=2))\n\nif __name__ == '__main__':\n    import asyncio\n    import sys\n\n    try:\n        sub_command = sys.argv[1]\n        assert sub_command in ('continuous', 'cli', 'mermaid')\n    except (IndexError, AssertionError):\n        print(\n            'Usage:\\n'\n            '  uv run -m pydantic_ai_examples.question_graph mermaid\\n'\n            'or:\\n'\n            '  uv run -m pydantic_ai_examples.question_graph continuous\\n'\n            'or:\\n'\n            '  uv run -m pydantic_ai_examples.question_graph cli [answer]',\n            file=sys.stderr,\n        )\n        sys.exit(1)\n\n    if sub_command == 'mermaid':\n        print(question_graph.mermaid_code(start_node=Ask))\n    elif sub_command == 'continuous':\n        asyncio.run(run_as_continuous())\n    else:\n        a = sys.argv[2] if len(sys.argv) > 2 else None\n        asyncio.run(run_as_cli(a))\n\n```\n\nThe mermaid diagram generated in this example looks like this:",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/question-graph/",
      "ogUrl": "https://ai.pydantic.dev/examples/question-graph/",
      "title": "Question Graph - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/question-graph/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/question-graph.png",
      "ogTitle": "Question Graph - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/question-graph.png",
      "og:title": "Question Graph - PydanticAI",
      "scrapeId": "1f9a4a21-45ae-42b0-8c33-926d622ce9e8",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/question-graph/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/question-graph.png",
      "twitter:title": "Question Graph - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/graph/#graphs)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Graphs\n\nDon't use a nail gun unless you need a nail gun\n\nIf PydanticAI [agents](https://ai.pydantic.dev/agents/) are a hammer, and [multi-agent workflows](https://ai.pydantic.dev/multi-agent-applications/) are a sledgehammer, then graphs are a nail gun:\n\n- sure, nail guns look cooler than hammers\n- but nail guns take a lot more setup than hammers\n- and nail guns don't make you a better builder, they make you a builder with a nail gun\n- Lastly, (and at the risk of torturing this metaphor), if you're a fan of medieval tools like mallets and untyped Python, you probably won't like nail guns or our approach to graphs. (But then again, if you're not a fan of type hints in Python, you've probably already bounced off PydanticAI to use one of the toy agent frameworks — good luck, and feel free to borrow my sledgehammer when you realize you need it)\n\nIn short, graphs are a powerful tool, but they're not the right tool for every job. Please consider other [multi-agent approaches](https://ai.pydantic.dev/multi-agent-applications/) before proceeding.\n\nIf you're not confident a graph-based approach is a good idea, it might be unnecessary.\n\nGraphs and finite state machines (FSMs) are a powerful abstraction to model, execute, control and visualize complex workflows.\n\nAlongside PydanticAI, we've developed `pydantic-graph` — an async graph and state machine library for Python where nodes and edges are defined using type hints.\n\nWhile this library is developed as part of PydanticAI; it has no dependency on `pydantic-ai` and can be considered as a pure graph-based state machine library. You may find it useful whether or not you're using PydanticAI or even building with GenAI.\n\n`pydantic-graph` is designed for advanced users and makes heavy use of Python generics and types hints. It is not designed to be as beginner-friendly as PydanticAI.\n\nVery Early beta\n\nGraph support was [introduced](https://github.com/pydantic/pydantic-ai/pull/528) in v0.0.19 and is in very earlier beta. The API is subject to change. The documentation is incomplete. The implementation is incomplete.\n\n## Installation\n\n`pydantic-graph` is a required dependency of `pydantic-ai`, and an optional dependency of `pydantic-ai-slim`, see [installation instructions](https://ai.pydantic.dev/install/#slim-install) for more information. You can also install it directly:\n\n[pip](https://ai.pydantic.dev/graph/#__tabbed_1_1)[uv](https://ai.pydantic.dev/graph/#__tabbed_1_2)\n\n```\npip install pydantic-graph\n\n```\n\n```\nuv add pydantic-graph\n\n```\n\n## Graph Types\n\n`pydantic-graph` made up of a few key components:\n\n### GraphRunContext\n\n[`GraphRunContext`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.GraphRunContext) — The context for the graph run, similar to PydanticAI's [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext). This holds the state of the graph and dependencies and is passed to nodes when they're run.\n\n`GraphRunContext` is generic in the state type of the graph it's used in, [`StateT`](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graph.state.StateT).\n\n### End\n\n[`End`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End) — return value to indicate the graph run should end.\n\n`End` is generic in the graph return type of the graph it's used in, [`RunEndT`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.RunEndT).\n\n### Nodes\n\nSubclasses of [`BaseNode`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode) define nodes for execution in the graph.\n\nNodes, which are generally [`dataclass` es](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass), generally consist of:\n\n- fields containing any parameters required/optional when calling the node\n- the business logic to execute the node, in the [`run`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode.run) method\n- return annotations of the [`run`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode.run) method, which are read by `pydantic-graph` to determine the outgoing edges of the node\n\nNodes are generic in:\n\n- **state**, which must have the same type as the state of graphs they're included in, [`StateT`](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graph.state.StateT) has a default of `None`, so if you're not using state you can omit this generic parameter, see [stateful graphs](https://ai.pydantic.dev/graph/#stateful-graphs) for more information\n- **deps**, which must have the same type as the deps of the graph they're included in, [`DepsT`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.DepsT) has a default of `None`, so if you're not using deps you can omit this generic parameter, see [dependency injection](https://ai.pydantic.dev/graph/#dependency-injection) for more information\n- **graph return type** — this only applies if the node returns [`End`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End). [`RunEndT`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.RunEndT) has a default of [Never](https://docs.python.org/3/library/typing.html#typing.Never) so this generic parameter can be omitted if the node doesn't return `End`, but must be included if it does.\n\nHere's an example of a start or intermediate node in a graph — it can't end the run as it doesn't return [`End`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End):\n\nintermediate\\_node.py\n\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, GraphRunContext\n\n@dataclass\nclass MyNode(BaseNode[MyState]):\n    foo: int\n\n    async def run(\n        self,\n        ctx: GraphRunContext[MyState],\n    ) -> AnotherNode:\n        ...\n        return AnotherNode()\n\n```\n\nWe could extend `MyNode` to optionally end the run if `foo` is divisible by 5:\n\nintermediate\\_or\\_end\\_node.py\n\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, GraphRunContext\n\n@dataclass\nclass MyNode(BaseNode[MyState, None, int]):\n    foo: int\n\n    async def run(\n        self,\n        ctx: GraphRunContext[MyState],\n    ) -> AnotherNode | End[int]:\n        if self.foo % 5 == 0:\n            return End(self.foo)\n        else:\n            return AnotherNode()\n\n```\n\n### Graph\n\n[`Graph`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph) — this is the execution graph itself, made up of a set of [node classes](https://ai.pydantic.dev/graph/#nodes) (i.e., `BaseNode` subclasses).\n\n`Graph` is generic in:\n\n- **state** the state type of the graph, [`StateT`](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graph.state.StateT)\n- **deps** the deps type of the graph, [`DepsT`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.DepsT)\n- **graph return type** the return type of the graph run, [`RunEndT`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.RunEndT)\n\nHere's an example of a simple graph:\n\ngraph\\_example.py\n\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n@dataclass\nclass DivisibleBy5(BaseNode[None, None, int]):\n    foo: int\n\n    async def run(\n        self,\n        ctx: GraphRunContext,\n    ) -> Increment | End[int]:\n        if self.foo % 5 == 0:\n            return End(self.foo)\n        else:\n            return Increment(self.foo)\n\n@dataclass\nclass Increment(BaseNode):\n    foo: int\n\n    async def run(self, ctx: GraphRunContext) -> DivisibleBy5:\n        return DivisibleBy5(self.foo + 1)\n\nfives_graph = Graph(nodes=[DivisibleBy5, Increment])\nresult, history = fives_graph.run_sync(DivisibleBy5(4))\nprint(result)\n#> 5\n# the full history is quite verbose (see below), so we'll just print the summary\nprint([item.data_snapshot() for item in history])\n#> [DivisibleBy5(foo=4), Increment(foo=4), DivisibleBy5(foo=5), End(data=5)]\n\n```\n\n_(This example is complete, it can be run \"as is\" with Python 3.10+)_\n\nA [mermaid diagram](https://ai.pydantic.dev/graph/#mermaid-diagrams) for this graph can be generated with the following code:\n\ngraph\\_example\\_diagram.py\n\n```\nfrom graph_example import DivisibleBy5, fives_graph\n\nfives_graph.mermaid_code(start_node=DivisibleBy5)\n\n```\n\nIn order to visualize a graph within a `jupyter-notebook`, `IPython.display` needs to be used:\n\njupyter\\_display\\_mermaid.py\n\n```\nfrom graph_example import DivisibleBy5, fives_graph\nfrom IPython.display import Image, display\n\ndisplay(Image(fives_graph.mermaid_image(start_node=DivisibleBy5)))\n\n```\n\n## Stateful Graphs\n\nThe \"state\" concept in `pydantic-graph` provides an optional way to access and mutate an object (often a `dataclass` or Pydantic model) as nodes run in a graph. If you think of Graphs as a production line, then your state is the engine being passed along the line and built up by each node as the graph is run.\n\nIn the future, we intend to extend `pydantic-graph` to provide state persistence with the state recorded after each node is run, see [#695](https://github.com/pydantic/pydantic-ai/issues/695).\n\nHere's an example of a graph which represents a vending machine where the user may insert coins and select a product to purchase.\n\nvending\\_machine.py\n\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom rich.prompt import Prompt\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n@dataclass\nclass MachineState:\n    user_balance: float = 0.0\n    product: str | None = None\n\n@dataclass\nclass InsertCoin(BaseNode[MachineState]):\n    async def run(self, ctx: GraphRunContext[MachineState]) -> CoinsInserted:\n        return CoinsInserted(float(Prompt.ask('Insert coins')))\n\n@dataclass\nclass CoinsInserted(BaseNode[MachineState]):\n    amount: float\n\n    async def run(\n        self, ctx: GraphRunContext[MachineState]\n    ) -> SelectProduct | Purchase:\n        ctx.state.user_balance += self.amount\n        if ctx.state.product is not None:\n            return Purchase(ctx.state.product)\n        else:\n            return SelectProduct()\n\n@dataclass\nclass SelectProduct(BaseNode[MachineState]):\n    async def run(self, ctx: GraphRunContext[MachineState]) -> Purchase:\n        return Purchase(Prompt.ask('Select product'))\n\nPRODUCT_PRICES = {\n    'water': 1.25,\n    'soda': 1.50,\n    'crisps': 1.75,\n    'chocolate': 2.00,\n}\n\n@dataclass\nclass Purchase(BaseNode[MachineState, None, None]):\n    product: str\n\n    async def run(\n        self, ctx: GraphRunContext[MachineState]\n    ) -> End | InsertCoin | SelectProduct:\n        if price := PRODUCT_PRICES.get(self.product):\n            ctx.state.product = self.product\n            if ctx.state.user_balance >= price:\n                ctx.state.user_balance -= price\n                return End(None)\n            else:\n                diff = price - ctx.state.user_balance\n                print(f'Not enough money for {self.product}, need {diff:0.2f} more')\n                #> Not enough money for crisps, need 0.75 more\n                return InsertCoin()\n        else:\n            print(f'No such product: {self.product}, try again')\n            return SelectProduct()\n\nvending_machine_graph = Graph(\n    nodes=[InsertCoin, CoinsInserted, SelectProduct, Purchase]\n)\n\nasync def main():\n    state = MachineState()\n    await vending_machine_graph.run(InsertCoin(), state=state)\n    print(f'purchase successful item={state.product} change={state.user_balance:0.2f}')\n    #> purchase successful item=crisps change=0.25\n\n```\n\n_(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)_\n\nA [mermaid diagram](https://ai.pydantic.dev/graph/#mermaid-diagrams) for this graph can be generated with the following code:\n\nvending\\_machine\\_diagram.py\n\n```\nfrom vending_machine import InsertCoin, vending_machine_graph\n\nvending_machine_graph.mermaid_code(start_node=InsertCoin)\n\n```\n\nThe diagram generated by the above code is:\n\nSee [below](https://ai.pydantic.dev/graph/#mermaid-diagrams) for more information on generating diagrams.\n\n## GenAI Example\n\nSo far we haven't shown an example of a Graph that actually uses PydanticAI or GenAI at all.\n\nIn this example, one agent generates a welcome email to a user and the other agent provides feedback on the email.\n\nThis graph has a very simple structure:\n\ngenai\\_email\\_feedback.py\n\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass, field\n\nfrom pydantic import BaseModel, EmailStr\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n@dataclass\nclass User:\n    name: str\n    email: EmailStr\n    interests: list[str]\n\n@dataclass\nclass Email:\n    subject: str\n    body: str\n\n@dataclass\nclass State:\n    user: User\n    write_agent_messages: list[ModelMessage] = field(default_factory=list)\n\nemail_writer_agent = Agent(\n    'google-vertex:gemini-1.5-pro',\n    result_type=Email,\n    system_prompt='Write a welcome email to our tech blog.',\n)\n\n@dataclass\nclass WriteEmail(BaseNode[State]):\n    email_feedback: str | None = None\n\n    async def run(self, ctx: GraphRunContext[State]) -> Feedback:\n        if self.email_feedback:\n            prompt = (\n                f'Rewrite the email for the user:\\n'\n                f'{format_as_xml(ctx.state.user)}\\n'\n                f'Feedback: {self.email_feedback}'\n            )\n        else:\n            prompt = (\n                f'Write a welcome email for the user:\\n'\n                f'{format_as_xml(ctx.state.user)}'\n            )\n\n        result = await email_writer_agent.run(\n            prompt,\n            message_history=ctx.state.write_agent_messages,\n        )\n        ctx.state.write_agent_messages += result.all_messages()\n        return Feedback(result.data)\n\nclass EmailRequiresWrite(BaseModel):\n    feedback: str\n\nclass EmailOk(BaseModel):\n    pass\n\nfeedback_agent = Agent[None, EmailRequiresWrite | EmailOk](\n    'openai:gpt-4o',\n    result_type=EmailRequiresWrite | EmailOk,  # type: ignore\n    system_prompt=(\n        'Review the email and provide feedback, email must reference the users specific interests.'\n    ),\n)\n\n@dataclass\nclass Feedback(BaseNode[State, None, Email]):\n    email: Email\n\n    async def run(\n        self,\n        ctx: GraphRunContext[State],\n    ) -> WriteEmail | End[Email]:\n        prompt = format_as_xml({'user': ctx.state.user, 'email': self.email})\n        result = await feedback_agent.run(prompt)\n        if isinstance(result.data, EmailRequiresWrite):\n            return WriteEmail(email_feedback=result.data.feedback)\n        else:\n            return End(self.email)\n\nasync def main():\n    user = User(\n        name='John Doe',\n        email='john.joe@example.com',\n        interests=['Haskel', 'Lisp', 'Fortran'],\n    )\n    state = State(user)\n    feedback_graph = Graph(nodes=(WriteEmail, Feedback))\n    email, _ = await feedback_graph.run(WriteEmail(), state=state)\n    print(email)\n    \"\"\"\n    Email(\n        subject='Welcome to our tech blog!',\n        body='Hello John, Welcome to our tech blog! ...',\n    )\n    \"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)_\n\n## Custom Control Flow\n\nIn many real-world applications, Graphs cannot run uninterrupted from start to finish — they might require external input, or run over an extended period of time such that a single process cannot execute the entire graph run from start to finish without interruption.\n\nIn these scenarios the [`next`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.next) method can be used to run the graph one node at a time.\n\nIn this example, an AI asks the user a question, the user provides an answer, the AI evaluates the answer and ends if the user got it right or asks another question if they got it wrong.\n\n`ai_q_and_a_graph.py` — `question_graph` definition\n\nai\\_q\\_and\\_a\\_graph.py\n\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass, field\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\n\nask_agent = Agent('openai:gpt-4o', result_type=str)\n\n@dataclass\nclass QuestionState:\n    question: str | None = None\n    ask_agent_messages: list[ModelMessage] = field(default_factory=list)\n    evaluate_agent_messages: list[ModelMessage] = field(default_factory=list)\n\n@dataclass\nclass Ask(BaseNode[QuestionState]):\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Answer:\n        result = await ask_agent.run(\n            'Ask a simple question with a single correct answer.',\n            message_history=ctx.state.ask_agent_messages,\n        )\n        ctx.state.ask_agent_messages += result.all_messages()\n        ctx.state.question = result.data\n        return Answer(result.data)\n\n@dataclass\nclass Answer(BaseNode[QuestionState]):\n    question: str\n    answer: str | None = None\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Evaluate:\n        assert self.answer is not None\n        return Evaluate(self.answer)\n\n@dataclass\nclass EvaluationResult:\n    correct: bool\n    comment: str\n\nevaluate_agent = Agent(\n    'openai:gpt-4o',\n    result_type=EvaluationResult,\n    system_prompt='Given a question and answer, evaluate if the answer is correct.',\n)\n\n@dataclass\nclass Evaluate(BaseNode[QuestionState]):\n    answer: str\n\n    async def run(\n        self,\n        ctx: GraphRunContext[QuestionState],\n    ) -> End[str] | Reprimand:\n        assert ctx.state.question is not None\n        result = await evaluate_agent.run(\n            format_as_xml({'question': ctx.state.question, 'answer': self.answer}),\n            message_history=ctx.state.evaluate_agent_messages,\n        )\n        ctx.state.evaluate_agent_messages += result.all_messages()\n        if result.data.correct:\n            return End(result.data.comment)\n        else:\n            return Reprimand(result.data.comment)\n\n@dataclass\nclass Reprimand(BaseNode[QuestionState]):\n    comment: str\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Ask:\n        print(f'Comment: {self.comment}')\n        ctx.state.question = None\n        return Ask()\n\nquestion_graph = Graph(nodes=(Ask, Answer, Evaluate, Reprimand))\n\n```\n\n_(This example is complete, it can be run \"as is\" with Python 3.10+)_\n\nai\\_q\\_and\\_a\\_run.py\n\n```\nfrom rich.prompt import Prompt\n\nfrom pydantic_graph import End, HistoryStep\n\nfrom ai_q_and_a_graph import Ask, question_graph, QuestionState, Answer\n\nasync def main():\n    state = QuestionState()\n    node = Ask()\n    history: list[HistoryStep[QuestionState]] = []\n    while True:\n        node = await question_graph.next(node, history, state=state)\n        if isinstance(node, Answer):\n            node.answer = Prompt.ask(node.question)\n        elif isinstance(node, End):\n            print(f'Correct answer! {node.data}')\n            #> Correct answer! Well done, 1 + 1 = 2\n            print([e.data_snapshot() for e in history])\n            \"\"\"\n            [\\\n                Ask(),\\\n                Answer(question='What is the capital of France?', answer='Vichy'),\\\n                Evaluate(answer='Vichy'),\\\n                Reprimand(comment='Vichy is no longer the capital of France.'),\\\n                Ask(),\\\n                Answer(question='what is 1 + 1?', answer='2'),\\\n                Evaluate(answer='2'),\\\n            ]\n            \"\"\"\n            return\n        # otherwise just continue\n\n```\n\n_(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)_\n\nA [mermaid diagram](https://ai.pydantic.dev/graph/#mermaid-diagrams) for this graph can be generated with the following code:\n\nai\\_q\\_and\\_a\\_diagram.py\n\n```\nfrom ai_q_and_a_graph import Ask, question_graph\n\nquestion_graph.mermaid_code(start_node=Ask)\n\n```\n\nYou maybe have noticed that although this examples transfers control flow out of the graph run, we're still using [rich's `Prompt.ask`](https://rich.readthedocs.io/en/stable/reference/prompt.html#rich.prompt.PromptBase.ask) to get user input, with the process hanging while we wait for the user to enter a response. For an example of genuine out-of-process control flow, see the [question graph example](https://ai.pydantic.dev/examples/question-graph/).\n\n## Dependency Injection\n\nAs with PydanticAI, `pydantic-graph` supports dependency injection via a generic parameter on [`Graph`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph) and [`BaseNode`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode), and the [`GraphRunContext.deps`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.GraphRunContext.deps) fields.\n\nAs an example of dependency injection, let's modify the `DivisibleBy5` example [above](https://ai.pydantic.dev/graph/#graph) to use a [`ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor) to run the compute load in a separate process (this is a contrived example, `ProcessPoolExecutor` wouldn't actually improve performance in this example):\n\ndeps\\_example.py\n\n```\nfrom __future__ import annotations\n\nimport asyncio\nfrom concurrent.futures import ProcessPoolExecutor\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n@dataclass\nclass GraphDeps:\n    executor: ProcessPoolExecutor\n\n@dataclass\nclass DivisibleBy5(BaseNode[None, None, int]):\n    foo: int\n\n    async def run(\n        self,\n        ctx: GraphRunContext,\n    ) -> Increment | End[int]:\n        if self.foo % 5 == 0:\n            return End(self.foo)\n        else:\n            return Increment(self.foo)\n\n@dataclass\nclass Increment(BaseNode):\n    foo: int\n\n    async def run(self, ctx: GraphRunContext) -> DivisibleBy5:\n        loop = asyncio.get_running_loop()\n        compute_result = await loop.run_in_executor(\n            ctx.deps.executor,\n            self.compute,\n        )\n        return DivisibleBy5(compute_result)\n\n    def compute(self) -> int:\n        return self.foo + 1\n\nfives_graph = Graph(nodes=[DivisibleBy5, Increment])\n\nasync def main():\n    with ProcessPoolExecutor() as executor:\n        deps = GraphDeps(executor)\n        result, history = await fives_graph.run(DivisibleBy5(3), deps=deps)\n    print(result)\n    #> 5\n    # the full history is quite verbose (see below), so we'll just print the summary\n    print([item.data_snapshot() for item in history])\n    \"\"\"\n    [\\\n        DivisibleBy5(foo=3),\\\n        Increment(foo=3),\\\n        DivisibleBy5(foo=4),\\\n        Increment(foo=4),\\\n        DivisibleBy5(foo=5),\\\n        End(data=5),\\\n    ]\n    \"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)_\n\n## Mermaid Diagrams\n\nPydantic Graph can generate [mermaid](https://mermaid.js.org/) [`stateDiagram-v2`](https://mermaid.js.org/syntax/stateDiagram.html) diagrams for graphs, as shown above.\n\nThese diagrams can be generated with:\n\n- [`Graph.mermaid_code`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.mermaid_code) to generate the mermaid code for a graph\n- [`Graph.mermaid_image`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.mermaid_image) to generate an image of the graph using [mermaid.ink](https://mermaid.ink/)\n- [`Graph.mermaid_save`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.mermaid_save) to generate an image of the graph using [mermaid.ink](https://mermaid.ink/) and save it to a file\n\nBeyond the diagrams shown above, you can also customize mermaid diagrams with the following options:\n\n- [`Edge`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.Edge) allows you to apply a label to an edge\n- [`BaseNode.docstring_notes`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode.docstring_notes) and [`BaseNode.get_note`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode.get_note) allows you to add notes to nodes\n- The [`highlighted_nodes`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.mermaid_code) parameter allows you to highlight specific node(s) in the diagram\n\nPutting that together, we can edit the last [`ai_q_and_a_graph.py`](https://ai.pydantic.dev/graph/#custom-control-flow) example to:\n\n- add labels to some edges\n- add a note to the `Ask` node\n- highlight the `Answer` node\n- save the diagram as a `PNG` image to file\n\nai\\_q\\_and\\_a\\_graph\\_extra.py\n\n```\n...\nfrom typing import Annotated\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext, Edge\n\n...\n\n@dataclass\nclass Ask(BaseNode[QuestionState]):\n    \"\"\"Generate question using GPT-4o.\"\"\"\n    docstring_notes = True\n    async def run(\n        self, ctx: GraphRunContext[QuestionState]\n    ) -> Annotated[Answer, Edge(label='Ask the question')]:\n        ...\n\n...\n\n@dataclass\nclass Evaluate(BaseNode[QuestionState]):\n    answer: str\n\n    async def run(\n            self,\n            ctx: GraphRunContext[QuestionState],\n    ) -> Annotated[End[str], Edge(label='success')] | Reprimand:\n        ...\n\n...\n\nquestion_graph.mermaid_save('image.png', highlighted_nodes=[Answer])\n\n```\n\n_(This example is not complete and cannot be run directly)_\n\nWould generate and image that looks like this:\n\n### Setting Direction of the State Diagram\n\nYou can specify the direction of the state diagram using one of the following values:\n\n- `'TB'`: Top to bottom, the diagram flows vertically from top to bottom.\n- `'LR'`: Left to right, the diagram flows horizontally from left to right.\n- `'RL'`: Right to left, the diagram flows horizontally from right to left.\n- `'BT'`: Bottom to top, the diagram flows vertically from bottom to top.\n\nHere is an example of how to do this using 'Left to Right' (LR) instead of the default 'Top to Bottom' (TB)\n\nvending\\_machine\\_diagram.py\n\n```\nfrom vending_machine import InsertCoin, vending_machine_graph\n\nvending_machine_graph.mermaid_code(start_node=InsertCoin, direction='LR')\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/graph/",
      "ogUrl": "https://ai.pydantic.dev/graph/",
      "title": "Graphs - PydanticAI",
      "og:url": "https://ai.pydantic.dev/graph/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/graph.png",
      "ogTitle": "Graphs - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/graph.png",
      "og:title": "Graphs - PydanticAI",
      "scrapeId": "c845df8d-f101-4967-88ba-36dcae65febb",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/graph/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/graph.png",
      "twitter:title": "Graphs - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/pydantic_graph/exceptions/#pydantic_graphexceptions)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_graph.exceptions`\n\n### GraphSetupError\n\nBases: `TypeError`\n\nError caused by an incorrectly configured graph.\n\nSource code in `pydantic_graph/pydantic_graph/exceptions.py`\n\n|     |     |\n| --- | --- |\n| ```<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>``` | ```<br>class GraphSetupError(TypeError):<br>    \"\"\"Error caused by an incorrectly configured graph.\"\"\"<br>    message: str<br>    \"\"\"Description of the mistake.\"\"\"<br>    def __init__(self, message: str):<br>        self.message = message<br>        super().__init__(message)<br>``` |\n\n#### message`instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nDescription of the mistake.\n\n### GraphRuntimeError\n\nBases: `RuntimeError`\n\nError caused by an issue during graph execution.\n\nSource code in `pydantic_graph/pydantic_graph/exceptions.py`\n\n|     |     |\n| --- | --- |\n| ```<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>``` | ```<br>class GraphRuntimeError(RuntimeError):<br>    \"\"\"Error caused by an issue during graph execution.\"\"\"<br>    message: str<br>    \"\"\"The error message.\"\"\"<br>    def __init__(self, message: str):<br>        self.message = message<br>        super().__init__(message)<br>``` |\n\n#### message`instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nThe error message.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/pydantic_graph/exceptions/",
      "ogUrl": "https://ai.pydantic.dev/api/pydantic_graph/exceptions/",
      "title": "pydantic_graph.exceptions - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/pydantic_graph/exceptions/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/exceptions.png",
      "ogTitle": "pydantic_graph.exceptions - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/exceptions.png",
      "og:title": "pydantic_graph.exceptions - PydanticAI",
      "scrapeId": "770682e5-a240-473c-850d-0f87e7dac0d9",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/pydantic_graph/exceptions/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/exceptions.png",
      "twitter:title": "pydantic_graph.exceptions - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/mistral/#pydantic_aimodelsmistral)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.mistral`\n\n## Setup\n\nFor details on how to set up authentication with this model, see [model configuration for Mistral](https://ai.pydantic.dev/models/#mistral).\n\n### LatestMistralModelNames`module-attribute`\n\n```\nLatestMistralModelNames = Literal[\\\n    \"mistral-large-latest\",\\\n    \"mistral-small-latest\",\\\n    \"codestral-latest\",\\\n    \"mistral-moderation-latest\",\\\n]\n\n```\n\nLatest Mistral models.\n\n### MistralModelName`module-attribute`\n\n```\nMistralModelName = Union[str, LatestMistralModelNames]\n\n```\n\nPossible Mistral model names.\n\nSince Mistral supports a variety of date-stamped models, we explicitly list the most popular models but\nallow any name in the type hints.\nSince [the Mistral docs](https://docs.mistral.ai/getting-started/models/models_overview/) for a full list.\n\n### MistralModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Mistral model request.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n\n|     |     |\n| --- | --- |\n| ```<br>87<br>88<br>``` | ```<br>class MistralModelSettings(ModelSettings):<br>    \"\"\"Settings used for a Mistral model request.\"\"\"<br>``` |\n\n### MistralModel`dataclass`\n\nBases: `Model`\n\nA model that uses Mistral.\n\nInternally, this uses the [Mistral Python client](https://github.com/mistralai/client-python) to interact with the API.\n\n[API Documentation](https://docs.mistral.ai/)\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>444<br>445<br>446<br>447<br>448<br>449<br>450<br>451<br>452<br>453<br>454<br>455<br>456<br>457<br>458<br>459<br>460<br>461<br>``` | ````<br>@dataclass(init=False)<br>class MistralModel(Model):<br>    \"\"\"A model that uses Mistral.<br>    Internally, this uses the [Mistral Python client](https://github.com/mistralai/client-python) to interact with the API.<br>    [API Documentation](https://docs.mistral.ai/)<br>    \"\"\"<br>    client: Mistral = field(repr=False)<br>    json_mode_schema_prompt: str = \"\"\"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\"\"<br>    _model_name: MistralModelName = field(repr=False)<br>    _system: str | None = field(default='mistral', repr=False)<br>    def __init__(<br>        self,<br>        model_name: MistralModelName,<br>        *,<br>        api_key: str | Callable[[], str | None] | None = None,<br>        client: Mistral | None = None,<br>        http_client: AsyncHTTPClient | None = None,<br>        json_mode_schema_prompt: str = \"\"\"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\"\",<br>    ):<br>        \"\"\"Initialize a Mistral model.<br>        Args:<br>            model_name: The name of the model to use.<br>            api_key: The API key to use for authentication, if unset uses `MISTRAL_API_KEY` environment variable.<br>            client: An existing `Mistral` client to use, if provided, `api_key` and `http_client` must be `None`.<br>            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>            json_mode_schema_prompt: The prompt to show when the model expects a JSON object as input.<br>        \"\"\"<br>        self._model_name = model_name<br>        self.json_mode_schema_prompt = json_mode_schema_prompt<br>        if client is not None:<br>            assert http_client is None, 'Cannot provide both `mistral_client` and `http_client`'<br>            assert api_key is None, 'Cannot provide both `mistral_client` and `api_key`'<br>            self.client = client<br>        else:<br>            api_key = os.getenv('MISTRAL_API_KEY') if api_key is None else api_key<br>            self.client = Mistral(api_key=api_key, async_client=http_client or cached_async_http_client())<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, Usage]:<br>        \"\"\"Make a non-streaming request to the model from Pydantic AI call.\"\"\"<br>        check_allow_model_requests()<br>        response = await self._completions_create(<br>            messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        return self._process_response(response), _map_usage(response)<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        \"\"\"Make a streaming request to the model from Pydantic AI call.\"\"\"<br>        check_allow_model_requests()<br>        response = await self._stream_completions_create(<br>            messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        async with response:<br>            yield await self._process_streamed_response(model_request_parameters.result_tools, response)<br>    @property<br>    def model_name(self) -> MistralModelName:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>    async def _completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: MistralModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> MistralChatCompletionResponse:<br>        \"\"\"Make a non-streaming request to the model.\"\"\"<br>        response = await self.client.chat.complete_async(<br>            model=str(self._model_name),<br>            messages=list(chain(*(self._map_message(m) for m in messages))),<br>            n=1,<br>            tools=self._map_function_and_result_tools_definition(model_request_parameters) or UNSET,<br>            tool_choice=self._get_tool_choice(model_request_parameters),<br>            stream=False,<br>            max_tokens=model_settings.get('max_tokens', UNSET),<br>            temperature=model_settings.get('temperature', UNSET),<br>            top_p=model_settings.get('top_p', 1),<br>            timeout_ms=self._get_timeout_ms(model_settings.get('timeout')),<br>            random_seed=model_settings.get('seed', UNSET),<br>        )<br>        assert response, 'A unexpected empty response from Mistral.'<br>        return response<br>    async def _stream_completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: MistralModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> MistralEventStreamAsync[MistralCompletionEvent]:<br>        \"\"\"Create a streaming completion request to the Mistral model.\"\"\"<br>        response: MistralEventStreamAsync[MistralCompletionEvent] | None<br>        mistral_messages = list(chain(*(self._map_message(m) for m in messages)))<br>        if (<br>            model_request_parameters.result_tools<br>            and model_request_parameters.function_tools<br>            or model_request_parameters.function_tools<br>        ):<br>            # Function Calling<br>            response = await self.client.chat.stream_async(<br>                model=str(self._model_name),<br>                messages=mistral_messages,<br>                n=1,<br>                tools=self._map_function_and_result_tools_definition(model_request_parameters) or UNSET,<br>                tool_choice=self._get_tool_choice(model_request_parameters),<br>                temperature=model_settings.get('temperature', UNSET),<br>                top_p=model_settings.get('top_p', 1),<br>                max_tokens=model_settings.get('max_tokens', UNSET),<br>                timeout_ms=self._get_timeout_ms(model_settings.get('timeout')),<br>                presence_penalty=model_settings.get('presence_penalty'),<br>                frequency_penalty=model_settings.get('frequency_penalty'),<br>            )<br>        elif model_request_parameters.result_tools:<br>            # Json Mode<br>            parameters_json_schemas = [tool.parameters_json_schema for tool in model_request_parameters.result_tools]<br>            user_output_format_message = self._generate_user_output_format(parameters_json_schemas)<br>            mistral_messages.append(user_output_format_message)<br>            response = await self.client.chat.stream_async(<br>                model=str(self._model_name),<br>                messages=mistral_messages,<br>                response_format={'type': 'json_object'},<br>                stream=True,<br>            )<br>        else:<br>            # Stream Mode<br>            response = await self.client.chat.stream_async(<br>                model=str(self._model_name),<br>                messages=mistral_messages,<br>                stream=True,<br>            )<br>        assert response, 'A unexpected empty response from Mistral.'<br>        return response<br>    def _get_tool_choice(self, model_request_parameters: ModelRequestParameters) -> MistralToolChoiceEnum | None:<br>        \"\"\"Get tool choice for the model.<br>        - \"auto\": Default mode. Model decides if it uses the tool or not.<br>        - \"any\": Select any tool.<br>        - \"none\": Prevents tool use.<br>        - \"required\": Forces tool use.<br>        \"\"\"<br>        if not model_request_parameters.function_tools and not model_request_parameters.result_tools:<br>            return None<br>        elif not model_request_parameters.allow_text_result:<br>            return 'required'<br>        else:<br>            return 'auto'<br>    def _map_function_and_result_tools_definition(<br>        self, model_request_parameters: ModelRequestParameters<br>    ) -> list[MistralTool] | None:<br>        \"\"\"Map function and result tools to MistralTool format.<br>        Returns None if both function_tools and result_tools are empty.<br>        \"\"\"<br>        all_tools: list[ToolDefinition] = (<br>            model_request_parameters.function_tools + model_request_parameters.result_tools<br>        )<br>        tools = [<br>            MistralTool(<br>                function=MistralFunction(name=r.name, parameters=r.parameters_json_schema, description=r.description)<br>            )<br>            for r in all_tools<br>        ]<br>        return tools if tools else None<br>    def _process_response(self, response: MistralChatCompletionResponse) -> ModelResponse:<br>        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"<br>        assert response.choices, 'Unexpected empty response choice.'<br>        if response.created:<br>            timestamp = datetime.fromtimestamp(response.created, tz=timezone.utc)<br>        else:<br>            timestamp = _now_utc()<br>        choice = response.choices[0]<br>        content = choice.message.content<br>        tool_calls = choice.message.tool_calls<br>        parts: list[ModelResponsePart] = []<br>        if text := _map_content(content):<br>            parts.append(TextPart(content=text))<br>        if isinstance(tool_calls, list):<br>            for tool_call in tool_calls:<br>                tool = self._map_mistral_to_pydantic_tool_call(tool_call=tool_call)<br>                parts.append(tool)<br>        return ModelResponse(parts, model_name=response.model, timestamp=timestamp)<br>    async def _process_streamed_response(<br>        self,<br>        result_tools: list[ToolDefinition],<br>        response: MistralEventStreamAsync[MistralCompletionEvent],<br>    ) -> StreamedResponse:<br>        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"<br>        peekable_response = _utils.PeekableAsyncStream(response)<br>        first_chunk = await peekable_response.peek()<br>        if isinstance(first_chunk, _utils.Unset):<br>            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')<br>        if first_chunk.data.created:<br>            timestamp = datetime.fromtimestamp(first_chunk.data.created, tz=timezone.utc)<br>        else:<br>            timestamp = datetime.now(tz=timezone.utc)<br>        return MistralStreamedResponse(<br>            _response=peekable_response,<br>            _model_name=self._model_name,<br>            _timestamp=timestamp,<br>            _result_tools={c.name: c for c in result_tools},<br>        )<br>    @staticmethod<br>    def _map_mistral_to_pydantic_tool_call(tool_call: MistralToolCall) -> ToolCallPart:<br>        \"\"\"Maps a MistralToolCall to a ToolCall.\"\"\"<br>        tool_call_id = tool_call.id or None<br>        func_call = tool_call.function<br>        return ToolCallPart(func_call.name, func_call.arguments, tool_call_id)<br>    @staticmethod<br>    def _map_pydantic_to_mistral_tool_call(t: ToolCallPart) -> MistralToolCall:<br>        \"\"\"Maps a pydantic-ai ToolCall to a MistralToolCall.\"\"\"<br>        return MistralToolCall(<br>            id=t.tool_call_id,<br>            type='function',<br>            function=MistralFunctionCall(name=t.tool_name, arguments=t.args),<br>        )<br>    def _generate_user_output_format(self, schemas: list[dict[str, Any]]) -> MistralUserMessage:<br>        \"\"\"Get a message with an example of the expected output format.\"\"\"<br>        examples: list[dict[str, Any]] = []<br>        for schema in schemas:<br>            typed_dict_definition: dict[str, Any] = {}<br>            for key, value in schema.get('properties', {}).items():<br>                typed_dict_definition[key] = self._get_python_type(value)<br>            examples.append(typed_dict_definition)<br>        example_schema = examples[0] if len(examples) == 1 else examples<br>        return MistralUserMessage(content=self.json_mode_schema_prompt.format(schema=example_schema))<br>    @classmethod<br>    def _get_python_type(cls, value: dict[str, Any]) -> str:<br>        \"\"\"Return a string representation of the Python type for a single JSON schema property.<br>        This function handles recursion for nested arrays/objects and `anyOf`.<br>        \"\"\"<br>        # 1) Handle anyOf first, because it's a different schema structure<br>        if any_of := value.get('anyOf'):<br>            # Simplistic approach: pick the first option in anyOf<br>            # (In reality, you'd possibly want to merge or union types)<br>            return f'Optional[{cls._get_python_type(any_of[0])}]'<br>        # 2) If we have a top-level \"type\" field<br>        value_type = value.get('type')<br>        if not value_type:<br>            # No explicit type; fallback<br>            return 'Any'<br>        # 3) Direct simple type mapping (string, integer, float, bool, None)<br>        if value_type in SIMPLE_JSON_TYPE_MAPPING and value_type != 'array' and value_type != 'object':<br>            return SIMPLE_JSON_TYPE_MAPPING[value_type]<br>        # 4) Array: Recursively get the item type<br>        if value_type == 'array':<br>            items = value.get('items', {})<br>            return f'list[{cls._get_python_type(items)}]'<br>        # 5) Object: Check for additionalProperties<br>        if value_type == 'object':<br>            additional_properties = value.get('additionalProperties', {})<br>            additional_properties_type = additional_properties.get('type')<br>            if (<br>                additional_properties_type in SIMPLE_JSON_TYPE_MAPPING<br>                and additional_properties_type != 'array'<br>                and additional_properties_type != 'object'<br>            ):<br>                # dict[str, bool/int/float/etc...]<br>                return f'dict[str, {SIMPLE_JSON_TYPE_MAPPING[additional_properties_type]}]'<br>            elif additional_properties_type == 'array':<br>                array_items = additional_properties.get('items', {})<br>                return f'dict[str, list[{cls._get_python_type(array_items)}]]'<br>            elif additional_properties_type == 'object':<br>                # nested dictionary of unknown shape<br>                return 'dict[str, dict[str, Any]]'<br>            else:<br>                # If no additionalProperties type or something else, default to a generic dict<br>                return 'dict[str, Any]'<br>        # 6) Fallback<br>        return 'Any'<br>    @staticmethod<br>    def _get_timeout_ms(timeout: Timeout | float | None) -> int | None:<br>        \"\"\"Convert a timeout to milliseconds.\"\"\"<br>        if timeout is None:<br>            return None<br>        if isinstance(timeout, float):<br>            return int(1000 * timeout)<br>        raise NotImplementedError('Timeout object is not yet supported for MistralModel.')<br>    @classmethod<br>    def _map_user_message(cls, message: ModelRequest) -> Iterable[MistralMessages]:<br>        for part in message.parts:<br>            if isinstance(part, SystemPromptPart):<br>                yield MistralSystemMessage(content=part.content)<br>            elif isinstance(part, UserPromptPart):<br>                yield MistralUserMessage(content=part.content)<br>            elif isinstance(part, ToolReturnPart):<br>                yield MistralToolMessage(<br>                    tool_call_id=part.tool_call_id,<br>                    content=part.model_response_str(),<br>                )<br>            elif isinstance(part, RetryPromptPart):<br>                if part.tool_name is None:<br>                    yield MistralUserMessage(content=part.model_response())<br>                else:<br>                    yield MistralToolMessage(<br>                        tool_call_id=part.tool_call_id,<br>                        content=part.model_response(),<br>                    )<br>            else:<br>                assert_never(part)<br>    @classmethod<br>    def _map_message(cls, message: ModelMessage) -> Iterable[MistralMessages]:<br>        \"\"\"Just maps a `pydantic_ai.Message` to a `MistralMessage`.\"\"\"<br>        if isinstance(message, ModelRequest):<br>            yield from cls._map_user_message(message)<br>        elif isinstance(message, ModelResponse):<br>            content_chunks: list[MistralContentChunk] = []<br>            tool_calls: list[MistralToolCall] = []<br>            for part in message.parts:<br>                if isinstance(part, TextPart):<br>                    content_chunks.append(MistralTextChunk(text=part.content))<br>                elif isinstance(part, ToolCallPart):<br>                    tool_calls.append(cls._map_pydantic_to_mistral_tool_call(part))<br>                else:<br>                    assert_never(part)<br>            yield MistralAssistantMessage(content=content_chunks, tool_calls=tool_calls)<br>        else:<br>            assert_never(message)<br>```` |\n\n#### \\_\\_init\\_\\_\n\n````\n__init__(\n    model_name: MistralModelName,\n    *,\n    api_key: str | Callable[[], str | None] | None = None,\n    client: Mistral | None = None,\n    http_client: AsyncClient | None = None,\n    json_mode_schema_prompt: str = \"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\n)\n\n````\n\nInitialize a Mistral model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `MistralModelName` | The name of the model to use. | _required_ |\n| `api_key` | `str | Callable[[], str | None] | None` | The API key to use for authentication, if unset uses `MISTRAL_API_KEY` environment variable. | `None` |\n| `client` | `Mistral | None` | An existing `Mistral` client to use, if provided, `api_key` and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n| `json_mode_schema_prompt` | `str` | The prompt to show when the model expects a JSON object as input. | ````'Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n'```` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n\n|     |     |\n| --- | --- |\n| ```<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>``` | ````<br>def __init__(<br>    self,<br>    model_name: MistralModelName,<br>    *,<br>    api_key: str | Callable[[], str | None] | None = None,<br>    client: Mistral | None = None,<br>    http_client: AsyncHTTPClient | None = None,<br>    json_mode_schema_prompt: str = \"\"\"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\"\",<br>):<br>    \"\"\"Initialize a Mistral model.<br>    Args:<br>        model_name: The name of the model to use.<br>        api_key: The API key to use for authentication, if unset uses `MISTRAL_API_KEY` environment variable.<br>        client: An existing `Mistral` client to use, if provided, `api_key` and `http_client` must be `None`.<br>        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>        json_mode_schema_prompt: The prompt to show when the model expects a JSON object as input.<br>    \"\"\"<br>    self._model_name = model_name<br>    self.json_mode_schema_prompt = json_mode_schema_prompt<br>    if client is not None:<br>        assert http_client is None, 'Cannot provide both `mistral_client` and `http_client`'<br>        assert api_key is None, 'Cannot provide both `mistral_client` and `api_key`'<br>        self.client = client<br>    else:<br>        api_key = os.getenv('MISTRAL_API_KEY') if api_key is None else api_key<br>        self.client = Mistral(api_key=api_key, async_client=http_client or cached_async_http_client())<br>```` |\n\n#### request`async`\n\n```\nrequest(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]\n\n```\n\nMake a non-streaming request to the model from Pydantic AI call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n\n|     |     |\n| --- | --- |\n| ```<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>``` | ```<br>async def request(<br>    self,<br>    messages: list[ModelMessage],<br>    model_settings: ModelSettings | None,<br>    model_request_parameters: ModelRequestParameters,<br>) -> tuple[ModelResponse, Usage]:<br>    \"\"\"Make a non-streaming request to the model from Pydantic AI call.\"\"\"<br>    check_allow_model_requests()<br>    response = await self._completions_create(<br>        messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters<br>    )<br>    return self._process_response(response), _map_usage(response)<br>``` |\n\n#### request\\_stream`async`\n\n```\nrequest_stream(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]\n\n```\n\nMake a streaming request to the model from Pydantic AI call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n\n|     |     |\n| --- | --- |\n| ```<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>``` | ```<br>@asynccontextmanager<br>async def request_stream(<br>    self,<br>    messages: list[ModelMessage],<br>    model_settings: ModelSettings | None,<br>    model_request_parameters: ModelRequestParameters,<br>) -> AsyncIterator[StreamedResponse]:<br>    \"\"\"Make a streaming request to the model from Pydantic AI call.\"\"\"<br>    check_allow_model_requests()<br>    response = await self._stream_completions_create(<br>        messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters<br>    )<br>    async with response:<br>        yield await self._process_streamed_response(model_request_parameters.result_tools, response)<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: MistralModelName\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### MistralStreamedResponse`dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for Mistral models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n\n|     |     |\n| --- | --- |\n| ```<br>467<br>468<br>469<br>470<br>471<br>472<br>473<br>474<br>475<br>476<br>477<br>478<br>479<br>480<br>481<br>482<br>483<br>484<br>485<br>486<br>487<br>488<br>489<br>490<br>491<br>492<br>493<br>494<br>495<br>496<br>497<br>498<br>499<br>500<br>501<br>502<br>503<br>504<br>505<br>506<br>507<br>508<br>509<br>510<br>511<br>512<br>513<br>514<br>515<br>516<br>517<br>518<br>519<br>520<br>521<br>522<br>523<br>524<br>525<br>526<br>527<br>528<br>529<br>530<br>531<br>532<br>533<br>534<br>535<br>536<br>537<br>538<br>539<br>540<br>541<br>542<br>543<br>544<br>545<br>546<br>547<br>548<br>549<br>550<br>551<br>552<br>553<br>554<br>555<br>556<br>557<br>558<br>559<br>560<br>561<br>562<br>563<br>564<br>565<br>566<br>567<br>``` | ```<br>@dataclass<br>class MistralStreamedResponse(StreamedResponse):<br>    \"\"\"Implementation of `StreamedResponse` for Mistral models.\"\"\"<br>    _model_name: MistralModelName<br>    _response: AsyncIterable[MistralCompletionEvent]<br>    _timestamp: datetime<br>    _result_tools: dict[str, ToolDefinition]<br>    _delta_content: str = field(default='', init=False)<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        chunk: MistralCompletionEvent<br>        async for chunk in self._response:<br>            self._usage += _map_usage(chunk.data)<br>            try:<br>                choice = chunk.data.choices[0]<br>            except IndexError:<br>                continue<br>            # Handle the text part of the response<br>            content = choice.delta.content<br>            text = _map_content(content)<br>            if text:<br>                # Attempt to produce a result tool call from the received text<br>                if self._result_tools:<br>                    self._delta_content += text<br>                    maybe_tool_call_part = self._try_get_result_tool_from_text(self._delta_content, self._result_tools)<br>                    if maybe_tool_call_part:<br>                        yield self._parts_manager.handle_tool_call_part(<br>                            vendor_part_id='result',<br>                            tool_name=maybe_tool_call_part.tool_name,<br>                            args=maybe_tool_call_part.args_as_dict(),<br>                            tool_call_id=maybe_tool_call_part.tool_call_id,<br>                        )<br>                else:<br>                    yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=text)<br>            # Handle the explicit tool calls<br>            for index, dtc in enumerate(choice.delta.tool_calls or []):<br>                # It seems that mistral just sends full tool calls, so we just use them directly, rather than building<br>                yield self._parts_manager.handle_tool_call_part(<br>                    vendor_part_id=index, tool_name=dtc.function.name, args=dtc.function.arguments, tool_call_id=dtc.id<br>                )<br>    @property<br>    def model_name(self) -> MistralModelName:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        return self._model_name<br>    @property<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._timestamp<br>    @staticmethod<br>    def _try_get_result_tool_from_text(text: str, result_tools: dict[str, ToolDefinition]) -> ToolCallPart | None:<br>        output_json: dict[str, Any] | None = pydantic_core.from_json(text, allow_partial='trailing-strings')<br>        if output_json:<br>            for result_tool in result_tools.values():<br>                # NOTE: Additional verification to prevent JSON validation to crash in `_result.py`<br>                # Ensures required parameters in the JSON schema are respected, especially for stream-based return types.<br>                # Example with BaseModel and required fields.<br>                if not MistralStreamedResponse._validate_required_json_schema(<br>                    output_json, result_tool.parameters_json_schema<br>                ):<br>                    continue<br>                # The following part_id will be thrown away<br>                return ToolCallPart(tool_name=result_tool.name, args=output_json)<br>    @staticmethod<br>    def _validate_required_json_schema(json_dict: dict[str, Any], json_schema: dict[str, Any]) -> bool:<br>        \"\"\"Validate that all required parameters in the JSON schema are present in the JSON dictionary.\"\"\"<br>        required_params = json_schema.get('required', [])<br>        properties = json_schema.get('properties', {})<br>        for param in required_params:<br>            if param not in json_dict:<br>                return False<br>            param_schema = properties.get(param, {})<br>            param_type = param_schema.get('type')<br>            param_items_type = param_schema.get('items', {}).get('type')<br>            if param_type == 'array' and param_items_type:<br>                if not isinstance(json_dict[param], list):<br>                    return False<br>                for item in json_dict[param]:<br>                    if not isinstance(item, VALID_JSON_TYPE_MAPPING[param_items_type]):<br>                        return False<br>            elif param_type and not isinstance(json_dict[param], VALID_JSON_TYPE_MAPPING[param_type]):<br>                return False<br>            if isinstance(json_dict[param], dict) and 'properties' in param_schema:<br>                nested_schema = param_schema<br>                if not MistralStreamedResponse._validate_required_json_schema(json_dict[param], nested_schema):<br>                    return False<br>        return True<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: MistralModelName\n\n```\n\nGet the model name of the response.\n\n#### timestamp`property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/mistral/",
      "ogUrl": "https://ai.pydantic.dev/api/models/mistral/",
      "title": "pydantic_ai.models.mistral - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/mistral/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/mistral.png",
      "ogTitle": "pydantic_ai.models.mistral - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/mistral.png",
      "og:title": "pydantic_ai.models.mistral - PydanticAI",
      "scrapeId": "3d302140-ecd8-4829-8c57-63da13c41f34",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/mistral/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/mistral.png",
      "twitter:title": "pydantic_ai.models.mistral - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/install/#installation)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Installation\n\nPydanticAI is available on PyPI as [`pydantic-ai`](https://pypi.org/project/pydantic-ai/) so installation is as simple as:\n\n[pip](https://ai.pydantic.dev/install/#__tabbed_1_1)[uv](https://ai.pydantic.dev/install/#__tabbed_1_2)\n\n```\npip install pydantic-ai\n\n```\n\n```\nuv add pydantic-ai\n\n```\n\n(Requires Python 3.9+)\n\nThis installs the `pydantic_ai` package, core dependencies, and libraries required to use all the models\nincluded in PydanticAI. If you want to use a specific model, you can install the [\"slim\"](https://ai.pydantic.dev/install/#slim-install) version of PydanticAI.\n\n## Use with Pydantic Logfire\n\nPydanticAI has an excellent (but completely optional) integration with [Pydantic Logfire](https://pydantic.dev/logfire) to help you view and understand agent runs.\n\nTo use Logfire with PydanticAI, install `pydantic-ai` or `pydantic-ai-slim` with the `logfire` optional group:\n\n[pip](https://ai.pydantic.dev/install/#__tabbed_2_1)[uv](https://ai.pydantic.dev/install/#__tabbed_2_2)\n\n```\npip install 'pydantic-ai[logfire]'\n\n```\n\n```\nuv add 'pydantic-ai[logfire]'\n\n```\n\nFrom there, follow the [Logfire setup docs](https://ai.pydantic.dev/logfire/#using-logfire) to configure Logfire.\n\n## Running Examples\n\nWe distribute the [`pydantic_ai_examples`](https://github.com/pydantic/pydantic-ai/tree/main/examples/pydantic_ai_examples) directory as a separate PyPI package ( [`pydantic-ai-examples`](https://pypi.org/project/pydantic-ai-examples/)) to make examples extremely easy to customize and run.\n\nTo install examples, use the `examples` optional group:\n\n[pip](https://ai.pydantic.dev/install/#__tabbed_3_1)[uv](https://ai.pydantic.dev/install/#__tabbed_3_2)\n\n```\npip install 'pydantic-ai[examples]'\n\n```\n\n```\nuv add 'pydantic-ai[examples]'\n\n```\n\nTo run the examples, follow instructions in the [examples docs](https://ai.pydantic.dev/examples/).\n\n## Slim Install\n\nIf you know which model you're going to use and want to avoid installing superfluous packages, you can use the [`pydantic-ai-slim`](https://pypi.org/project/pydantic-ai-slim/) package.\nFor example, if you're using just [`OpenAIModel`](https://ai.pydantic.dev/api/models/openai/#pydantic_ai.models.openai.OpenAIModel), you would run:\n\n[pip](https://ai.pydantic.dev/install/#__tabbed_4_1)[uv](https://ai.pydantic.dev/install/#__tabbed_4_2)\n\n```\npip install 'pydantic-ai-slim[openai]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[openai]'\n\n```\n\n`pydantic-ai-slim` has the following optional groups:\n\n- `logfire` — installs [`logfire`](https://ai.pydantic.dev/logfire/) [PyPI ↗](https://pypi.org/project/logfire)\n- `openai` — installs `openai` [PyPI ↗](https://pypi.org/project/openai)\n- `vertexai` — installs `google-auth` [PyPI ↗](https://pypi.org/project/google-auth) and `requests` [PyPI ↗](https://pypi.org/project/requests)\n- `anthropic` — installs `anthropic` [PyPI ↗](https://pypi.org/project/anthropic)\n- `groq` — installs `groq` [PyPI ↗](https://pypi.org/project/groq)\n- `mistral` — installs `mistralai` [PyPI ↗](https://pypi.org/project/mistralai)\n- `cohere` \\- installs `cohere` [PyPI ↗](https://pypi.org/project/cohere)\n\nSee the [models](https://ai.pydantic.dev/models/) documentation for information on which optional dependencies are required for each model.\n\nYou can also install dependencies for multiple models and use cases, for example:\n\n[pip](https://ai.pydantic.dev/install/#__tabbed_5_1)[uv](https://ai.pydantic.dev/install/#__tabbed_5_2)\n\n```\npip install 'pydantic-ai-slim[openai,vertexai,logfire]'\n\n```\n\n```\nuv add 'pydantic-ai-slim[openai,vertexai,logfire]'\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/install/",
      "ogUrl": "https://ai.pydantic.dev/install/",
      "title": "Installation - PydanticAI",
      "og:url": "https://ai.pydantic.dev/install/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/install.png",
      "ogTitle": "Installation - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/install.png",
      "og:title": "Installation - PydanticAI",
      "scrapeId": "78bf468f-e2cf-4b51-8228-4c5d0aded7d3",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/install/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/install.png",
      "twitter:title": "Installation - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/logfire/#debugging-and-monitoring)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Debugging and Monitoring\n\nApplications that use LLMs have some challenges that are well known and understood: LLMs are **slow**, **unreliable** and **expensive**.\n\nThese applications also have some challenges that most developers have encountered much less often: LLMs are **fickle** and **non-deterministic**. Subtle changes in a prompt can completely change a model's performance, and there's no `EXPLAIN` query you can run to understand why.\n\nWarning\n\nFrom a software engineers point of view, you can think of LLMs as the worst database you've ever heard of, but worse.\n\nIf LLMs weren't so bloody useful, we'd never touch them.\n\nTo build successful applications with LLMs, we need new tools to understand both model performance, and the behavior of applications that rely on them.\n\nLLM Observability tools that just let you understand how your model is performing are useless: making API calls to an LLM is easy, it's building that into an application that's hard.\n\n## Pydantic Logfire\n\n[Pydantic Logfire](https://pydantic.dev/logfire) is an observability platform developed by the team who created and maintain Pydantic and PydanticAI. Logfire aims to let you understand your entire application: Gen AI, classic predictive AI, HTTP traffic, database queries and everything else a modern application needs.\n\nPydantic Logfire is a commercial product\n\nLogfire is a commercially supported, hosted platform with an extremely generous and perpetual [free tier](https://pydantic.dev/pricing/).\nYou can sign up and start using Logfire in a couple of minutes.\n\nPydanticAI has built-in (but optional) support for Logfire via the [`logfire-api`](https://github.com/pydantic/logfire/tree/main/logfire-api) no-op package.\n\nThat means if the `logfire` package is installed and configured, detailed information about agent runs is sent to Logfire. But if the `logfire` package is not installed, there's virtually no overhead and nothing is sent.\n\nHere's an example showing details of running the [Weather Agent](https://ai.pydantic.dev/examples/weather-agent/) in Logfire:\n\n[![Weather Agent Logfire](https://ai.pydantic.dev/img/logfire-weather-agent.png)](https://ai.pydantic.dev/img/logfire-weather-agent.png)\n\n## Using Logfire\n\nTo use logfire, you'll need a logfire [account](https://logfire.pydantic.dev/), and logfire installed:\n\n[pip](https://ai.pydantic.dev/logfire/#__tabbed_1_1)[uv](https://ai.pydantic.dev/logfire/#__tabbed_1_2)\n\n```\npip install 'pydantic-ai[logfire]'\n\n```\n\n```\nuv add 'pydantic-ai[logfire]'\n\n```\n\nThen authenticate your local environment with logfire:\n\n[pip](https://ai.pydantic.dev/logfire/#__tabbed_2_1)[uv](https://ai.pydantic.dev/logfire/#__tabbed_2_2)\n\n```\n logfire auth\n\n```\n\n```\nuv run logfire auth\n\n```\n\nAnd configure a project to send data to:\n\n[pip](https://ai.pydantic.dev/logfire/#__tabbed_3_1)[uv](https://ai.pydantic.dev/logfire/#__tabbed_3_2)\n\n```\n logfire projects new\n\n```\n\n```\nuv run logfire projects new\n\n```\n\n(Or use an existing project with `logfire projects use`)\n\nThe last step is to add logfire to your code:\n\nadding\\_logfire.py\n\n```\nimport logfire\n\nlogfire.configure()\n\n```\n\nThe [logfire documentation](https://logfire.pydantic.dev/docs/) has more details on how to use logfire,\nincluding how to instrument other libraries like [Pydantic](https://logfire.pydantic.dev/docs/integrations/pydantic/),\n[HTTPX](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/) and [FastAPI](https://logfire.pydantic.dev/docs/integrations/web-frameworks/fastapi/).\n\nSince Logfire is build on [OpenTelemetry](https://opentelemetry.io/), you can use the Logfire Python SDK to send data to any OpenTelemetry collector.\n\nOnce you have logfire set up, there are two primary ways it can help you understand your application:\n\n- **Debugging** — Using the live view to see what's happening in your application in real-time.\n- **Monitoring** — Using SQL and dashboards to observe the behavior of your application, Logfire is effectively a SQL database that stores information about how your application is running.\n\n### Debugging\n\nTo demonstrate how Logfire can let you visualise the flow of a PydanticAI run, here's the view you get from Logfire while running the [chat app examples](https://ai.pydantic.dev/examples/chat-app/):\n\n### Monitoring Performance\n\nWe can also query data with SQL in Logfire to monitor the performance of an application. Here's a real world example of using Logfire to monitor PydanticAI runs inside Logfire itself:\n\n[![Logfire monitoring PydanticAI](https://ai.pydantic.dev/img/logfire-monitoring-pydanticai.png)](https://ai.pydantic.dev/img/logfire-monitoring-pydanticai.png)\n\n### Monitoring HTTPX Requests\n\nIn order to monitor HTTPX requests made by models, you can use `logfire`'s [HTTPX](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/) integration.\n\nInstrumentation is as easy as adding the following three lines to your application:\n\ninstrument\\_httpx.py\n\n```\nimport logfire\nlogfire.configure()\nlogfire.instrument_httpx(capture_all=True)\n\n```\n\nIn particular, this can help you to trace specific requests, responses, and headers:\n\ninstrument\\_httpx\\_example.py\n\n```\nimport logfire\nfrom pydantic_ai import Agent\n\nlogfire.configure()\nlogfire.instrument_httpx(capture_all=True)\n\nagent = Agent('openai:gpt-4o')\nresult = agent.run_sync('What is the capital of France?')\nprint(result.data)\n#> The capital of France is Paris.\n\n```\n\n[With `httpx` instrumentation](https://ai.pydantic.dev/logfire/#__tabbed_4_1)[Without `httpx` instrumentation](https://ai.pydantic.dev/logfire/#__tabbed_4_2)\n\n[![Logfire with HTTPX instrumentation](https://ai.pydantic.dev/img/logfire-with-httpx.png)](https://ai.pydantic.dev/img/logfire-with-httpx.png)\n\n[![Logfire without HTTPX instrumentation](https://ai.pydantic.dev/img/logfire-without-httpx.png)](https://ai.pydantic.dev/img/logfire-without-httpx.png)\n\nTip\n\n`httpx` instrumentation might be of particular utility if you're using a custom `httpx` client in your model in order to get insights into your custom requests.",
    "metadata": {
      "url": "https://ai.pydantic.dev/logfire/",
      "ogUrl": "https://ai.pydantic.dev/logfire/",
      "title": "Debugging and Monitoring - PydanticAI",
      "og:url": "https://ai.pydantic.dev/logfire/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/logfire.png",
      "ogTitle": "Debugging and Monitoring - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/logfire.png",
      "og:title": "Debugging and Monitoring - PydanticAI",
      "scrapeId": "224df719-e48b-4e27-992a-d97bad952441",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/logfire/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/logfire.png",
      "twitter:title": "Debugging and Monitoring - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/multi-agent-applications/#multi-agent-applications)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Multi-agent Applications\n\nThere are roughly four levels of complexity when building applications with PydanticAI:\n\n1. Single agent workflows — what most of the `pydantic_ai` documentation covers\n2. [Agent delegation](https://ai.pydantic.dev/multi-agent-applications/#agent-delegation) — agents using another agent via tools\n3. [Programmatic agent hand-off](https://ai.pydantic.dev/multi-agent-applications/#programmatic-agent-hand-off) — one agent runs, then application code calls another agent\n4. [Graph based control flow](https://ai.pydantic.dev/graph/) — for the most complex cases, a graph-based state machine can be used to control the execution of multiple agents\n\nOf course, you can combine multiple strategies in a single application.\n\n## Agent delegation\n\n\"Agent delegation\" refers to the scenario where an agent delegates work to another agent, then takes back control when the delegate agent (the agent called from within a tool) finishes.\n\nSince agents are stateless and designed to be global, you do not need to include the agent itself in agent [dependencies](https://ai.pydantic.dev/dependencies/).\n\nYou'll generally want to pass [`ctx.usage`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext.usage) to the [`usage`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run) keyword argument of the delegate agent run so usage within that run counts towards the total usage of the parent agent run.\n\nMultiple models\n\nAgent delegation doesn't need to use the same model for each agent. If you choose to use different models within a run, calculating the monetary cost from the final [`result.usage()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult.usage) of the run will not be possible, but you can still use [`UsageLimits`](https://ai.pydantic.dev/api/usage/#pydantic_ai.usage.UsageLimits) to avoid unexpected costs.\n\nagent\\_delegation\\_simple.py\n\n```\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.usage import UsageLimits\n\njoke_selection_agent = Agent(\n    'openai:gpt-4o',\n    system_prompt=(\n        'Use the `joke_factory` to generate some jokes, then choose the best. '\n        'You must return just a single joke.'\n    ),\n)\njoke_generation_agent = Agent(\n    'google-gla:gemini-1.5-flash', result_type=list[str]\n)\n\n@joke_selection_agent.tool\nasync def joke_factory(ctx: RunContext[None], count: int) -> list[str]:\n    r = await joke_generation_agent.run(\n        f'Please generate {count} jokes.',\n        usage=ctx.usage,\n    )\n    return r.data\n\nresult = joke_selection_agent.run_sync(\n    'Tell me a joke.',\n    usage_limits=UsageLimits(request_limit=5, total_tokens_limit=300),\n)\nprint(result.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\nprint(result.usage())\n\"\"\"\nUsage(\n    requests=3, request_tokens=204, response_tokens=24, total_tokens=228, details=None\n)\n\"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nThe control flow for this example is pretty simple and can be summarised as follows:\n\n### Agent delegation and dependencies\n\nGenerally the delegate agent needs to either have the same [dependencies](https://ai.pydantic.dev/dependencies/) as the calling agent, or dependencies which are a subset of the calling agent's dependencies.\n\nInitializing dependencies\n\nWe say \"generally\" above since there's nothing to stop you initializing dependencies within a tool call and therefore using interdependencies in a delegate agent that are not available on the parent, this should often be avoided since it can be significantly slower than reusing connections etc. from the parent agent.\n\nagent\\_delegation\\_deps.py\n\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n@dataclass\nclass ClientAndKey:\n    http_client: httpx.AsyncClient\n    api_key: str\n\njoke_selection_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=ClientAndKey,\n    system_prompt=(\n        'Use the `joke_factory` tool to generate some jokes on the given subject, '\n        'then choose the best. You must return just a single joke.'\n    ),\n)\njoke_generation_agent = Agent(\n    'gemini-1.5-flash',\n    deps_type=ClientAndKey,\n    result_type=list[str],\n    system_prompt=(\n        'Use the \"get_jokes\" tool to get some jokes on the given subject, '\n        'then extract each joke into a list.'\n    ),\n)\n\n@joke_selection_agent.tool\nasync def joke_factory(ctx: RunContext[ClientAndKey], count: int) -> list[str]:\n    r = await joke_generation_agent.run(\n        f'Please generate {count} jokes.',\n        deps=ctx.deps,\n        usage=ctx.usage,\n    )\n    return r.data\n\n@joke_generation_agent.tool\nasync def get_jokes(ctx: RunContext[ClientAndKey], count: int) -> str:\n    response = await ctx.deps.http_client.get(\n        'https://example.com',\n        params={'count': count},\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n    )\n    response.raise_for_status()\n    return response.text\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = ClientAndKey(client, 'foobar')\n        result = await joke_selection_agent.run('Tell me a joke.', deps=deps)\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n        print(result.usage())\n        \"\"\"\n        Usage(\n            requests=4,\n            request_tokens=309,\n            response_tokens=32,\n            total_tokens=341,\n            details=None,\n        )\n        \"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\nThis example shows how even a fairly simple agent delegation can lead to a complex control flow:\n\n## Programmatic agent hand-off\n\n\"Programmatic agent hand-off\" refers to the scenario where multiple agents are called in succession, with application code and/or a human in the loop responsible for deciding which agent to call next.\n\nHere agents don't need to use the same deps.\n\nHere we show two agents used in succession, the first to find a flight and the second to extract the user's seat preference.\n\nprogrammatic\\_handoff.py\n\n```\nfrom typing import Literal, Union\n\nfrom pydantic import BaseModel, Field\nfrom rich.prompt import Prompt\n\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.messages import ModelMessage\nfrom pydantic_ai.usage import Usage, UsageLimits\n\nclass FlightDetails(BaseModel):\n    flight_number: str\n\nclass Failed(BaseModel):\n    \"\"\"Unable to find a satisfactory choice.\"\"\"\n\nflight_search_agent = Agent[None, Union[FlightDetails, Failed]](\n    'openai:gpt-4o',\n    result_type=Union[FlightDetails, Failed],  # type: ignore\n    system_prompt=(\n        'Use the \"flight_search\" tool to find a flight '\n        'from the given origin to the given destination.'\n    ),\n)\n\n@flight_search_agent.tool\nasync def flight_search(\n    ctx: RunContext[None], origin: str, destination: str\n) -> Union[FlightDetails, None]:\n    # in reality, this would call a flight search API or\n    # use a browser to scrape a flight search website\n    return FlightDetails(flight_number='AK456')\n\nusage_limits = UsageLimits(request_limit=15)\n\nasync def find_flight(usage: Usage) -> Union[FlightDetails, None]:\n    message_history: Union[list[ModelMessage], None] = None\n    for _ in range(3):\n        prompt = Prompt.ask(\n            'Where would you like to fly from and to?',\n        )\n        result = await flight_search_agent.run(\n            prompt,\n            message_history=message_history,\n            usage=usage,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, FlightDetails):\n            return result.data\n        else:\n            message_history = result.all_messages(\n                result_tool_return_content='Please try again.'\n            )\n\nclass SeatPreference(BaseModel):\n    row: int = Field(ge=1, le=30)\n    seat: Literal['A', 'B', 'C', 'D', 'E', 'F']\n\n# This agent is responsible for extracting the user's seat selection\nseat_preference_agent = Agent[None, Union[SeatPreference, Failed]](\n    'openai:gpt-4o',\n    result_type=Union[SeatPreference, Failed],  # type: ignore\n    system_prompt=(\n        \"Extract the user's seat preference. \"\n        'Seats A and F are window seats. '\n        'Row 1 is the front row and has extra leg room. '\n        'Rows 14, and 20 also have extra leg room. '\n    ),\n)\n\nasync def find_seat(usage: Usage) -> SeatPreference:\n    message_history: Union[list[ModelMessage], None] = None\n    while True:\n        answer = Prompt.ask('What seat would you like?')\n\n        result = await seat_preference_agent.run(\n            answer,\n            message_history=message_history,\n            usage=usage,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, SeatPreference):\n            return result.data\n        else:\n            print('Could not understand seat preference. Please try again.')\n            message_history = result.all_messages()\n\nasync def main():\n    usage: Usage = Usage()\n\n    opt_flight_details = await find_flight(usage)\n    if opt_flight_details is not None:\n        print(f'Flight found: {opt_flight_details.flight_number}')\n        #> Flight found: AK456\n        seat_preference = await find_seat(usage)\n        print(f'Seat preference: {seat_preference}')\n        #> Seat preference: row=1 seat='A'\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\nThe control flow for this example can be summarised as follows:\n\n## Pydantic Graphs\n\nSee the [graph](https://ai.pydantic.dev/graph/) documentation on when and how to use graphs.\n\n## Examples\n\nThe following examples demonstrate how to use dependencies in PydanticAI:\n\n- [Flight booking](https://ai.pydantic.dev/examples/flight-booking/)",
    "metadata": {
      "url": "https://ai.pydantic.dev/multi-agent-applications/",
      "ogUrl": "https://ai.pydantic.dev/multi-agent-applications/",
      "title": "Multi-agent Applications - PydanticAI",
      "og:url": "https://ai.pydantic.dev/multi-agent-applications/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/multi-agent-applications.png",
      "ogTitle": "Multi-agent Applications - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/multi-agent-applications.png",
      "og:title": "Multi-agent Applications - PydanticAI",
      "scrapeId": "23454836-ce8f-4ec8-ae43-98e7804044e1",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/multi-agent-applications/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/multi-agent-applications.png",
      "twitter:title": "Multi-agent Applications - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/pydantic_graph/mermaid/#pydantic_graphmermaid)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_graph.mermaid`\n\n### DEFAULT\\_HIGHLIGHT\\_CSS`module-attribute`\n\n```\nDEFAULT_HIGHLIGHT_CSS = 'fill:#fdff32'\n\n```\n\nThe default CSS to use for highlighting nodes.\n\n### StateDiagramDirection`module-attribute`\n\n```\nStateDiagramDirection = Literal['TB', 'LR', 'RL', 'BT']\n\n```\n\nUsed to specify the direction of the state diagram generated by mermaid.\n\n- `'TB'`: Top to bottom, this is the default for mermaid charts.\n- `'LR'`: Left to right\n- `'RL'`: Right to left\n- `'BT'`: Bottom to top\n\n### generate\\_code\n\n```\ngenerate_code(\n    graph: Graph[Any, Any, Any],\n    /,\n    *,\n    start_node: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    highlighted_nodes: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    highlight_css: str = DEFAULT_HIGHLIGHT_CSS,\n    title: str | None = None,\n    edge_labels: bool = True,\n    notes: bool = True,\n    direction: StateDiagramDirection | None,\n) -> str\n\n```\n\nGenerate [Mermaid state diagram](https://mermaid.js.org/syntax/stateDiagram.html) code for a graph.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `graph` | `Graph[Any, Any, Any]` | The graph to generate the image for. | _required_ |\n| `start_node` | `Sequence[NodeIdent] | NodeIdent | None` | Identifiers of nodes that start the graph. | `None` |\n| `highlighted_nodes` | `Sequence[NodeIdent] | NodeIdent | None` | Identifiers of nodes to highlight. | `None` |\n| `highlight_css` | `str` | CSS to use for highlighting nodes. | `DEFAULT_HIGHLIGHT_CSS` |\n| `title` | `str | None` | The title of the diagram. | `None` |\n| `edge_labels` | `bool` | Whether to include edge labels in the diagram. | `True` |\n| `notes` | `bool` | Whether to include notes in the diagram. | `True` |\n| `direction` | `StateDiagramDirection | None` | The direction of flow. | _required_ |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `str` | The Mermaid code for the graph. |\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 41<br> 42<br> 43<br> 44<br> 45<br> 46<br> 47<br> 48<br> 49<br> 50<br> 51<br> 52<br> 53<br> 54<br> 55<br> 56<br> 57<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>``` | ```<br>def generate_code(  # noqa: C901<br>    graph: Graph[Any, Any, Any],<br>    /,<br>    *,<br>    start_node: Sequence[NodeIdent] | NodeIdent | None = None,<br>    highlighted_nodes: Sequence[NodeIdent] | NodeIdent | None = None,<br>    highlight_css: str = DEFAULT_HIGHLIGHT_CSS,<br>    title: str | None = None,<br>    edge_labels: bool = True,<br>    notes: bool = True,<br>    direction: StateDiagramDirection | None,<br>) -> str:<br>    \"\"\"Generate [Mermaid state diagram](https://mermaid.js.org/syntax/stateDiagram.html) code for a graph.<br>    Args:<br>        graph: The graph to generate the image for.<br>        start_node: Identifiers of nodes that start the graph.<br>        highlighted_nodes: Identifiers of nodes to highlight.<br>        highlight_css: CSS to use for highlighting nodes.<br>        title: The title of the diagram.<br>        edge_labels: Whether to include edge labels in the diagram.<br>        notes: Whether to include notes in the diagram.<br>        direction: The direction of flow.<br>    Returns:<br>        The Mermaid code for the graph.<br>    \"\"\"<br>    start_node_ids = set(_node_ids(start_node or ()))<br>    for node_id in start_node_ids:<br>        if node_id not in graph.node_defs:<br>            raise LookupError(f'Start node \"{node_id}\" is not in the graph.')<br>    lines: list[str] = []<br>    if title:<br>        lines = ['---', f'title: {title}', '---']<br>    lines.append('stateDiagram-v2')<br>    if direction is not None:<br>        lines.append(f'  direction {direction}')<br>    for node_id, node_def in graph.node_defs.items():<br>        # we use round brackets (rounded box) for nodes other than the start and end<br>        if node_id in start_node_ids:<br>            lines.append(f'  [*] --> {node_id}')<br>        if node_def.returns_base_node:<br>            for next_node_id in graph.node_defs:<br>                lines.append(f'  {node_id} --> {next_node_id}')<br>        else:<br>            for next_node_id, edge in node_def.next_node_edges.items():<br>                line = f'  {node_id} --> {next_node_id}'<br>                if edge_labels and edge.label:<br>                    line += f': {edge.label}'<br>                lines.append(line)<br>        if end_edge := node_def.end_edge:<br>            line = f'  {node_id} --> [*]'<br>            if edge_labels and end_edge.label:<br>                line += f': {end_edge.label}'<br>            lines.append(line)<br>        if notes and node_def.note:<br>            lines.append(f'  note right of {node_id}')<br>            # mermaid doesn't like multiple paragraphs in a note, and shows if so<br>            clean_docs = re.sub('\\n{2,}', '\\n', node_def.note)<br>            lines.append(indent(clean_docs, '    '))<br>            lines.append('  end note')<br>    if highlighted_nodes:<br>        lines.append('')<br>        lines.append(f'classDef highlighted {highlight_css}')<br>        for node_id in _node_ids(highlighted_nodes):<br>            if node_id not in graph.node_defs:<br>                raise LookupError(f'Highlighted node \"{node_id}\" is not in the graph.')<br>            lines.append(f'class {node_id} highlighted')<br>    return '\\n'.join(lines)<br>``` |\n\n### request\\_image\n\n```\nrequest_image(\n    graph: Graph[Any, Any, Any],\n    /,\n    **kwargs: Unpack[MermaidConfig],\n) -> bytes\n\n```\n\nGenerate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink/).\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `graph` | `Graph[Any, Any, Any]` | The graph to generate the image for. | _required_ |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional parameters to configure mermaid chart generation. | `{}` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | The image data. |\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n\n|     |     |\n| --- | --- |\n| ```<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>``` | ```<br>def request_image(<br>    graph: Graph[Any, Any, Any],<br>    /,<br>    **kwargs: Unpack[MermaidConfig],<br>) -> bytes:<br>    \"\"\"Generate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink).<br>    Args:<br>        graph: The graph to generate the image for.<br>        **kwargs: Additional parameters to configure mermaid chart generation.<br>    Returns:<br>        The image data.<br>    \"\"\"<br>    code = generate_code(<br>        graph,<br>        start_node=kwargs.get('start_node'),<br>        highlighted_nodes=kwargs.get('highlighted_nodes'),<br>        highlight_css=kwargs.get('highlight_css', DEFAULT_HIGHLIGHT_CSS),<br>        title=kwargs.get('title'),<br>        edge_labels=kwargs.get('edge_labels', True),<br>        notes=kwargs.get('notes', True),<br>        direction=kwargs.get('direction'),<br>    )<br>    code_base64 = base64.b64encode(code.encode()).decode()<br>    params: dict[str, str | float] = {}<br>    if kwargs.get('image_type') == 'pdf':<br>        url = f'https://mermaid.ink/pdf/{code_base64}'<br>        if kwargs.get('pdf_fit'):<br>            params['fit'] = ''<br>        if kwargs.get('pdf_landscape'):<br>            params['landscape'] = ''<br>        if pdf_paper := kwargs.get('pdf_paper'):<br>            params['paper'] = pdf_paper<br>    elif kwargs.get('image_type') == 'svg':<br>        url = f'https://mermaid.ink/svg/{code_base64}'<br>    else:<br>        url = f'https://mermaid.ink/img/{code_base64}'<br>        if image_type := kwargs.get('image_type'):<br>            params['type'] = image_type<br>    if background_color := kwargs.get('background_color'):<br>        params['bgColor'] = background_color<br>    if theme := kwargs.get('theme'):<br>        params['theme'] = theme<br>    if width := kwargs.get('width'):<br>        params['width'] = width<br>    if height := kwargs.get('height'):<br>        params['height'] = height<br>    if scale := kwargs.get('scale'):<br>        params['scale'] = scale<br>    httpx_client = kwargs.get('httpx_client') or httpx.Client()<br>    response = httpx_client.get(url, params=params)<br>    if not response.is_success:<br>        raise httpx.HTTPStatusError(<br>            f'{response.status_code} error generating image:\\n{response.text}',<br>            request=response.request,<br>            response=response,<br>        )<br>    return response.content<br>``` |\n\n### save\\_image\n\n```\nsave_image(\n    path: Path | str,\n    graph: Graph[Any, Any, Any],\n    /,\n    **kwargs: Unpack[MermaidConfig],\n) -> None\n\n```\n\nGenerate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink/) and save it to a local file.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str` | The path to save the image to. | _required_ |\n| `graph` | `Graph[Any, Any, Any]` | The graph to generate the image for. | _required_ |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional parameters to configure mermaid chart generation. | `{}` |\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n\n|     |     |\n| --- | --- |\n| ```<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>``` | ```<br>def save_image(<br>    path: Path | str,<br>    graph: Graph[Any, Any, Any],<br>    /,<br>    **kwargs: Unpack[MermaidConfig],<br>) -> None:<br>    \"\"\"Generate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink) and save it to a local file.<br>    Args:<br>        path: The path to save the image to.<br>        graph: The graph to generate the image for.<br>        **kwargs: Additional parameters to configure mermaid chart generation.<br>    \"\"\"<br>    if isinstance(path, str):<br>        path = Path(path)<br>    if 'image_type' not in kwargs:<br>        ext = path.suffix.lower()[1:]<br>        # no need to check for .jpeg/.jpg, as it is the default<br>        if ext in ('png', 'webp', 'svg', 'pdf'):<br>            kwargs['image_type'] = ext<br>    image_data = request_image(graph, **kwargs)<br>    path.write_bytes(image_data)<br>``` |\n\n### MermaidConfig\n\nBases: `TypedDict`\n\nParameters to configure mermaid chart generation.\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n\n|     |     |\n| --- | --- |\n| ```<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>``` | ```<br>class MermaidConfig(TypedDict, total=False):<br>    \"\"\"Parameters to configure mermaid chart generation.\"\"\"<br>    start_node: Sequence[NodeIdent] | NodeIdent<br>    \"\"\"Identifiers of nodes that start the graph.\"\"\"<br>    highlighted_nodes: Sequence[NodeIdent] | NodeIdent<br>    \"\"\"Identifiers of nodes to highlight.\"\"\"<br>    highlight_css: str<br>    \"\"\"CSS to use for highlighting nodes.\"\"\"<br>    title: str | None<br>    \"\"\"The title of the diagram.\"\"\"<br>    edge_labels: bool<br>    \"\"\"Whether to include edge labels in the diagram.\"\"\"<br>    notes: bool<br>    \"\"\"Whether to include notes on nodes in the diagram, defaults to true.\"\"\"<br>    image_type: Literal['jpeg', 'png', 'webp', 'svg', 'pdf']<br>    \"\"\"The image type to generate. If unspecified, the default behavior is `'jpeg'`.\"\"\"<br>    pdf_fit: bool<br>    \"\"\"When using image_type='pdf', whether to fit the diagram to the PDF page.\"\"\"<br>    pdf_landscape: bool<br>    \"\"\"When using image_type='pdf', whether to use landscape orientation for the PDF.<br>    This has no effect if using `pdf_fit`.<br>    \"\"\"<br>    pdf_paper: Literal['letter', 'legal', 'tabloid', 'ledger', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6']<br>    \"\"\"When using image_type='pdf', the paper size of the PDF.\"\"\"<br>    background_color: str<br>    \"\"\"The background color of the diagram.<br>    If None, the default transparent background is used. The color value is interpreted as a hexadecimal color<br>    code by default (and should not have a leading '#'), but you can also use named colors by prefixing the<br>    value with `'!'`. For example, valid choices include `background_color='!white'` or `background_color='FF0000'`.<br>    \"\"\"<br>    theme: Literal['default', 'neutral', 'dark', 'forest']<br>    \"\"\"The theme of the diagram. Defaults to 'default'.\"\"\"<br>    width: int<br>    \"\"\"The width of the diagram.\"\"\"<br>    height: int<br>    \"\"\"The height of the diagram.\"\"\"<br>    scale: Annotated[float, Ge(1), Le(3)]<br>    \"\"\"The scale of the diagram.<br>    The scale must be a number between 1 and 3, and you can only set a scale if one or both of width and height are set.<br>    \"\"\"<br>    httpx_client: httpx.Client<br>    \"\"\"An HTTPX client to use for requests, mostly for testing purposes.\"\"\"<br>    direction: StateDiagramDirection<br>    \"\"\"The direction of the state diagram.\"\"\"<br>``` |\n\n#### start\\_node`instance-attribute`\n\n```\nstart_node: Sequence[NodeIdent] | NodeIdent\n\n```\n\nIdentifiers of nodes that start the graph.\n\n#### highlighted\\_nodes`instance-attribute`\n\n```\nhighlighted_nodes: Sequence[NodeIdent] | NodeIdent\n\n```\n\nIdentifiers of nodes to highlight.\n\n#### highlight\\_css`instance-attribute`\n\n```\nhighlight_css: str\n\n```\n\nCSS to use for highlighting nodes.\n\n#### title`instance-attribute`\n\n```\ntitle: str | None\n\n```\n\nThe title of the diagram.\n\n#### edge\\_labels`instance-attribute`\n\n```\nedge_labels: bool\n\n```\n\nWhether to include edge labels in the diagram.\n\n#### notes`instance-attribute`\n\n```\nnotes: bool\n\n```\n\nWhether to include notes on nodes in the diagram, defaults to true.\n\n#### image\\_type`instance-attribute`\n\n```\nimage_type: Literal['jpeg', 'png', 'webp', 'svg', 'pdf']\n\n```\n\nThe image type to generate. If unspecified, the default behavior is `'jpeg'`.\n\n#### pdf\\_fit`instance-attribute`\n\n```\npdf_fit: bool\n\n```\n\nWhen using image\\_type='pdf', whether to fit the diagram to the PDF page.\n\n#### pdf\\_landscape`instance-attribute`\n\n```\npdf_landscape: bool\n\n```\n\nWhen using image\\_type='pdf', whether to use landscape orientation for the PDF.\n\nThis has no effect if using `pdf_fit`.\n\n#### pdf\\_paper`instance-attribute`\n\n```\npdf_paper: Literal[\\\n    \"letter\",\\\n    \"legal\",\\\n    \"tabloid\",\\\n    \"ledger\",\\\n    \"a0\",\\\n    \"a1\",\\\n    \"a2\",\\\n    \"a3\",\\\n    \"a4\",\\\n    \"a5\",\\\n    \"a6\",\\\n]\n\n```\n\nWhen using image\\_type='pdf', the paper size of the PDF.\n\n#### background\\_color`instance-attribute`\n\n```\nbackground_color: str\n\n```\n\nThe background color of the diagram.\n\nIf None, the default transparent background is used. The color value is interpreted as a hexadecimal color\ncode by default (and should not have a leading '#'), but you can also use named colors by prefixing the\nvalue with `'!'`. For example, valid choices include `background_color='!white'` or `background_color='FF0000'`.\n\n#### theme`instance-attribute`\n\n```\ntheme: Literal['default', 'neutral', 'dark', 'forest']\n\n```\n\nThe theme of the diagram. Defaults to 'default'.\n\n#### width`instance-attribute`\n\n```\nwidth: int\n\n```\n\nThe width of the diagram.\n\n#### height`instance-attribute`\n\n```\nheight: int\n\n```\n\nThe height of the diagram.\n\n#### scale`instance-attribute`\n\n```\nscale: Annotated[float, Ge(1), Le(3)]\n\n```\n\nThe scale of the diagram.\n\nThe scale must be a number between 1 and 3, and you can only set a scale if one or both of width and height are set.\n\n#### httpx\\_client`instance-attribute`\n\n```\nhttpx_client: Client\n\n```\n\nAn HTTPX client to use for requests, mostly for testing purposes.\n\n#### direction`instance-attribute`\n\n```\ndirection: StateDiagramDirection\n\n```\n\nThe direction of the state diagram.\n\n### NodeIdent`module-attribute`\n\n```\nNodeIdent: TypeAlias = (\n    \"type[BaseNode[Any, Any, Any]] | BaseNode[Any, Any, Any] | str\"\n)\n\n```\n\nA type alias for a node identifier.\n\nThis can be:\n\n- A node instance (instance of a subclass of [`BaseNode`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode)).\n- A node class (subclass of [`BaseNode`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode)).\n- A string representing the node ID.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/pydantic_graph/mermaid/",
      "ogUrl": "https://ai.pydantic.dev/api/pydantic_graph/mermaid/",
      "title": "pydantic_graph.mermaid - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/pydantic_graph/mermaid/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/mermaid.png",
      "ogTitle": "pydantic_graph.mermaid - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/mermaid.png",
      "og:title": "pydantic_graph.mermaid - PydanticAI",
      "scrapeId": "928bb9ec-94d8-48d5-8174-bf394dd17c35",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/pydantic_graph/mermaid/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/mermaid.png",
      "twitter:title": "pydantic_graph.mermaid - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/anthropic/#pydantic_aimodelsanthropic)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.anthropic`\n\n## Setup\n\nFor details on how to set up authentication with this model, see [model configuration for Anthropic](https://ai.pydantic.dev/models/#anthropic).\n\n### LatestAnthropicModelNames`module-attribute`\n\n```\nLatestAnthropicModelNames = Literal[\\\n    \"claude-3-5-haiku-latest\",\\\n    \"claude-3-5-sonnet-latest\",\\\n    \"claude-3-opus-latest\",\\\n]\n\n```\n\nLatest Anthropic models.\n\n### AnthropicModelName`module-attribute`\n\n```\nAnthropicModelName = Union[str, LatestAnthropicModelNames]\n\n```\n\nPossible Anthropic model names.\n\nSince Anthropic supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [the Anthropic docs](https://docs.anthropic.com/en/docs/about-claude/models) for a full list.\n\n### AnthropicModelSettings\n\nBases: `ModelSettings`\n\nSettings used for an Anthropic model request.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n\n|     |     |\n| --- | --- |\n| ```<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>``` | ```<br>class AnthropicModelSettings(ModelSettings):<br>    \"\"\"Settings used for an Anthropic model request.\"\"\"<br>    anthropic_metadata: MetadataParam<br>    \"\"\"An object describing metadata about the request.<br>    Contains `user_id`, an external identifier for the user who is associated with the request.\"\"\"<br>``` |\n\n#### anthropic\\_metadata`instance-attribute`\n\n```\nanthropic_metadata: MetadataParam\n\n```\n\nAn object describing metadata about the request.\n\nContains `user_id`, an external identifier for the user who is associated with the request.\n\n### AnthropicModel`dataclass`\n\nBases: `Model`\n\nA model that uses the Anthropic API.\n\nInternally, this uses the [Anthropic Python client](https://github.com/anthropics/anthropic-sdk-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nNote\n\nThe `AnthropicModel` class does not yet support streaming responses.\nWe anticipate adding support for streaming responses in a near-term future release.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>``` | ```<br>@dataclass(init=False)<br>class AnthropicModel(Model):<br>    \"\"\"A model that uses the Anthropic API.<br>    Internally, this uses the [Anthropic Python client](https://github.com/anthropics/anthropic-sdk-python) to interact with the API.<br>    Apart from `__init__`, all methods are private or match those of the base class.<br>    !!! note<br>        The `AnthropicModel` class does not yet support streaming responses.<br>        We anticipate adding support for streaming responses in a near-term future release.<br>    \"\"\"<br>    client: AsyncAnthropic = field(repr=False)<br>    _model_name: AnthropicModelName = field(repr=False)<br>    _system: str | None = field(default='anthropic', repr=False)<br>    def __init__(<br>        self,<br>        model_name: AnthropicModelName,<br>        *,<br>        api_key: str | None = None,<br>        anthropic_client: AsyncAnthropic | None = None,<br>        http_client: AsyncHTTPClient | None = None,<br>    ):<br>        \"\"\"Initialize an Anthropic model.<br>        Args:<br>            model_name: The name of the Anthropic model to use. List of model names available<br>                [here](https://docs.anthropic.com/en/docs/about-claude/models).<br>            api_key: The API key to use for authentication, if not provided, the `ANTHROPIC_API_KEY` environment variable<br>                will be used if available.<br>            anthropic_client: An existing<br>                [`AsyncAnthropic`](https://github.com/anthropics/anthropic-sdk-python?tab=readme-ov-file#async-usage)<br>                client to use, if provided, `api_key` and `http_client` must be `None`.<br>            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>        \"\"\"<br>        self._model_name = model_name<br>        if anthropic_client is not None:<br>            assert http_client is None, 'Cannot provide both `anthropic_client` and `http_client`'<br>            assert api_key is None, 'Cannot provide both `anthropic_client` and `api_key`'<br>            self.client = anthropic_client<br>        elif http_client is not None:<br>            self.client = AsyncAnthropic(api_key=api_key, http_client=http_client)<br>        else:<br>            self.client = AsyncAnthropic(api_key=api_key, http_client=cached_async_http_client())<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, usage.Usage]:<br>        check_allow_model_requests()<br>        response = await self._messages_create(<br>            messages, False, cast(AnthropicModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        return self._process_response(response), _map_usage(response)<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        check_allow_model_requests()<br>        response = await self._messages_create(<br>            messages, True, cast(AnthropicModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        async with response:<br>            yield await self._process_streamed_response(response)<br>    @property<br>    def model_name(self) -> AnthropicModelName:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>    @overload<br>    async def _messages_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: Literal[True],<br>        model_settings: AnthropicModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncStream[RawMessageStreamEvent]:<br>        pass<br>    @overload<br>    async def _messages_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: Literal[False],<br>        model_settings: AnthropicModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AnthropicMessage:<br>        pass<br>    async def _messages_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: bool,<br>        model_settings: AnthropicModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AnthropicMessage | AsyncStream[RawMessageStreamEvent]:<br>        # standalone function to make it easier to override<br>        tools = self._get_tools(model_request_parameters)<br>        tool_choice: ToolChoiceParam | None<br>        if not tools:<br>            tool_choice = None<br>        else:<br>            if not model_request_parameters.allow_text_result:<br>                tool_choice = {'type': 'any'}<br>            else:<br>                tool_choice = {'type': 'auto'}<br>            if (allow_parallel_tool_calls := model_settings.get('parallel_tool_calls')) is not None:<br>                tool_choice['disable_parallel_tool_use'] = not allow_parallel_tool_calls<br>        system_prompt, anthropic_messages = self._map_message(messages)<br>        return await self.client.messages.create(<br>            max_tokens=model_settings.get('max_tokens', 1024),<br>            system=system_prompt or NOT_GIVEN,<br>            messages=anthropic_messages,<br>            model=self._model_name,<br>            tools=tools or NOT_GIVEN,<br>            tool_choice=tool_choice or NOT_GIVEN,<br>            stream=stream,<br>            temperature=model_settings.get('temperature', NOT_GIVEN),<br>            top_p=model_settings.get('top_p', NOT_GIVEN),<br>            timeout=model_settings.get('timeout', NOT_GIVEN),<br>            metadata=model_settings.get('anthropic_metadata', NOT_GIVEN),<br>        )<br>    def _process_response(self, response: AnthropicMessage) -> ModelResponse:<br>        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"<br>        items: list[ModelResponsePart] = []<br>        for item in response.content:<br>            if isinstance(item, TextBlock):<br>                items.append(TextPart(content=item.text))<br>            else:<br>                assert isinstance(item, ToolUseBlock), 'unexpected item type'<br>                items.append(<br>                    ToolCallPart(<br>                        tool_name=item.name,<br>                        args=cast(dict[str, Any], item.input),<br>                        tool_call_id=item.id,<br>                    )<br>                )<br>        return ModelResponse(items, model_name=response.model)<br>    async def _process_streamed_response(self, response: AsyncStream[RawMessageStreamEvent]) -> StreamedResponse:<br>        peekable_response = _utils.PeekableAsyncStream(response)<br>        first_chunk = await peekable_response.peek()<br>        if isinstance(first_chunk, _utils.Unset):<br>            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')<br>        # Since Anthropic doesn't provide a timestamp in the message, we'll use the current time<br>        timestamp = datetime.now(tz=timezone.utc)<br>        return AnthropicStreamedResponse(<br>            _model_name=self._model_name, _response=peekable_response, _timestamp=timestamp<br>        )<br>    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[ToolParam]:<br>        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]<br>        if model_request_parameters.result_tools:<br>            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]<br>        return tools<br>    def _map_message(self, messages: list[ModelMessage]) -> tuple[str, list[MessageParam]]:<br>        \"\"\"Just maps a `pydantic_ai.Message` to a `anthropic.types.MessageParam`.\"\"\"<br>        system_prompt: str = ''<br>        anthropic_messages: list[MessageParam] = []<br>        for m in messages:<br>            if isinstance(m, ModelRequest):<br>                for part in m.parts:<br>                    if isinstance(part, SystemPromptPart):<br>                        system_prompt += part.content<br>                    elif isinstance(part, UserPromptPart):<br>                        anthropic_messages.append(MessageParam(role='user', content=part.content))<br>                    elif isinstance(part, ToolReturnPart):<br>                        anthropic_messages.append(<br>                            MessageParam(<br>                                role='user',<br>                                content=[<br>                                    ToolResultBlockParam(<br>                                        tool_use_id=_guard_tool_call_id(t=part, model_source='Anthropic'),<br>                                        type='tool_result',<br>                                        content=part.model_response_str(),<br>                                        is_error=False,<br>                                    )<br>                                ],<br>                            )<br>                        )<br>                    elif isinstance(part, RetryPromptPart):<br>                        if part.tool_name is None:<br>                            anthropic_messages.append(MessageParam(role='user', content=part.model_response()))<br>                        else:<br>                            anthropic_messages.append(<br>                                MessageParam(<br>                                    role='user',<br>                                    content=[<br>                                        ToolResultBlockParam(<br>                                            tool_use_id=_guard_tool_call_id(t=part, model_source='Anthropic'),<br>                                            type='tool_result',<br>                                            content=part.model_response(),<br>                                            is_error=True,<br>                                        ),<br>                                    ],<br>                                )<br>                            )<br>            elif isinstance(m, ModelResponse):<br>                content: list[TextBlockParam | ToolUseBlockParam] = []<br>                for item in m.parts:<br>                    if isinstance(item, TextPart):<br>                        content.append(TextBlockParam(text=item.content, type='text'))<br>                    else:<br>                        assert isinstance(item, ToolCallPart)<br>                        content.append(self._map_tool_call(item))<br>                anthropic_messages.append(MessageParam(role='assistant', content=content))<br>            else:<br>                assert_never(m)<br>        return system_prompt, anthropic_messages<br>    @staticmethod<br>    def _map_tool_call(t: ToolCallPart) -> ToolUseBlockParam:<br>        return ToolUseBlockParam(<br>            id=_guard_tool_call_id(t=t, model_source='Anthropic'),<br>            type='tool_use',<br>            name=t.tool_name,<br>            input=t.args_as_dict(),<br>        )<br>    @staticmethod<br>    def _map_tool_definition(f: ToolDefinition) -> ToolParam:<br>        return {<br>            'name': f.name,<br>            'description': f.description,<br>            'input_schema': f.parameters_json_schema,<br>        }<br>``` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: AnthropicModelName,\n    *,\n    api_key: str | None = None,\n    anthropic_client: AsyncAnthropic | None = None,\n    http_client: AsyncClient | None = None\n)\n\n```\n\nInitialize an Anthropic model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `AnthropicModelName` | The name of the Anthropic model to use. List of model names available<br>[here](https://docs.anthropic.com/en/docs/about-claude/models). | _required_ |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `ANTHROPIC_API_KEY` environment variable<br>will be used if available. | `None` |\n| `anthropic_client` | `AsyncAnthropic | None` | An existing<br>[`AsyncAnthropic`](https://github.com/anthropics/anthropic-sdk-python?tab=readme-ov-file#async-usage)<br>client to use, if provided, `api_key` and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n\n|     |     |\n| --- | --- |\n| ```<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>``` | ```<br>def __init__(<br>    self,<br>    model_name: AnthropicModelName,<br>    *,<br>    api_key: str | None = None,<br>    anthropic_client: AsyncAnthropic | None = None,<br>    http_client: AsyncHTTPClient | None = None,<br>):<br>    \"\"\"Initialize an Anthropic model.<br>    Args:<br>        model_name: The name of the Anthropic model to use. List of model names available<br>            [here](https://docs.anthropic.com/en/docs/about-claude/models).<br>        api_key: The API key to use for authentication, if not provided, the `ANTHROPIC_API_KEY` environment variable<br>            will be used if available.<br>        anthropic_client: An existing<br>            [`AsyncAnthropic`](https://github.com/anthropics/anthropic-sdk-python?tab=readme-ov-file#async-usage)<br>            client to use, if provided, `api_key` and `http_client` must be `None`.<br>        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>    \"\"\"<br>    self._model_name = model_name<br>    if anthropic_client is not None:<br>        assert http_client is None, 'Cannot provide both `anthropic_client` and `http_client`'<br>        assert api_key is None, 'Cannot provide both `anthropic_client` and `api_key`'<br>        self.client = anthropic_client<br>    elif http_client is not None:<br>        self.client = AsyncAnthropic(api_key=api_key, http_client=http_client)<br>    else:<br>        self.client = AsyncAnthropic(api_key=api_key, http_client=cached_async_http_client())<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: AnthropicModelName\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### AnthropicStreamedResponse`dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for Anthropic models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n\n|     |     |\n| --- | --- |\n| ```<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>``` | ```<br>@dataclass<br>class AnthropicStreamedResponse(StreamedResponse):<br>    \"\"\"Implementation of `StreamedResponse` for Anthropic models.\"\"\"<br>    _model_name: AnthropicModelName<br>    _response: AsyncIterable[RawMessageStreamEvent]<br>    _timestamp: datetime<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        current_block: TextBlock | ToolUseBlock | None = None<br>        current_json: str = ''<br>        async for event in self._response:<br>            self._usage += _map_usage(event)<br>            if isinstance(event, RawContentBlockStartEvent):<br>                current_block = event.content_block<br>                if isinstance(current_block, TextBlock) and current_block.text:<br>                    yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=current_block.text)<br>                elif isinstance(current_block, ToolUseBlock):<br>                    maybe_event = self._parts_manager.handle_tool_call_delta(<br>                        vendor_part_id=current_block.id,<br>                        tool_name=current_block.name,<br>                        args=cast(dict[str, Any], current_block.input),<br>                        tool_call_id=current_block.id,<br>                    )<br>                    if maybe_event is not None:<br>                        yield maybe_event<br>            elif isinstance(event, RawContentBlockDeltaEvent):<br>                if isinstance(event.delta, TextDelta):<br>                    yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=event.delta.text)<br>                elif (<br>                    current_block and event.delta.type == 'input_json_delta' and isinstance(current_block, ToolUseBlock)<br>                ):<br>                    # Try to parse the JSON immediately, otherwise cache the value for later. This handles<br>                    # cases where the JSON is not currently valid but will be valid once we stream more tokens.<br>                    try:<br>                        parsed_args = json_loads(current_json + event.delta.partial_json)<br>                        current_json = ''<br>                    except JSONDecodeError:<br>                        current_json += event.delta.partial_json<br>                        continue<br>                    # For tool calls, we need to handle partial JSON updates<br>                    maybe_event = self._parts_manager.handle_tool_call_delta(<br>                        vendor_part_id=current_block.id,<br>                        tool_name='',<br>                        args=parsed_args,<br>                        tool_call_id=current_block.id,<br>                    )<br>                    if maybe_event is not None:<br>                        yield maybe_event<br>            elif isinstance(event, (RawContentBlockStopEvent, RawMessageStopEvent)):<br>                current_block = None<br>    @property<br>    def model_name(self) -> AnthropicModelName:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        return self._model_name<br>    @property<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._timestamp<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: AnthropicModelName\n\n```\n\nGet the model name of the response.\n\n#### timestamp`property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/anthropic/",
      "ogUrl": "https://ai.pydantic.dev/api/models/anthropic/",
      "title": "pydantic_ai.models.anthropic - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/anthropic/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/anthropic.png",
      "ogTitle": "pydantic_ai.models.anthropic - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/anthropic.png",
      "og:title": "pydantic_ai.models.anthropic - PydanticAI",
      "scrapeId": "cb4d778b-8ffa-406c-b458-0cef68b7dc4f",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/anthropic/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/anthropic.png",
      "twitter:title": "pydantic_ai.models.anthropic - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/flight-booking/#running-the-example)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Flight booking\n\nExample of a multi-agent flow where one agent delegates work to another, then hands off control to a third agent.\n\nDemonstrates:\n\n- [agent delegation](https://ai.pydantic.dev/multi-agent-applications/#agent-delegation)\n- [programmatic agent hand-off](https://ai.pydantic.dev/multi-agent-applications/#programmatic-agent-hand-off)\n- [usage limits](https://ai.pydantic.dev/agents/#usage-limits)\n\nIn this scenario, a group of agents work together to find the best flight for a user.\n\nThe control flow for this example can be summarised as follows:\n\n## Running the Example\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/flight-booking/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/flight-booking/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.flight_booking\n\n```\n\n```\nuv run -m pydantic_ai_examples.flight_booking\n\n```\n\n## Example Code\n\nflight\\_booking.py\n\n```\nimport datetime\nfrom dataclasses import dataclass\nfrom typing import Literal\n\nimport logfire\nfrom pydantic import BaseModel, Field\nfrom rich.prompt import Prompt\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\nfrom pydantic_ai.messages import ModelMessage\nfrom pydantic_ai.usage import Usage, UsageLimits\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nclass FlightDetails(BaseModel):\n    \"\"\"Details of the most suitable flight.\"\"\"\n\n    flight_number: str\n    price: int\n    origin: str = Field(description='Three-letter airport code')\n    destination: str = Field(description='Three-letter airport code')\n    date: datetime.date\n\nclass NoFlightFound(BaseModel):\n    \"\"\"When no valid flight is found.\"\"\"\n\n@dataclass\nclass Deps:\n    web_page_text: str\n    req_origin: str\n    req_destination: str\n    req_date: datetime.date\n\n# This agent is responsible for controlling the flow of the conversation.\nsearch_agent = Agent[Deps, FlightDetails | NoFlightFound](\n    'openai:gpt-4o',\n    result_type=FlightDetails | NoFlightFound,  # type: ignore\n    retries=4,\n    system_prompt=(\n        'Your job is to find the cheapest flight for the user on the given date. '\n    ),\n)\n\n# This agent is responsible for extracting flight details from web page text.\nextraction_agent = Agent(\n    'openai:gpt-4o',\n    result_type=list[FlightDetails],\n    system_prompt='Extract all the flight details from the given text.',\n)\n\n@search_agent.tool\nasync def extract_flights(ctx: RunContext[Deps]) -> list[FlightDetails]:\n    \"\"\"Get details of all flights.\"\"\"\n    # we pass the usage to the search agent so requests within this agent are counted\n    result = await extraction_agent.run(ctx.deps.web_page_text, usage=ctx.usage)\n    logfire.info('found {flight_count} flights', flight_count=len(result.data))\n    return result.data\n\n@search_agent.result_validator\nasync def validate_result(\n    ctx: RunContext[Deps], result: FlightDetails | NoFlightFound\n) -> FlightDetails | NoFlightFound:\n    \"\"\"Procedural validation that the flight meets the constraints.\"\"\"\n    if isinstance(result, NoFlightFound):\n        return result\n\n    errors: list[str] = []\n    if result.origin != ctx.deps.req_origin:\n        errors.append(\n            f'Flight should have origin {ctx.deps.req_origin}, not {result.origin}'\n        )\n    if result.destination != ctx.deps.req_destination:\n        errors.append(\n            f'Flight should have destination {ctx.deps.req_destination}, not {result.destination}'\n        )\n    if result.date != ctx.deps.req_date:\n        errors.append(f'Flight should be on {ctx.deps.req_date}, not {result.date}')\n\n    if errors:\n        raise ModelRetry('\\n'.join(errors))\n    else:\n        return result\n\nclass SeatPreference(BaseModel):\n    row: int = Field(ge=1, le=30)\n    seat: Literal['A', 'B', 'C', 'D', 'E', 'F']\n\nclass Failed(BaseModel):\n    \"\"\"Unable to extract a seat selection.\"\"\"\n\n# This agent is responsible for extracting the user's seat selection\nseat_preference_agent = Agent[\\\n    None, SeatPreference | Failed\\\n](\n    'openai:gpt-4o',\n    result_type=SeatPreference | Failed,  # type: ignore\n    system_prompt=(\n        \"Extract the user's seat preference. \"\n        'Seats A and F are window seats. '\n        'Row 1 is the front row and has extra leg room. '\n        'Rows 14, and 20 also have extra leg room. '\n    ),\n)\n\n# in reality this would be downloaded from a booking site,\n# potentially using another agent to navigate the site\nflights_web_page = \"\"\"\n1. Flight SFO-AK123\n- Price: $350\n- Origin: San Francisco International Airport (SFO)\n- Destination: Ted Stevens Anchorage International Airport (ANC)\n- Date: January 10, 2025\n\n2. Flight SFO-AK456\n- Price: $370\n- Origin: San Francisco International Airport (SFO)\n- Destination: Fairbanks International Airport (FAI)\n- Date: January 10, 2025\n\n3. Flight SFO-AK789\n- Price: $400\n- Origin: San Francisco International Airport (SFO)\n- Destination: Juneau International Airport (JNU)\n- Date: January 20, 2025\n\n4. Flight NYC-LA101\n- Price: $250\n- Origin: San Francisco International Airport (SFO)\n- Destination: Ted Stevens Anchorage International Airport (ANC)\n- Date: January 10, 2025\n\n5. Flight CHI-MIA202\n- Price: $200\n- Origin: Chicago O'Hare International Airport (ORD)\n- Destination: Miami International Airport (MIA)\n- Date: January 12, 2025\n\n6. Flight BOS-SEA303\n- Price: $120\n- Origin: Boston Logan International Airport (BOS)\n- Destination: Ted Stevens Anchorage International Airport (ANC)\n- Date: January 12, 2025\n\n7. Flight DFW-DEN404\n- Price: $150\n- Origin: Dallas/Fort Worth International Airport (DFW)\n- Destination: Denver International Airport (DEN)\n- Date: January 10, 2025\n\n8. Flight ATL-HOU505\n- Price: $180\n- Origin: Hartsfield-Jackson Atlanta International Airport (ATL)\n- Destination: George Bush Intercontinental Airport (IAH)\n- Date: January 10, 2025\n\"\"\"\n\n# restrict how many requests this app can make to the LLM\nusage_limits = UsageLimits(request_limit=15)\n\nasync def main():\n    deps = Deps(\n        web_page_text=flights_web_page,\n        req_origin='SFO',\n        req_destination='ANC',\n        req_date=datetime.date(2025, 1, 10),\n    )\n    message_history: list[ModelMessage] | None = None\n    usage: Usage = Usage()\n    # run the agent until a satisfactory flight is found\n    while True:\n        result = await search_agent.run(\n            f'Find me a flight from {deps.req_origin} to {deps.req_destination} on {deps.req_date}',\n            deps=deps,\n            usage=usage,\n            message_history=message_history,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, NoFlightFound):\n            print('No flight found')\n            break\n        else:\n            flight = result.data\n            print(f'Flight found: {flight}')\n            answer = Prompt.ask(\n                'Do you want to buy this flight, or keep searching? (buy/*search)',\n                choices=['buy', 'search', ''],\n                show_choices=False,\n            )\n            if answer == 'buy':\n                seat = await find_seat(usage)\n                await buy_tickets(flight, seat)\n                break\n            else:\n                message_history = result.all_messages(\n                    result_tool_return_content='Please suggest another flight'\n                )\n\nasync def find_seat(usage: Usage) -> SeatPreference:\n    message_history: list[ModelMessage] | None = None\n    while True:\n        answer = Prompt.ask('What seat would you like?')\n\n        result = await seat_preference_agent.run(\n            answer,\n            message_history=message_history,\n            usage=usage,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, SeatPreference):\n            return result.data\n        else:\n            print('Could not understand seat preference. Please try again.')\n            message_history = result.all_messages()\n\nasync def buy_tickets(flight_details: FlightDetails, seat: SeatPreference):\n    print(f'Purchasing flight {flight_details=!r} {seat=!r}...')\n\nif __name__ == '__main__':\n    import asyncio\n\n    asyncio.run(main())\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/flight-booking/",
      "ogUrl": "https://ai.pydantic.dev/examples/flight-booking/",
      "title": "Flight booking - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/flight-booking/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/flight-booking.png",
      "ogTitle": "Flight booking - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/flight-booking.png",
      "og:title": "Flight booking - PydanticAI",
      "scrapeId": "3e1673ac-986c-4198-9c3a-e4caf5418715",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/flight-booking/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/flight-booking.png",
      "twitter:title": "Flight booking - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/messages/#pydantic_aimessages)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.messages`\n\nThe structure of [`ModelMessage`](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.ModelMessage) can be shown as a graph:\n\n### SystemPromptPart`dataclass`\n\nA system prompt, generally written by the application developer.\n\nThis gives the model context and guidance on how to respond.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>``` | ```<br>@dataclass<br>class SystemPromptPart:<br>    \"\"\"A system prompt, generally written by the application developer.<br>    This gives the model context and guidance on how to respond.<br>    \"\"\"<br>    content: str<br>    \"\"\"The content of the prompt.\"\"\"<br>    dynamic_ref: str | None = None<br>    \"\"\"The ref of the dynamic system prompt function that generated this part.<br>    Only set if system prompt is dynamic, see [`system_prompt`][pydantic_ai.Agent.system_prompt] for more information.<br>    \"\"\"<br>    part_kind: Literal['system-prompt'] = 'system-prompt'<br>    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"<br>``` |\n\n#### content`instance-attribute`\n\n```\ncontent: str\n\n```\n\nThe content of the prompt.\n\n#### dynamic\\_ref`class-attribute``instance-attribute`\n\n```\ndynamic_ref: str | None = None\n\n```\n\nThe ref of the dynamic system prompt function that generated this part.\n\nOnly set if system prompt is dynamic, see [`system_prompt`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.system_prompt) for more information.\n\n#### part\\_kind`class-attribute``instance-attribute`\n\n```\npart_kind: Literal['system-prompt'] = 'system-prompt'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n### UserPromptPart`dataclass`\n\nA user prompt, generally written by the end user.\n\nContent comes from the `user_prompt` parameter of [`Agent.run`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run),\n[`Agent.run_sync`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync), and [`Agent.run_stream`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream).\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>``` | ```<br>@dataclass<br>class UserPromptPart:<br>    \"\"\"A user prompt, generally written by the end user.<br>    Content comes from the `user_prompt` parameter of [`Agent.run`][pydantic_ai.Agent.run],<br>    [`Agent.run_sync`][pydantic_ai.Agent.run_sync], and [`Agent.run_stream`][pydantic_ai.Agent.run_stream].<br>    \"\"\"<br>    content: str<br>    \"\"\"The content of the prompt.\"\"\"<br>    timestamp: datetime = field(default_factory=_now_utc)<br>    \"\"\"The timestamp of the prompt.\"\"\"<br>    part_kind: Literal['user-prompt'] = 'user-prompt'<br>    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"<br>``` |\n\n#### content`instance-attribute`\n\n```\ncontent: str\n\n```\n\nThe content of the prompt.\n\n#### timestamp`class-attribute``instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp of the prompt.\n\n#### part\\_kind`class-attribute``instance-attribute`\n\n```\npart_kind: Literal['user-prompt'] = 'user-prompt'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n### ToolReturnPart`dataclass`\n\nA tool return message, this encodes the result of running a tool.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>``` | ```<br>@dataclass<br>class ToolReturnPart:<br>    \"\"\"A tool return message, this encodes the result of running a tool.\"\"\"<br>    tool_name: str<br>    \"\"\"The name of the \"tool\" was called.\"\"\"<br>    content: Any<br>    \"\"\"The return value.\"\"\"<br>    tool_call_id: str | None = None<br>    \"\"\"Optional tool call identifier, this is used by some models including OpenAI.\"\"\"<br>    timestamp: datetime = field(default_factory=_now_utc)<br>    \"\"\"The timestamp, when the tool returned.\"\"\"<br>    part_kind: Literal['tool-return'] = 'tool-return'<br>    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"<br>    def model_response_str(self) -> str:<br>        \"\"\"Return a string representation of the content for the model.\"\"\"<br>        if isinstance(self.content, str):<br>            return self.content<br>        else:<br>            return tool_return_ta.dump_json(self.content).decode()<br>    def model_response_object(self) -> dict[str, Any]:<br>        \"\"\"Return a dictionary representation of the content, wrapping non-dict types appropriately.\"\"\"<br>        # gemini supports JSON dict return values, but no other JSON types, hence we wrap anything else in a dict<br>        if isinstance(self.content, dict):<br>            return tool_return_ta.dump_python(self.content, mode='json')  # pyright: ignore[reportUnknownMemberType]<br>        else:<br>            return {'return_value': tool_return_ta.dump_python(self.content, mode='json')}<br>``` |\n\n#### tool\\_name`instance-attribute`\n\n```\ntool_name: str\n\n```\n\nThe name of the \"tool\" was called.\n\n#### content`instance-attribute`\n\n```\ncontent: Any\n\n```\n\nThe return value.\n\n#### tool\\_call\\_id`class-attribute``instance-attribute`\n\n```\ntool_call_id: str | None = None\n\n```\n\nOptional tool call identifier, this is used by some models including OpenAI.\n\n#### timestamp`class-attribute``instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp, when the tool returned.\n\n#### part\\_kind`class-attribute``instance-attribute`\n\n```\npart_kind: Literal['tool-return'] = 'tool-return'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n#### model\\_response\\_str\n\n```\nmodel_response_str() -> str\n\n```\n\nReturn a string representation of the content for the model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>74<br>75<br>76<br>77<br>78<br>79<br>``` | ```<br>def model_response_str(self) -> str:<br>    \"\"\"Return a string representation of the content for the model.\"\"\"<br>    if isinstance(self.content, str):<br>        return self.content<br>    else:<br>        return tool_return_ta.dump_json(self.content).decode()<br>``` |\n\n#### model\\_response\\_object\n\n```\nmodel_response_object() -> dict[str, Any]\n\n```\n\nReturn a dictionary representation of the content, wrapping non-dict types appropriately.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>``` | ```<br>def model_response_object(self) -> dict[str, Any]:<br>    \"\"\"Return a dictionary representation of the content, wrapping non-dict types appropriately.\"\"\"<br>    # gemini supports JSON dict return values, but no other JSON types, hence we wrap anything else in a dict<br>    if isinstance(self.content, dict):<br>        return tool_return_ta.dump_python(self.content, mode='json')  # pyright: ignore[reportUnknownMemberType]<br>    else:<br>        return {'return_value': tool_return_ta.dump_python(self.content, mode='json')}<br>``` |\n\n### RetryPromptPart`dataclass`\n\nA message back to a model asking it to try again.\n\nThis can be sent for a number of reasons:\n\n- Pydantic validation of tool arguments failed, here content is derived from a Pydantic\n[`ValidationError`](https://docs.pydantic.dev/latest/api/pydantic_core/#pydantic_core.ValidationError)\n- a tool raised a [`ModelRetry`](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.ModelRetry) exception\n- no tool was found for the tool name\n- the model returned plain text when a structured response was expected\n- Pydantic validation of a structured response failed, here content is derived from a Pydantic\n[`ValidationError`](https://docs.pydantic.dev/latest/api/pydantic_core/#pydantic_core.ValidationError)\n- a result validator raised a [`ModelRetry`](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.ModelRetry) exception\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>``` | ```<br>@dataclass<br>class RetryPromptPart:<br>    \"\"\"A message back to a model asking it to try again.<br>    This can be sent for a number of reasons:<br>    * Pydantic validation of tool arguments failed, here content is derived from a Pydantic<br>      [`ValidationError`][pydantic_core.ValidationError]<br>    * a tool raised a [`ModelRetry`][pydantic_ai.exceptions.ModelRetry] exception<br>    * no tool was found for the tool name<br>    * the model returned plain text when a structured response was expected<br>    * Pydantic validation of a structured response failed, here content is derived from a Pydantic<br>      [`ValidationError`][pydantic_core.ValidationError]<br>    * a result validator raised a [`ModelRetry`][pydantic_ai.exceptions.ModelRetry] exception<br>    \"\"\"<br>    content: list[pydantic_core.ErrorDetails] | str<br>    \"\"\"Details of why and how the model should retry.<br>    If the retry was triggered by a [`ValidationError`][pydantic_core.ValidationError], this will be a list of<br>    error details.<br>    \"\"\"<br>    tool_name: str | None = None<br>    \"\"\"The name of the tool that was called, if any.\"\"\"<br>    tool_call_id: str | None = None<br>    \"\"\"Optional tool call identifier, this is used by some models including OpenAI.\"\"\"<br>    timestamp: datetime = field(default_factory=_now_utc)<br>    \"\"\"The timestamp, when the retry was triggered.\"\"\"<br>    part_kind: Literal['retry-prompt'] = 'retry-prompt'<br>    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"<br>    def model_response(self) -> str:<br>        \"\"\"Return a string message describing why the retry is requested.\"\"\"<br>        if isinstance(self.content, str):<br>            description = self.content<br>        else:<br>            json_errors = error_details_ta.dump_json(self.content, exclude={'__all__': {'ctx'}}, indent=2)<br>            description = f'{len(self.content)} validation errors: {json_errors.decode()}'<br>        return f'{description}\\n\\nFix the errors and try again.'<br>``` |\n\n#### content`instance-attribute`\n\n```\ncontent: list[ErrorDetails] | str\n\n```\n\nDetails of why and how the model should retry.\n\nIf the retry was triggered by a [`ValidationError`](https://docs.pydantic.dev/latest/api/pydantic_core/#pydantic_core.ValidationError), this will be a list of\nerror details.\n\n#### tool\\_name`class-attribute``instance-attribute`\n\n```\ntool_name: str | None = None\n\n```\n\nThe name of the tool that was called, if any.\n\n#### tool\\_call\\_id`class-attribute``instance-attribute`\n\n```\ntool_call_id: str | None = None\n\n```\n\nOptional tool call identifier, this is used by some models including OpenAI.\n\n#### timestamp`class-attribute``instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp, when the retry was triggered.\n\n#### part\\_kind`class-attribute``instance-attribute`\n\n```\npart_kind: Literal['retry-prompt'] = 'retry-prompt'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n#### model\\_response\n\n```\nmodel_response() -> str\n\n```\n\nReturn a string message describing why the retry is requested.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>``` | ```<br>def model_response(self) -> str:<br>    \"\"\"Return a string message describing why the retry is requested.\"\"\"<br>    if isinstance(self.content, str):<br>        description = self.content<br>    else:<br>        json_errors = error_details_ta.dump_json(self.content, exclude={'__all__': {'ctx'}}, indent=2)<br>        description = f'{len(self.content)} validation errors: {json_errors.decode()}'<br>    return f'{description}\\n\\nFix the errors and try again.'<br>``` |\n\n### ModelRequestPart`module-attribute`\n\n```\nModelRequestPart = Annotated[\\\n    Union[\\\n        SystemPromptPart,\\\n        UserPromptPart,\\\n        ToolReturnPart,\\\n        RetryPromptPart,\\\n    ],\\\n    Discriminator(\"part_kind\"),\\\n]\n\n```\n\nA message part sent by PydanticAI to a model.\n\n### ModelRequest`dataclass`\n\nA request generated by PydanticAI and sent to a model, e.g. a message from the PydanticAI app to the model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>``` | ```<br>@dataclass<br>class ModelRequest:<br>    \"\"\"A request generated by PydanticAI and sent to a model, e.g. a message from the PydanticAI app to the model.\"\"\"<br>    parts: list[ModelRequestPart]<br>    \"\"\"The parts of the user message.\"\"\"<br>    kind: Literal['request'] = 'request'<br>    \"\"\"Message type identifier, this is available on all parts as a discriminator.\"\"\"<br>``` |\n\n#### parts`instance-attribute`\n\n```\nparts: list[ModelRequestPart]\n\n```\n\nThe parts of the user message.\n\n#### kind`class-attribute``instance-attribute`\n\n```\nkind: Literal['request'] = 'request'\n\n```\n\nMessage type identifier, this is available on all parts as a discriminator.\n\n### TextPart`dataclass`\n\nA plain text response from a model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>``` | ```<br>@dataclass<br>class TextPart:<br>    \"\"\"A plain text response from a model.\"\"\"<br>    content: str<br>    \"\"\"The text content of the response.\"\"\"<br>    part_kind: Literal['text'] = 'text'<br>    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"<br>    def has_content(self) -> bool:<br>        \"\"\"Return `True` if the text content is non-empty.\"\"\"<br>        return bool(self.content)<br>``` |\n\n#### content`instance-attribute`\n\n```\ncontent: str\n\n```\n\nThe text content of the response.\n\n#### part\\_kind`class-attribute``instance-attribute`\n\n```\npart_kind: Literal['text'] = 'text'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n#### has\\_content\n\n```\nhas_content() -> bool\n\n```\n\nReturn `True` if the text content is non-empty.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>165<br>166<br>167<br>``` | ```<br>def has_content(self) -> bool:<br>    \"\"\"Return `True` if the text content is non-empty.\"\"\"<br>    return bool(self.content)<br>``` |\n\n### ToolCallPart`dataclass`\n\nA tool call from a model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>``` | ```<br>@dataclass<br>class ToolCallPart:<br>    \"\"\"A tool call from a model.\"\"\"<br>    tool_name: str<br>    \"\"\"The name of the tool to call.\"\"\"<br>    args: str | dict[str, Any]<br>    \"\"\"The arguments to pass to the tool.<br>    This is stored either as a JSON string or a Python dictionary depending on how data was received.<br>    \"\"\"<br>    tool_call_id: str | None = None<br>    \"\"\"Optional tool call identifier, this is used by some models including OpenAI.\"\"\"<br>    part_kind: Literal['tool-call'] = 'tool-call'<br>    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"<br>    def args_as_dict(self) -> dict[str, Any]:<br>        \"\"\"Return the arguments as a Python dictionary.<br>        This is just for convenience with models that require dicts as input.<br>        \"\"\"<br>        if isinstance(self.args, dict):<br>            return self.args<br>        args = pydantic_core.from_json(self.args)<br>        assert isinstance(args, dict), 'args should be a dict'<br>        return cast(dict[str, Any], args)<br>    def args_as_json_str(self) -> str:<br>        \"\"\"Return the arguments as a JSON string.<br>        This is just for convenience with models that require JSON strings as input.<br>        \"\"\"<br>        if isinstance(self.args, str):<br>            return self.args<br>        return pydantic_core.to_json(self.args).decode()<br>    def has_content(self) -> bool:<br>        \"\"\"Return `True` if the arguments contain any data.\"\"\"<br>        if isinstance(self.args, dict):<br>            # TODO: This should probably return True if you have the value False, or 0, etc.<br>            #   It makes sense to me to ignore empty strings, but not sure about empty lists or dicts<br>            return any(self.args.values())<br>        else:<br>            return bool(self.args)<br>``` |\n\n#### tool\\_name`instance-attribute`\n\n```\ntool_name: str\n\n```\n\nThe name of the tool to call.\n\n#### args`instance-attribute`\n\n```\nargs: str | dict[str, Any]\n\n```\n\nThe arguments to pass to the tool.\n\nThis is stored either as a JSON string or a Python dictionary depending on how data was received.\n\n#### tool\\_call\\_id`class-attribute``instance-attribute`\n\n```\ntool_call_id: str | None = None\n\n```\n\nOptional tool call identifier, this is used by some models including OpenAI.\n\n#### part\\_kind`class-attribute``instance-attribute`\n\n```\npart_kind: Literal['tool-call'] = 'tool-call'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n#### args\\_as\\_dict\n\n```\nargs_as_dict() -> dict[str, Any]\n\n```\n\nReturn the arguments as a Python dictionary.\n\nThis is just for convenience with models that require dicts as input.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>``` | ```<br>def args_as_dict(self) -> dict[str, Any]:<br>    \"\"\"Return the arguments as a Python dictionary.<br>    This is just for convenience with models that require dicts as input.<br>    \"\"\"<br>    if isinstance(self.args, dict):<br>        return self.args<br>    args = pydantic_core.from_json(self.args)<br>    assert isinstance(args, dict), 'args should be a dict'<br>    return cast(dict[str, Any], args)<br>``` |\n\n#### args\\_as\\_json\\_str\n\n```\nargs_as_json_str() -> str\n\n```\n\nReturn the arguments as a JSON string.\n\nThis is just for convenience with models that require JSON strings as input.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>``` | ```<br>def args_as_json_str(self) -> str:<br>    \"\"\"Return the arguments as a JSON string.<br>    This is just for convenience with models that require JSON strings as input.<br>    \"\"\"<br>    if isinstance(self.args, str):<br>        return self.args<br>    return pydantic_core.to_json(self.args).decode()<br>``` |\n\n#### has\\_content\n\n```\nhas_content() -> bool\n\n```\n\nReturn `True` if the arguments contain any data.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>``` | ```<br>def has_content(self) -> bool:<br>    \"\"\"Return `True` if the arguments contain any data.\"\"\"<br>    if isinstance(self.args, dict):<br>        # TODO: This should probably return True if you have the value False, or 0, etc.<br>        #   It makes sense to me to ignore empty strings, but not sure about empty lists or dicts<br>        return any(self.args.values())<br>    else:<br>        return bool(self.args)<br>``` |\n\n### ModelResponsePart`module-attribute`\n\n```\nModelResponsePart = Annotated[\\\n    Union[TextPart, ToolCallPart],\\\n    Discriminator(\"part_kind\"),\\\n]\n\n```\n\nA message part returned by a model.\n\n### ModelResponse`dataclass`\n\nA response from a model, e.g. a message from the model to the PydanticAI app.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>``` | ```<br>@dataclass<br>class ModelResponse:<br>    \"\"\"A response from a model, e.g. a message from the model to the PydanticAI app.\"\"\"<br>    parts: list[ModelResponsePart]<br>    \"\"\"The parts of the model message.\"\"\"<br>    model_name: str | None = None<br>    \"\"\"The name of the model that generated the response.\"\"\"<br>    timestamp: datetime = field(default_factory=_now_utc)<br>    \"\"\"The timestamp of the response.<br>    If the model provides a timestamp in the response (as OpenAI does) that will be used.<br>    \"\"\"<br>    kind: Literal['response'] = 'response'<br>    \"\"\"Message type identifier, this is available on all parts as a discriminator.\"\"\"<br>``` |\n\n#### parts`instance-attribute`\n\n```\nparts: list[ModelResponsePart]\n\n```\n\nThe parts of the model message.\n\n#### model\\_name`class-attribute``instance-attribute`\n\n```\nmodel_name: str | None = None\n\n```\n\nThe name of the model that generated the response.\n\n#### timestamp`class-attribute``instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp of the response.\n\nIf the model provides a timestamp in the response (as OpenAI does) that will be used.\n\n#### kind`class-attribute``instance-attribute`\n\n```\nkind: Literal['response'] = 'response'\n\n```\n\nMessage type identifier, this is available on all parts as a discriminator.\n\n### ModelMessage`module-attribute`\n\n```\nModelMessage = Annotated[\\\n    Union[ModelRequest, ModelResponse],\\\n    Discriminator(\"kind\"),\\\n]\n\n```\n\nAny message sent to or returned by a model.\n\n### ModelMessagesTypeAdapter`module-attribute`\n\n```\nModelMessagesTypeAdapter = TypeAdapter(\n    list[ModelMessage], config=ConfigDict(defer_build=True)\n)\n\n```\n\nPydantic [`TypeAdapter`](https://docs.pydantic.dev/latest/api/type_adapter/#pydantic.type_adapter.TypeAdapter) for (de)serializing messages.\n\n### TextPartDelta`dataclass`\n\nA partial update (delta) for a `TextPart` to append new text content.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>``` | ```<br>@dataclass<br>class TextPartDelta:<br>    \"\"\"A partial update (delta) for a `TextPart` to append new text content.\"\"\"<br>    content_delta: str<br>    \"\"\"The incremental text content to add to the existing `TextPart` content.\"\"\"<br>    part_delta_kind: Literal['text'] = 'text'<br>    \"\"\"Part delta type identifier, used as a discriminator.\"\"\"<br>    def apply(self, part: ModelResponsePart) -> TextPart:<br>        \"\"\"Apply this text delta to an existing `TextPart`.<br>        Args:<br>            part: The existing model response part, which must be a `TextPart`.<br>        Returns:<br>            A new `TextPart` with updated text content.<br>        Raises:<br>            ValueError: If `part` is not a `TextPart`.<br>        \"\"\"<br>        if not isinstance(part, TextPart):<br>            raise ValueError('Cannot apply TextPartDeltas to non-TextParts')<br>        return replace(part, content=part.content + self.content_delta)<br>``` |\n\n#### content\\_delta`instance-attribute`\n\n```\ncontent_delta: str\n\n```\n\nThe incremental text content to add to the existing `TextPart` content.\n\n#### part\\_delta\\_kind`class-attribute``instance-attribute`\n\n```\npart_delta_kind: Literal['text'] = 'text'\n\n```\n\nPart delta type identifier, used as a discriminator.\n\n#### apply\n\n```\napply(part: ModelResponsePart) -> TextPart\n\n```\n\nApply this text delta to an existing `TextPart`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `part` | `ModelResponsePart` | The existing model response part, which must be a `TextPart`. | _required_ |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `TextPart` | A new `TextPart` with updated text content. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValueError` | If `part` is not a `TextPart`. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>``` | ```<br>def apply(self, part: ModelResponsePart) -> TextPart:<br>    \"\"\"Apply this text delta to an existing `TextPart`.<br>    Args:<br>        part: The existing model response part, which must be a `TextPart`.<br>    Returns:<br>        A new `TextPart` with updated text content.<br>    Raises:<br>        ValueError: If `part` is not a `TextPart`.<br>    \"\"\"<br>    if not isinstance(part, TextPart):<br>        raise ValueError('Cannot apply TextPartDeltas to non-TextParts')<br>    return replace(part, content=part.content + self.content_delta)<br>``` |\n\n### ToolCallPartDelta`dataclass`\n\nA partial update (delta) for a `ToolCallPart` to modify tool name, arguments, or tool call ID.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>``` | ```<br>@dataclass<br>class ToolCallPartDelta:<br>    \"\"\"A partial update (delta) for a `ToolCallPart` to modify tool name, arguments, or tool call ID.\"\"\"<br>    tool_name_delta: str | None = None<br>    \"\"\"Incremental text to add to the existing tool name, if any.\"\"\"<br>    args_delta: str | dict[str, Any] | None = None<br>    \"\"\"Incremental data to add to the tool arguments.<br>    If this is a string, it will be appended to existing JSON arguments.<br>    If this is a dict, it will be merged with existing dict arguments.<br>    \"\"\"<br>    tool_call_id: str | None = None<br>    \"\"\"Optional tool call identifier, this is used by some models including OpenAI.<br>    Note this is never treated as a delta — it can replace None, but otherwise if a<br>    non-matching value is provided an error will be raised.\"\"\"<br>    part_delta_kind: Literal['tool_call'] = 'tool_call'<br>    \"\"\"Part delta type identifier, used as a discriminator.\"\"\"<br>    def as_part(self) -> ToolCallPart | None:<br>        \"\"\"Convert this delta to a fully formed `ToolCallPart` if possible, otherwise return `None`.<br>        Returns:<br>            A `ToolCallPart` if both `tool_name_delta` and `args_delta` are set, otherwise `None`.<br>        \"\"\"<br>        if self.tool_name_delta is None or self.args_delta is None:<br>            return None<br>        return ToolCallPart(<br>            self.tool_name_delta,<br>            self.args_delta,<br>            self.tool_call_id,<br>        )<br>    @overload<br>    def apply(self, part: ModelResponsePart) -> ToolCallPart: ...<br>    @overload<br>    def apply(self, part: ModelResponsePart | ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta: ...<br>    def apply(self, part: ModelResponsePart | ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta:<br>        \"\"\"Apply this delta to a part or delta, returning a new part or delta with the changes applied.<br>        Args:<br>            part: The existing model response part or delta to update.<br>        Returns:<br>            Either a new `ToolCallPart` or an updated `ToolCallPartDelta`.<br>        Raises:<br>            ValueError: If `part` is neither a `ToolCallPart` nor a `ToolCallPartDelta`.<br>            UnexpectedModelBehavior: If applying JSON deltas to dict arguments or vice versa.<br>        \"\"\"<br>        if isinstance(part, ToolCallPart):<br>            return self._apply_to_part(part)<br>        if isinstance(part, ToolCallPartDelta):<br>            return self._apply_to_delta(part)<br>        raise ValueError(f'Can only apply ToolCallPartDeltas to ToolCallParts or ToolCallPartDeltas, not {part}')<br>    def _apply_to_delta(self, delta: ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta:<br>        \"\"\"Internal helper to apply this delta to another delta.\"\"\"<br>        if self.tool_name_delta:<br>            # Append incremental text to the existing tool_name_delta<br>            updated_tool_name_delta = (delta.tool_name_delta or '') + self.tool_name_delta<br>            delta = replace(delta, tool_name_delta=updated_tool_name_delta)<br>        if isinstance(self.args_delta, str):<br>            if isinstance(delta.args_delta, dict):<br>                raise UnexpectedModelBehavior(<br>                    f'Cannot apply JSON deltas to non-JSON tool arguments ({delta=}, {self=})'<br>                )<br>            updated_args_delta = (delta.args_delta or '') + self.args_delta<br>            delta = replace(delta, args_delta=updated_args_delta)<br>        elif isinstance(self.args_delta, dict):<br>            if isinstance(delta.args_delta, str):<br>                raise UnexpectedModelBehavior(<br>                    f'Cannot apply dict deltas to non-dict tool arguments ({delta=}, {self=})'<br>                )<br>            updated_args_delta = {**(delta.args_delta or {}), **self.args_delta}<br>            delta = replace(delta, args_delta=updated_args_delta)<br>        if self.tool_call_id:<br>            # Set the tool_call_id if it wasn't present, otherwise error if it has changed<br>            if delta.tool_call_id is not None and delta.tool_call_id != self.tool_call_id:<br>                raise UnexpectedModelBehavior(<br>                    f'Cannot apply a new tool_call_id to a ToolCallPartDelta that already has one ({delta=}, {self=})'<br>                )<br>            delta = replace(delta, tool_call_id=self.tool_call_id)<br>        # If we now have enough data to create a full ToolCallPart, do so<br>        if delta.tool_name_delta is not None and delta.args_delta is not None:<br>            return ToolCallPart(<br>                delta.tool_name_delta,<br>                delta.args_delta,<br>                delta.tool_call_id,<br>            )<br>        return delta<br>    def _apply_to_part(self, part: ToolCallPart) -> ToolCallPart:<br>        \"\"\"Internal helper to apply this delta directly to a `ToolCallPart`.\"\"\"<br>        if self.tool_name_delta:<br>            # Append incremental text to the existing tool_name<br>            tool_name = part.tool_name + self.tool_name_delta<br>            part = replace(part, tool_name=tool_name)<br>        if isinstance(self.args_delta, str):<br>            if not isinstance(part.args, str):<br>                raise UnexpectedModelBehavior(f'Cannot apply JSON deltas to non-JSON tool arguments ({part=}, {self=})')<br>            updated_json = part.args + self.args_delta<br>            part = replace(part, args=updated_json)<br>        elif isinstance(self.args_delta, dict):<br>            if not isinstance(part.args, dict):<br>                raise UnexpectedModelBehavior(f'Cannot apply dict deltas to non-dict tool arguments ({part=}, {self=})')<br>            updated_dict = {**(part.args or {}), **self.args_delta}<br>            part = replace(part, args=updated_dict)<br>        if self.tool_call_id:<br>            # Replace the tool_call_id entirely if given<br>            if part.tool_call_id is not None and part.tool_call_id != self.tool_call_id:<br>                raise UnexpectedModelBehavior(<br>                    f'Cannot apply a new tool_call_id to a ToolCallPartDelta that already has one ({part=}, {self=})'<br>                )<br>            part = replace(part, tool_call_id=self.tool_call_id)<br>        return part<br>``` |\n\n#### tool\\_name\\_delta`class-attribute``instance-attribute`\n\n```\ntool_name_delta: str | None = None\n\n```\n\nIncremental text to add to the existing tool name, if any.\n\n#### args\\_delta`class-attribute``instance-attribute`\n\n```\nargs_delta: str | dict[str, Any] | None = None\n\n```\n\nIncremental data to add to the tool arguments.\n\nIf this is a string, it will be appended to existing JSON arguments.\nIf this is a dict, it will be merged with existing dict arguments.\n\n#### tool\\_call\\_id`class-attribute``instance-attribute`\n\n```\ntool_call_id: str | None = None\n\n```\n\nOptional tool call identifier, this is used by some models including OpenAI.\n\nNote this is never treated as a delta — it can replace None, but otherwise if a\nnon-matching value is provided an error will be raised.\n\n#### part\\_delta\\_kind`class-attribute``instance-attribute`\n\n```\npart_delta_kind: Literal['tool_call'] = 'tool_call'\n\n```\n\nPart delta type identifier, used as a discriminator.\n\n#### as\\_part\n\n```\nas_part() -> ToolCallPart | None\n\n```\n\nConvert this delta to a fully formed `ToolCallPart` if possible, otherwise return `None`.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `ToolCallPart | None` | A `ToolCallPart` if both `tool_name_delta` and `args_delta` are set, otherwise `None`. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>``` | ```<br>def as_part(self) -> ToolCallPart | None:<br>    \"\"\"Convert this delta to a fully formed `ToolCallPart` if possible, otherwise return `None`.<br>    Returns:<br>        A `ToolCallPart` if both `tool_name_delta` and `args_delta` are set, otherwise `None`.<br>    \"\"\"<br>    if self.tool_name_delta is None or self.args_delta is None:<br>        return None<br>    return ToolCallPart(<br>        self.tool_name_delta,<br>        self.args_delta,<br>        self.tool_call_id,<br>    )<br>``` |\n\n#### apply\n\n```\napply(part: ModelResponsePart) -> ToolCallPart\n\n```\n\n```\napply(\n    part: ModelResponsePart | ToolCallPartDelta,\n) -> ToolCallPart | ToolCallPartDelta\n\n```\n\n```\napply(\n    part: ModelResponsePart | ToolCallPartDelta,\n) -> ToolCallPart | ToolCallPartDelta\n\n```\n\nApply this delta to a part or delta, returning a new part or delta with the changes applied.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `part` | `ModelResponsePart | ToolCallPartDelta` | The existing model response part or delta to update. | _required_ |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `ToolCallPart | ToolCallPartDelta` | Either a new `ToolCallPart` or an updated `ToolCallPartDelta`. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValueError` | If `part` is neither a `ToolCallPart` nor a `ToolCallPartDelta`. |\n| `UnexpectedModelBehavior` | If applying JSON deltas to dict arguments or vice versa. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>``` | ```<br>def apply(self, part: ModelResponsePart | ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta:<br>    \"\"\"Apply this delta to a part or delta, returning a new part or delta with the changes applied.<br>    Args:<br>        part: The existing model response part or delta to update.<br>    Returns:<br>        Either a new `ToolCallPart` or an updated `ToolCallPartDelta`.<br>    Raises:<br>        ValueError: If `part` is neither a `ToolCallPart` nor a `ToolCallPartDelta`.<br>        UnexpectedModelBehavior: If applying JSON deltas to dict arguments or vice versa.<br>    \"\"\"<br>    if isinstance(part, ToolCallPart):<br>        return self._apply_to_part(part)<br>    if isinstance(part, ToolCallPartDelta):<br>        return self._apply_to_delta(part)<br>    raise ValueError(f'Can only apply ToolCallPartDeltas to ToolCallParts or ToolCallPartDeltas, not {part}')<br>``` |\n\n### ModelResponsePartDelta`module-attribute`\n\n```\nModelResponsePartDelta = Annotated[\\\n    Union[TextPartDelta, ToolCallPartDelta],\\\n    Discriminator(\"part_delta_kind\"),\\\n]\n\n```\n\nA partial update (delta) for any model response part.\n\n### PartStartEvent`dataclass`\n\nAn event indicating that a new part has started.\n\nIf multiple `PartStartEvent` s are received with the same index,\nthe new one should fully replace the old one.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>``` | ```<br>@dataclass<br>class PartStartEvent:<br>    \"\"\"An event indicating that a new part has started.<br>    If multiple `PartStartEvent`s are received with the same index,<br>    the new one should fully replace the old one.<br>    \"\"\"<br>    index: int<br>    \"\"\"The index of the part within the overall response parts list.\"\"\"<br>    part: ModelResponsePart<br>    \"\"\"The newly started `ModelResponsePart`.\"\"\"<br>    event_kind: Literal['part_start'] = 'part_start'<br>    \"\"\"Event type identifier, used as a discriminator.\"\"\"<br>``` |\n\n#### index`instance-attribute`\n\n```\nindex: int\n\n```\n\nThe index of the part within the overall response parts list.\n\n#### part`instance-attribute`\n\n```\npart: ModelResponsePart\n\n```\n\nThe newly started `ModelResponsePart`.\n\n#### event\\_kind`class-attribute``instance-attribute`\n\n```\nevent_kind: Literal['part_start'] = 'part_start'\n\n```\n\nEvent type identifier, used as a discriminator.\n\n### PartDeltaEvent`dataclass`\n\nAn event indicating a delta update for an existing part.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n\n|     |     |\n| --- | --- |\n| ```<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>``` | ```<br>@dataclass<br>class PartDeltaEvent:<br>    \"\"\"An event indicating a delta update for an existing part.\"\"\"<br>    index: int<br>    \"\"\"The index of the part within the overall response parts list.\"\"\"<br>    delta: ModelResponsePartDelta<br>    \"\"\"The delta to apply to the specified part.\"\"\"<br>    event_kind: Literal['part_delta'] = 'part_delta'<br>    \"\"\"Event type identifier, used as a discriminator.\"\"\"<br>``` |\n\n#### index`instance-attribute`\n\n```\nindex: int\n\n```\n\nThe index of the part within the overall response parts list.\n\n#### delta`instance-attribute`\n\n```\ndelta: ModelResponsePartDelta\n\n```\n\nThe delta to apply to the specified part.\n\n#### event\\_kind`class-attribute``instance-attribute`\n\n```\nevent_kind: Literal['part_delta'] = 'part_delta'\n\n```\n\nEvent type identifier, used as a discriminator.\n\n### ModelResponseStreamEvent`module-attribute`\n\n```\nModelResponseStreamEvent = Annotated[\\\n    Union[PartStartEvent, PartDeltaEvent],\\\n    Discriminator(\"event_kind\"),\\\n]\n\n```\n\nAn event in the model response stream, either starting a new part or applying a delta to an existing one.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/messages/",
      "ogUrl": "https://ai.pydantic.dev/api/messages/",
      "title": "pydantic_ai.messages - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/messages/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/messages.png",
      "ogTitle": "pydantic_ai.messages - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/messages.png",
      "og:title": "pydantic_ai.messages - PydanticAI",
      "scrapeId": "598858da-b522-4e70-a9ab-0f3177b1330d",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/messages/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/messages.png",
      "twitter:title": "pydantic_ai.messages - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/usage/#pydantic_aiusage)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.usage`\n\n### Usage`dataclass`\n\nLLM usage associated with a request or run.\n\nResponsibility for calculating usage is on the model; PydanticAI simply sums the usage information across requests.\n\nYou'll need to look up the documentation of the model you're using to convert usage to monetary costs.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n|     |     |\n| --- | --- |\n| ```<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>``` | ```<br>@dataclass<br>class Usage:<br>    \"\"\"LLM usage associated with a request or run.<br>    Responsibility for calculating usage is on the model; PydanticAI simply sums the usage information across requests.<br>    You'll need to look up the documentation of the model you're using to convert usage to monetary costs.<br>    \"\"\"<br>    requests: int = 0<br>    \"\"\"Number of requests made to the LLM API.\"\"\"<br>    request_tokens: int | None = None<br>    \"\"\"Tokens used in processing requests.\"\"\"<br>    response_tokens: int | None = None<br>    \"\"\"Tokens used in generating responses.\"\"\"<br>    total_tokens: int | None = None<br>    \"\"\"Total tokens used in the whole run, should generally be equal to `request_tokens + response_tokens`.\"\"\"<br>    details: dict[str, int] | None = None<br>    \"\"\"Any extra details returned by the model.\"\"\"<br>    def incr(self, incr_usage: Usage, *, requests: int = 0) -> None:<br>        \"\"\"Increment the usage in place.<br>        Args:<br>            incr_usage: The usage to increment by.<br>            requests: The number of requests to increment by in addition to `incr_usage.requests`.<br>        \"\"\"<br>        self.requests += requests<br>        for f in 'requests', 'request_tokens', 'response_tokens', 'total_tokens':<br>            self_value = getattr(self, f)<br>            other_value = getattr(incr_usage, f)<br>            if self_value is not None or other_value is not None:<br>                setattr(self, f, (self_value or 0) + (other_value or 0))<br>        if incr_usage.details:<br>            self.details = self.details or {}<br>            for key, value in incr_usage.details.items():<br>                self.details[key] = self.details.get(key, 0) + value<br>    def __add__(self, other: Usage) -> Usage:<br>        \"\"\"Add two Usages together.<br>        This is provided so it's trivial to sum usage information from multiple requests and runs.<br>        \"\"\"<br>        new_usage = copy(self)<br>        new_usage.incr(other)<br>        return new_usage<br>``` |\n\n#### requests`class-attribute``instance-attribute`\n\n```\nrequests: int = 0\n\n```\n\nNumber of requests made to the LLM API.\n\n#### request\\_tokens`class-attribute``instance-attribute`\n\n```\nrequest_tokens: int | None = None\n\n```\n\nTokens used in processing requests.\n\n#### response\\_tokens`class-attribute``instance-attribute`\n\n```\nresponse_tokens: int | None = None\n\n```\n\nTokens used in generating responses.\n\n#### total\\_tokens`class-attribute``instance-attribute`\n\n```\ntotal_tokens: int | None = None\n\n```\n\nTotal tokens used in the whole run, should generally be equal to `request_tokens + response_tokens`.\n\n#### details`class-attribute``instance-attribute`\n\n```\ndetails: dict[str, int] | None = None\n\n```\n\nAny extra details returned by the model.\n\n#### incr\n\n```\nincr(incr_usage: Usage, *, requests: int = 0) -> None\n\n```\n\nIncrement the usage in place.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `incr_usage` | `Usage` | The usage to increment by. | _required_ |\n| `requests` | `int` | The number of requests to increment by in addition to `incr_usage.requests`. | `0` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n|     |     |\n| --- | --- |\n| ```<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>``` | ```<br>def incr(self, incr_usage: Usage, *, requests: int = 0) -> None:<br>    \"\"\"Increment the usage in place.<br>    Args:<br>        incr_usage: The usage to increment by.<br>        requests: The number of requests to increment by in addition to `incr_usage.requests`.<br>    \"\"\"<br>    self.requests += requests<br>    for f in 'requests', 'request_tokens', 'response_tokens', 'total_tokens':<br>        self_value = getattr(self, f)<br>        other_value = getattr(incr_usage, f)<br>        if self_value is not None or other_value is not None:<br>            setattr(self, f, (self_value or 0) + (other_value or 0))<br>    if incr_usage.details:<br>        self.details = self.details or {}<br>        for key, value in incr_usage.details.items():<br>            self.details[key] = self.details.get(key, 0) + value<br>``` |\n\n#### \\_\\_add\\_\\_\n\n```\n__add__(other: Usage) -> Usage\n\n```\n\nAdd two Usages together.\n\nThis is provided so it's trivial to sum usage information from multiple requests and runs.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n|     |     |\n| --- | --- |\n| ```<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>``` | ```<br>def __add__(self, other: Usage) -> Usage:<br>    \"\"\"Add two Usages together.<br>    This is provided so it's trivial to sum usage information from multiple requests and runs.<br>    \"\"\"<br>    new_usage = copy(self)<br>    new_usage.incr(other)<br>    return new_usage<br>``` |\n\n### UsageLimits`dataclass`\n\nLimits on model usage.\n\nThe request count is tracked by pydantic\\_ai, and the request limit is checked before each request to the model.\nToken counts are provided in responses from the model, and the token limits are checked after each response.\n\nEach of the limits can be set to `None` to disable that limit.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>``` | ```<br>@dataclass<br>class UsageLimits:<br>    \"\"\"Limits on model usage.<br>    The request count is tracked by pydantic_ai, and the request limit is checked before each request to the model.<br>    Token counts are provided in responses from the model, and the token limits are checked after each response.<br>    Each of the limits can be set to `None` to disable that limit.<br>    \"\"\"<br>    request_limit: int | None = 50<br>    \"\"\"The maximum number of requests allowed to the model.\"\"\"<br>    request_tokens_limit: int | None = None<br>    \"\"\"The maximum number of tokens allowed in requests to the model.\"\"\"<br>    response_tokens_limit: int | None = None<br>    \"\"\"The maximum number of tokens allowed in responses from the model.\"\"\"<br>    total_tokens_limit: int | None = None<br>    \"\"\"The maximum number of tokens allowed in requests and responses combined.\"\"\"<br>    def has_token_limits(self) -> bool:<br>        \"\"\"Returns `True` if this instance places any limits on token counts.<br>        If this returns `False`, the `check_tokens` method will never raise an error.<br>        This is useful because if we have token limits, we need to check them after receiving each streamed message.<br>        If there are no limits, we can skip that processing in the streaming response iterator.<br>        \"\"\"<br>        return any(<br>            limit is not None<br>            for limit in (self.request_tokens_limit, self.response_tokens_limit, self.total_tokens_limit)<br>        )<br>    def check_before_request(self, usage: Usage) -> None:<br>        \"\"\"Raises a `UsageLimitExceeded` exception if the next request would exceed the request_limit.\"\"\"<br>        request_limit = self.request_limit<br>        if request_limit is not None and usage.requests >= request_limit:<br>            raise UsageLimitExceeded(f'The next request would exceed the request_limit of {request_limit}')<br>    def check_tokens(self, usage: Usage) -> None:<br>        \"\"\"Raises a `UsageLimitExceeded` exception if the usage exceeds any of the token limits.\"\"\"<br>        request_tokens = usage.request_tokens or 0<br>        if self.request_tokens_limit is not None and request_tokens > self.request_tokens_limit:<br>            raise UsageLimitExceeded(<br>                f'Exceeded the request_tokens_limit of {self.request_tokens_limit} ({request_tokens=})'<br>            )<br>        response_tokens = usage.response_tokens or 0<br>        if self.response_tokens_limit is not None and response_tokens > self.response_tokens_limit:<br>            raise UsageLimitExceeded(<br>                f'Exceeded the response_tokens_limit of {self.response_tokens_limit} ({response_tokens=})'<br>            )<br>        total_tokens = usage.total_tokens or 0<br>        if self.total_tokens_limit is not None and total_tokens > self.total_tokens_limit:<br>            raise UsageLimitExceeded(f'Exceeded the total_tokens_limit of {self.total_tokens_limit} ({total_tokens=})')<br>``` |\n\n#### request\\_limit`class-attribute``instance-attribute`\n\n```\nrequest_limit: int | None = 50\n\n```\n\nThe maximum number of requests allowed to the model.\n\n#### request\\_tokens\\_limit`class-attribute``instance-attribute`\n\n```\nrequest_tokens_limit: int | None = None\n\n```\n\nThe maximum number of tokens allowed in requests to the model.\n\n#### response\\_tokens\\_limit`class-attribute``instance-attribute`\n\n```\nresponse_tokens_limit: int | None = None\n\n```\n\nThe maximum number of tokens allowed in responses from the model.\n\n#### total\\_tokens\\_limit`class-attribute``instance-attribute`\n\n```\ntotal_tokens_limit: int | None = None\n\n```\n\nThe maximum number of tokens allowed in requests and responses combined.\n\n#### has\\_token\\_limits\n\n```\nhas_token_limits() -> bool\n\n```\n\nReturns `True` if this instance places any limits on token counts.\n\nIf this returns `False`, the `check_tokens` method will never raise an error.\n\nThis is useful because if we have token limits, we need to check them after receiving each streamed message.\nIf there are no limits, we can skip that processing in the streaming response iterator.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n|     |     |\n| --- | --- |\n| ```<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>``` | ```<br>def has_token_limits(self) -> bool:<br>    \"\"\"Returns `True` if this instance places any limits on token counts.<br>    If this returns `False`, the `check_tokens` method will never raise an error.<br>    This is useful because if we have token limits, we need to check them after receiving each streamed message.<br>    If there are no limits, we can skip that processing in the streaming response iterator.<br>    \"\"\"<br>    return any(<br>        limit is not None<br>        for limit in (self.request_tokens_limit, self.response_tokens_limit, self.total_tokens_limit)<br>    )<br>``` |\n\n#### check\\_before\\_request\n\n```\ncheck_before_request(usage: Usage) -> None\n\n```\n\nRaises a `UsageLimitExceeded` exception if the next request would exceed the request\\_limit.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n|     |     |\n| --- | --- |\n| ```<br>92<br>93<br>94<br>95<br>96<br>``` | ```<br>def check_before_request(self, usage: Usage) -> None:<br>    \"\"\"Raises a `UsageLimitExceeded` exception if the next request would exceed the request_limit.\"\"\"<br>    request_limit = self.request_limit<br>    if request_limit is not None and usage.requests >= request_limit:<br>        raise UsageLimitExceeded(f'The next request would exceed the request_limit of {request_limit}')<br>``` |\n\n#### check\\_tokens\n\n```\ncheck_tokens(usage: Usage) -> None\n\n```\n\nRaises a `UsageLimitExceeded` exception if the usage exceeds any of the token limits.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>``` | ```<br>def check_tokens(self, usage: Usage) -> None:<br>    \"\"\"Raises a `UsageLimitExceeded` exception if the usage exceeds any of the token limits.\"\"\"<br>    request_tokens = usage.request_tokens or 0<br>    if self.request_tokens_limit is not None and request_tokens > self.request_tokens_limit:<br>        raise UsageLimitExceeded(<br>            f'Exceeded the request_tokens_limit of {self.request_tokens_limit} ({request_tokens=})'<br>        )<br>    response_tokens = usage.response_tokens or 0<br>    if self.response_tokens_limit is not None and response_tokens > self.response_tokens_limit:<br>        raise UsageLimitExceeded(<br>            f'Exceeded the response_tokens_limit of {self.response_tokens_limit} ({response_tokens=})'<br>        )<br>    total_tokens = usage.total_tokens or 0<br>    if self.total_tokens_limit is not None and total_tokens > self.total_tokens_limit:<br>        raise UsageLimitExceeded(f'Exceeded the total_tokens_limit of {self.total_tokens_limit} ({total_tokens=})')<br>``` |",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/usage/",
      "ogUrl": "https://ai.pydantic.dev/api/usage/",
      "title": "pydantic_ai.usage - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/usage/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/usage.png",
      "ogTitle": "pydantic_ai.usage - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/usage.png",
      "og:title": "pydantic_ai.usage - PydanticAI",
      "scrapeId": "c6cadb7e-5132-41fc-98c8-4c816b203333",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/usage/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/usage.png",
      "twitter:title": "pydantic_ai.usage - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/stream-whales/#running-the-example)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Stream whales\n\nInformation about whales — an example of streamed structured response validation.\n\nDemonstrates:\n\n- [streaming structured responses](https://ai.pydantic.dev/results/#streaming-structured-responses)\n\nThis script streams structured responses from GPT-4 about whales, validates the data\nand displays it as a dynamic table using [`rich`](https://github.com/Textualize/rich) as the data is received.\n\n## Running the Example\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/stream-whales/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/stream-whales/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.stream_whales\n\n```\n\n```\nuv run -m pydantic_ai_examples.stream_whales\n\n```\n\nShould give an output like this:\n\n## Example Code\n\nstream\\_whales.py\n\n```\nfrom typing import Annotated\n\nimport logfire\nfrom pydantic import Field, ValidationError\nfrom rich.console import Console\nfrom rich.live import Live\nfrom rich.table import Table\nfrom typing_extensions import NotRequired, TypedDict\n\nfrom pydantic_ai import Agent\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nclass Whale(TypedDict):\n    name: str\n    length: Annotated[\\\n        float, Field(description='Average length of an adult whale in meters.')\\\n    ]\n    weight: NotRequired[\\\n        Annotated[\\\n            float,\\\n            Field(description='Average weight of an adult whale in kilograms.', ge=50),\\\n        ]\\\n    ]\n    ocean: NotRequired[str]\n    description: NotRequired[Annotated[str, Field(description='Short Description')]]\n\nagent = Agent('openai:gpt-4', result_type=list[Whale])\n\nasync def main():\n    console = Console()\n    with Live('\\n' * 36, console=console) as live:\n        console.print('Requesting data...', style='cyan')\n        async with agent.run_stream(\n            'Generate me details of 5 species of Whale.'\n        ) as result:\n            console.print('Response:', style='green')\n\n            async for message, last in result.stream_structured(debounce_by=0.01):\n                try:\n                    whales = await result.validate_structured_result(\n                        message, allow_partial=not last\n                    )\n                except ValidationError as exc:\n                    if all(\n                        e['type'] == 'missing' and e['loc'] == ('response',)\n                        for e in exc.errors()\n                    ):\n                        continue\n                    else:\n                        raise\n\n                table = Table(\n                    title='Species of Whale',\n                    caption='Streaming Structured responses from GPT-4',\n                    width=120,\n                )\n                table.add_column('ID', justify='right')\n                table.add_column('Name')\n                table.add_column('Avg. Length (m)', justify='right')\n                table.add_column('Avg. Weight (kg)', justify='right')\n                table.add_column('Ocean')\n                table.add_column('Description', justify='right')\n\n                for wid, whale in enumerate(whales, start=1):\n                    table.add_row(\n                        str(wid),\n                        whale['name'],\n                        f'{whale[\"length\"]:0.0f}',\n                        f'{w:0.0f}' if (w := whale.get('weight')) else '…',\n                        whale.get('ocean') or '…',\n                        whale.get('description') or '…',\n                    )\n                live.update(table)\n\nif __name__ == '__main__':\n    import asyncio\n\n    asyncio.run(main())\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/stream-whales/",
      "ogUrl": "https://ai.pydantic.dev/examples/stream-whales/",
      "title": "Stream whales - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/stream-whales/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/stream-whales.png",
      "ogTitle": "Stream whales - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/stream-whales.png",
      "og:title": "Stream whales - PydanticAI",
      "scrapeId": "cf7dbc64-38f0-4624-a808-d695d05a5178",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/stream-whales/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/stream-whales.png",
      "twitter:title": "Stream whales - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/chat-app/#chat-app-with-fastapi)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Chat App with FastAPI\n\nSimple chat app example build with FastAPI.\n\nDemonstrates:\n\n- [reusing chat history](https://ai.pydantic.dev/message-history/)\n- [serializing messages](https://ai.pydantic.dev/message-history/#accessing-messages-from-results)\n- [streaming responses](https://ai.pydantic.dev/results/#streamed-results)\n\nThis demonstrates storing chat history between requests and using it to give the model context for new responses.\n\nMost of the complex logic here is between `chat_app.py` which streams the response to the browser,\nand `chat_app.ts` which renders messages in the browser.\n\n## Running the Example\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/chat-app/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/chat-app/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.chat_app\n\n```\n\n```\nuv run -m pydantic_ai_examples.chat_app\n\n```\n\nThen open the app at [localhost:8000](http://localhost:8000/).\n\n[![Example conversation](https://ai.pydantic.dev/img/chat-app-example.png)](https://ai.pydantic.dev/img/chat-app-example.png)\n\n## Example Code\n\nPython code that runs the chat app:\n\nchat\\_app.py\n\n```\nfrom __future__ import annotations as _annotations\n\nimport asyncio\nimport json\nimport sqlite3\nfrom collections.abc import AsyncIterator\nfrom concurrent.futures.thread import ThreadPoolExecutor\nfrom contextlib import asynccontextmanager\nfrom dataclasses import dataclass\nfrom datetime import datetime, timezone\nfrom functools import partial\nfrom pathlib import Path\nfrom typing import Annotated, Any, Callable, Literal, TypeVar\n\nimport fastapi\nimport logfire\nfrom fastapi import Depends, Request\nfrom fastapi.responses import FileResponse, Response, StreamingResponse\nfrom typing_extensions import LiteralString, ParamSpec, TypedDict\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.exceptions import UnexpectedModelBehavior\nfrom pydantic_ai.messages import (\n    ModelMessage,\n    ModelMessagesTypeAdapter,\n    ModelRequest,\n    ModelResponse,\n    TextPart,\n    UserPromptPart,\n)\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nagent = Agent('openai:gpt-4o')\nTHIS_DIR = Path(__file__).parent\n\n@asynccontextmanager\nasync def lifespan(_app: fastapi.FastAPI):\n    async with Database.connect() as db:\n        yield {'db': db}\n\napp = fastapi.FastAPI(lifespan=lifespan)\nlogfire.instrument_fastapi(app)\n\n@app.get('/')\nasync def index() -> FileResponse:\n    return FileResponse((THIS_DIR / 'chat_app.html'), media_type='text/html')\n\n@app.get('/chat_app.ts')\nasync def main_ts() -> FileResponse:\n    \"\"\"Get the raw typescript code, it's compiled in the browser, forgive me.\"\"\"\n    return FileResponse((THIS_DIR / 'chat_app.ts'), media_type='text/plain')\n\nasync def get_db(request: Request) -> Database:\n    return request.state.db\n\n@app.get('/chat/')\nasync def get_chat(database: Database = Depends(get_db)) -> Response:\n    msgs = await database.get_messages()\n    return Response(\n        b'\\n'.join(json.dumps(to_chat_message(m)).encode('utf-8') for m in msgs),\n        media_type='text/plain',\n    )\n\nclass ChatMessage(TypedDict):\n    \"\"\"Format of messages sent to the browser.\"\"\"\n\n    role: Literal['user', 'model']\n    timestamp: str\n    content: str\n\ndef to_chat_message(m: ModelMessage) -> ChatMessage:\n    first_part = m.parts[0]\n    if isinstance(m, ModelRequest):\n        if isinstance(first_part, UserPromptPart):\n            return {\n                'role': 'user',\n                'timestamp': first_part.timestamp.isoformat(),\n                'content': first_part.content,\n            }\n    elif isinstance(m, ModelResponse):\n        if isinstance(first_part, TextPart):\n            return {\n                'role': 'model',\n                'timestamp': m.timestamp.isoformat(),\n                'content': first_part.content,\n            }\n    raise UnexpectedModelBehavior(f'Unexpected message type for chat app: {m}')\n\n@app.post('/chat/')\nasync def post_chat(\n    prompt: Annotated[str, fastapi.Form()], database: Database = Depends(get_db)\n) -> StreamingResponse:\n    async def stream_messages():\n        \"\"\"Streams new line delimited JSON `Message`s to the client.\"\"\"\n        # stream the user prompt so that can be displayed straight away\n        yield (\n            json.dumps(\n                {\n                    'role': 'user',\n                    'timestamp': datetime.now(tz=timezone.utc).isoformat(),\n                    'content': prompt,\n                }\n            ).encode('utf-8')\n            + b'\\n'\n        )\n        # get the chat history so far to pass as context to the agent\n        messages = await database.get_messages()\n        # run the agent with the user prompt and the chat history\n        async with agent.run_stream(prompt, message_history=messages) as result:\n            async for text in result.stream(debounce_by=0.01):\n                # text here is a `str` and the frontend wants\n                # JSON encoded ModelResponse, so we create one\n                m = ModelResponse(parts=[TextPart(text)], timestamp=result.timestamp())\n                yield json.dumps(to_chat_message(m)).encode('utf-8') + b'\\n'\n\n        # add new messages (e.g. the user prompt and the agent response in this case) to the database\n        await database.add_messages(result.new_messages_json())\n\n    return StreamingResponse(stream_messages(), media_type='text/plain')\n\nP = ParamSpec('P')\nR = TypeVar('R')\n\n@dataclass\nclass Database:\n    \"\"\"Rudimentary database to store chat messages in SQLite.\n\n    The SQLite standard library package is synchronous, so we\n    use a thread pool executor to run queries asynchronously.\n    \"\"\"\n\n    con: sqlite3.Connection\n    _loop: asyncio.AbstractEventLoop\n    _executor: ThreadPoolExecutor\n\n    @classmethod\n    @asynccontextmanager\n    async def connect(\n        cls, file: Path = THIS_DIR / '.chat_app_messages.sqlite'\n    ) -> AsyncIterator[Database]:\n        with logfire.span('connect to DB'):\n            loop = asyncio.get_event_loop()\n            executor = ThreadPoolExecutor(max_workers=1)\n            con = await loop.run_in_executor(executor, cls._connect, file)\n            slf = cls(con, loop, executor)\n        try:\n            yield slf\n        finally:\n            await slf._asyncify(con.close)\n\n    @staticmethod\n    def _connect(file: Path) -> sqlite3.Connection:\n        con = sqlite3.connect(str(file))\n        con = logfire.instrument_sqlite3(con)\n        cur = con.cursor()\n        cur.execute(\n            'CREATE TABLE IF NOT EXISTS messages (id INT PRIMARY KEY, message_list TEXT);'\n        )\n        con.commit()\n        return con\n\n    async def add_messages(self, messages: bytes):\n        await self._asyncify(\n            self._execute,\n            'INSERT INTO messages (message_list) VALUES (?);',\n            messages,\n            commit=True,\n        )\n        await self._asyncify(self.con.commit)\n\n    async def get_messages(self) -> list[ModelMessage]:\n        c = await self._asyncify(\n            self._execute, 'SELECT message_list FROM messages order by id'\n        )\n        rows = await self._asyncify(c.fetchall)\n        messages: list[ModelMessage] = []\n        for row in rows:\n            messages.extend(ModelMessagesTypeAdapter.validate_json(row[0]))\n        return messages\n\n    def _execute(\n        self, sql: LiteralString, *args: Any, commit: bool = False\n    ) -> sqlite3.Cursor:\n        cur = self.con.cursor()\n        cur.execute(sql, args)\n        if commit:\n            self.con.commit()\n        return cur\n\n    async def _asyncify(\n        self, func: Callable[P, R], *args: P.args, **kwargs: P.kwargs\n    ) -> R:\n        return await self._loop.run_in_executor(  # type: ignore\n            self._executor,\n            partial(func, **kwargs),\n            *args,  # type: ignore\n        )\n\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(\n        'pydantic_ai_examples.chat_app:app', reload=True, reload_dirs=[str(THIS_DIR)]\n    )\n\n```\n\nSimple HTML page to render the app:\n\nchat\\_app.html\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Chat App</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <style>\n    main {\n      max-width: 700px;\n    }\n    #conversation .user::before {\n      content: 'You asked: ';\n      font-weight: bold;\n      display: block;\n    }\n    #conversation .model::before {\n      content: 'AI Response: ';\n      font-weight: bold;\n      display: block;\n    }\n    #spinner {\n      opacity: 0;\n      transition: opacity 500ms ease-in;\n      width: 30px;\n      height: 30px;\n      border: 3px solid #222;\n      border-bottom-color: transparent;\n      border-radius: 50%;\n      animation: rotation 1s linear infinite;\n    }\n    @keyframes rotation {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    #spinner.active {\n      opacity: 1;\n    }\n  </style>\n</head>\n<body>\n  <main class=\"border rounded mx-auto my-5 p-4\">\n    <h1>Chat App</h1>\n    <p>Ask me anything...</p>\n    <div id=\"conversation\" class=\"px-2\"></div>\n    <div class=\"d-flex justify-content-center mb-3\">\n      <div id=\"spinner\"></div>\n    </div>\n    <form method=\"post\">\n      <input id=\"prompt-input\" name=\"prompt\" class=\"form-control\"/>\n      <div class=\"d-flex justify-content-end\">\n        <button class=\"btn btn-primary mt-2\">Send</button>\n      </div>\n    </form>\n    <div id=\"error\" class=\"d-none text-danger\">\n      Error occurred, check the browser developer console for more information.\n    </div>\n  </main>\n</body>\n</html>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/typescript/5.6.3/typescript.min.js\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<script type=\"module\">\n  // to let me write TypeScript, without adding the burden of npm we do a dirty, non-production-ready hack\n  // and transpile the TypeScript code in the browser\n  // this is (arguably) A neat demo trick, but not suitable for production!\n  async function loadTs() {\n    const response = await fetch('/chat_app.ts');\n    const tsCode = await response.text();\n    const jsCode = window.ts.transpile(tsCode, { target: \"es2015\" });\n    let script = document.createElement('script');\n    script.type = 'module';\n    script.text = jsCode;\n    document.body.appendChild(script);\n  }\n\n  loadTs().catch((e) => {\n    console.error(e);\n    document.getElementById('error').classList.remove('d-none');\n    document.getElementById('spinner').classList.remove('active');\n  });\n</script>\n\n```\n\nTypeScript to handle rendering the messages, to keep this simple (and at the risk of offending frontend developers) the typescript code is passed to the browser as plain text and transpiled in the browser.\n\nchat\\_app.ts\n\n```\n// BIG FAT WARNING: to avoid the complexity of npm, this typescript is compiled in the browser\n// there's currently no static type checking\n\nimport { marked } from 'https://cdnjs.cloudflare.com/ajax/libs/marked/15.0.0/lib/marked.esm.js'\nconst convElement = document.getElementById('conversation')\n\nconst promptInput = document.getElementById('prompt-input') as HTMLInputElement\nconst spinner = document.getElementById('spinner')\n\n// stream the response and render messages as each chunk is received\n// data is sent as newline-delimited JSON\nasync function onFetchResponse(response: Response): Promise<void> {\n  let text = ''\n  let decoder = new TextDecoder()\n  if (response.ok) {\n    const reader = response.body.getReader()\n    while (true) {\n      const {done, value} = await reader.read()\n      if (done) {\n        break\n      }\n      text += decoder.decode(value)\n      addMessages(text)\n      spinner.classList.remove('active')\n    }\n    addMessages(text)\n    promptInput.disabled = false\n    promptInput.focus()\n  } else {\n    const text = await response.text()\n    console.error(`Unexpected response: ${response.status}`, {response, text})\n    throw new Error(`Unexpected response: ${response.status}`)\n  }\n}\n\n// The format of messages, this matches pydantic-ai both for brevity and understanding\n// in production, you might not want to keep this format all the way to the frontend\ninterface Message {\n  role: string\n  content: string\n  timestamp: string\n}\n\n// take raw response text and render messages into the `#conversation` element\n// Message timestamp is assumed to be a unique identifier of a message, and is used to deduplicate\n// hence you can send data about the same message multiple times, and it will be updated\n// instead of creating a new message elements\nfunction addMessages(responseText: string) {\n  const lines = responseText.split('\\n')\n  const messages: Message[] = lines.filter(line => line.length > 1).map(j => JSON.parse(j))\n  for (const message of messages) {\n    // we use the timestamp as a crude element id\n    const {timestamp, role, content} = message\n    const id = `msg-${timestamp}`\n    let msgDiv = document.getElementById(id)\n    if (!msgDiv) {\n      msgDiv = document.createElement('div')\n      msgDiv.id = id\n      msgDiv.title = `${role} at ${timestamp}`\n      msgDiv.classList.add('border-top', 'pt-2', role)\n      convElement.appendChild(msgDiv)\n    }\n    msgDiv.innerHTML = marked.parse(content)\n  }\n  window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' })\n}\n\nfunction onError(error: any) {\n  console.error(error)\n  document.getElementById('error').classList.remove('d-none')\n  document.getElementById('spinner').classList.remove('active')\n}\n\nasync function onSubmit(e: SubmitEvent): Promise<void> {\n  e.preventDefault()\n  spinner.classList.add('active')\n  const body = new FormData(e.target as HTMLFormElement)\n\n  promptInput.value = ''\n  promptInput.disabled = true\n\n  const response = await fetch('/chat/', {method: 'POST', body})\n  await onFetchResponse(response)\n}\n\n// call onSubmit when the form is submitted (e.g. user clicks the send button or hits Enter)\ndocument.querySelector('form').addEventListener('submit', (e) => onSubmit(e).catch(onError))\n\n// load messages on page load\nfetch('/chat/').then(onFetchResponse).catch(onError)\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/chat-app/",
      "ogUrl": "https://ai.pydantic.dev/examples/chat-app/",
      "title": "Chat App with FastAPI - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/chat-app/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/chat-app.png",
      "ogTitle": "Chat App with FastAPI - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/chat-app.png",
      "og:title": "Chat App with FastAPI - PydanticAI",
      "scrapeId": "cadf2e8d-c911-450e-990a-c10b18c37191",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/chat-app/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/chat-app.png",
      "twitter:title": "Chat App with FastAPI - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/results/#structured-result-validation)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Results\n\nResults are the final values returned from [running an agent](https://ai.pydantic.dev/agents/#running-agents).\nThe result values are wrapped in [`RunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult) and [`StreamedRunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult) so you can access other data like [usage](https://ai.pydantic.dev/api/usage/#pydantic_ai.usage.Usage) of the run and [message history](https://ai.pydantic.dev/message-history/#accessing-messages-from-results)\n\nBoth `RunResult` and `StreamedRunResult` are generic in the data they wrap, so typing information about the data returned by the agent is preserved.\n\nolympics.py\n\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\n\nclass CityLocation(BaseModel):\n    city: str\n    country: str\n\nagent = Agent('google-gla:gemini-1.5-flash', result_type=CityLocation)\nresult = agent.run_sync('Where were the olympics held in 2012?')\nprint(result.data)\n#> city='London' country='United Kingdom'\nprint(result.usage())\n\"\"\"\nUsage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)\n\"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nRuns end when either a plain text response is received or the model calls a tool associated with one of the structured result types. We will add limits to make sure a run doesn't go on indefinitely, see [#70](https://github.com/pydantic/pydantic-ai/issues/70).\n\n## Result data\n\nWhen the result type is `str`, or a union including `str`, plain text responses are enabled on the model, and the raw text response from the model is used as the response data.\n\nIf the result type is a union with multiple members (after remove `str` from the members), each member is registered as a separate tool with the model in order to reduce the complexity of the tool schemas and maximise the chances a model will respond correctly.\n\nIf the result type schema is not of type `\"object\"`, the result type is wrapped in a single element object, so the schema of all tools registered with the model are object schemas.\n\nStructured results (like tools) use Pydantic to build the JSON schema used for the tool, and to validate the data returned by the model.\n\nBring on PEP-747\n\nUntil [PEP-747](https://peps.python.org/pep-0747/) \"Annotating Type Forms\" lands, unions are not valid as `type` s in Python.\n\nWhen creating the agent we need to `# type: ignore` the `result_type` argument, and add a type hint to tell type checkers about the type of the agent.\n\nHere's an example of returning either text or a structured value\n\nbox\\_or\\_error.py\n\n```\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\n\nclass Box(BaseModel):\n    width: int\n    height: int\n    depth: int\n    units: str\n\nagent: Agent[None, Union[Box, str]] = Agent(\n    'openai:gpt-4o-mini',\n    result_type=Union[Box, str],  # type: ignore\n    system_prompt=(\n        \"Extract me the dimensions of a box, \"\n        \"if you can't extract all data, ask the user to try again.\"\n    ),\n)\n\nresult = agent.run_sync('The box is 10x20x30')\nprint(result.data)\n#> Please provide the units for the dimensions (e.g., cm, in, m).\n\nresult = agent.run_sync('The box is 10x20x30 cm')\nprint(result.data)\n#> width=10 height=20 depth=30 units='cm'\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nHere's an example of using a union return type which registered multiple tools, and wraps non-object schemas in an object:\n\ncolors\\_or\\_sizes.py\n\n```\nfrom typing import Union\n\nfrom pydantic_ai import Agent\n\nagent: Agent[None, Union[list[str], list[int]]] = Agent(\n    'openai:gpt-4o-mini',\n    result_type=Union[list[str], list[int]],  # type: ignore\n    system_prompt='Extract either colors or sizes from the shapes provided.',\n)\n\nresult = agent.run_sync('red square, blue circle, green triangle')\nprint(result.data)\n#> ['red', 'blue', 'green']\n\nresult = agent.run_sync('square size 10, circle size 20, triangle size 30')\nprint(result.data)\n#> [10, 20, 30]\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\n### Result validators functions\n\nSome validation is inconvenient or impossible to do in Pydantic validators, in particular when the validation requires IO and is asynchronous. PydanticAI provides a way to add validation functions via the [`agent.result_validator`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.result_validator) decorator.\n\nHere's a simplified variant of the [SQL Generation example](https://ai.pydantic.dev/examples/sql-gen/):\n\nsql\\_gen.py\n\n```\nfrom typing import Union\n\nfrom fake_database import DatabaseConn, QueryError\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent, RunContext, ModelRetry\n\nclass Success(BaseModel):\n    sql_query: str\n\nclass InvalidRequest(BaseModel):\n    error_message: str\n\nResponse = Union[Success, InvalidRequest]\nagent: Agent[DatabaseConn, Response] = Agent(\n    'google-gla:gemini-1.5-flash',\n    result_type=Response,  # type: ignore\n    deps_type=DatabaseConn,\n    system_prompt='Generate PostgreSQL flavored SQL queries based on user input.',\n)\n\n@agent.result_validator\nasync def validate_result(ctx: RunContext[DatabaseConn], result: Response) -> Response:\n    if isinstance(result, InvalidRequest):\n        return result\n    try:\n        await ctx.deps.execute(f'EXPLAIN {result.sql_query}')\n    except QueryError as e:\n        raise ModelRetry(f'Invalid query: {e}') from e\n    else:\n        return result\n\nresult = agent.run_sync(\n    'get me users who were last active yesterday.', deps=DatabaseConn()\n)\nprint(result.data)\n#> sql_query='SELECT * FROM users WHERE last_active::date = today() - interval 1 day'\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\n## Streamed Results\n\nThere two main challenges with streamed results:\n\n1. Validating structured responses before they're complete, this is achieved by \"partial validation\" which was recently added to Pydantic in [pydantic/pydantic#10748](https://github.com/pydantic/pydantic/pull/10748).\n2. When receiving a response, we don't know if it's the final response without starting to stream it and peeking at the content. PydanticAI streams just enough of the response to sniff out if it's a tool call or a result, then streams the whole thing and calls tools, or returns the stream as a [`StreamedRunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult).\n\n### Streaming Text\n\nExample of streamed text result:\n\nstreamed\\_hello\\_world.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('google-gla:gemini-1.5-flash')\n\nasync def main():\n    async with agent.run_stream('Where does \"hello world\" come from?') as result:\n        async for message in result.stream_text():\n            print(message)\n            #> The first known\n            #> The first known use of \"hello,\n            #> The first known use of \"hello, world\" was in\n            #> The first known use of \"hello, world\" was in a 1974 textbook\n            #> The first known use of \"hello, world\" was in a 1974 textbook about the C\n            #> The first known use of \"hello, world\" was in a 1974 textbook about the C programming language.\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\nWe can also stream text as deltas rather than the entire text in each item:\n\nstreamed\\_delta\\_hello\\_world.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('google-gla:gemini-1.5-flash')\n\nasync def main():\n    async with agent.run_stream('Where does \"hello world\" come from?') as result:\n        async for message in result.stream_text(delta=True):\n            print(message)\n            #> The first known\n            #> use of \"hello,\n            #> world\" was in\n            #> a 1974 textbook\n            #> about the C\n            #> programming language.\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\nResult message not included in `messages`\n\nThe final result message will **NOT** be added to result messages if you use `.stream_text(delta=True)`,\nsee [Messages and chat history](https://ai.pydantic.dev/message-history/) for more information.\n\n### Streaming Structured Responses\n\nNot all types are supported with partial validation in Pydantic, see [pydantic/pydantic#10748](https://github.com/pydantic/pydantic/pull/10748), generally for model-like structures it's currently best to use `TypeDict`.\n\nHere's an example of streaming a use profile as it's built:\n\nstreamed\\_user\\_profile.py\n\n```\nfrom datetime import date\n\nfrom typing_extensions import TypedDict\n\nfrom pydantic_ai import Agent\n\nclass UserProfile(TypedDict, total=False):\n    name: str\n    dob: date\n    bio: str\n\nagent = Agent(\n    'openai:gpt-4o',\n    result_type=UserProfile,\n    system_prompt='Extract a user profile from the input',\n)\n\nasync def main():\n    user_input = 'My name is Ben, I was born on January 28th 1990, I like the chain the dog and the pyramid.'\n    async with agent.run_stream(user_input) as result:\n        async for profile in result.stream():\n            print(profile)\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the '}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyr'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\nIf you want fine-grained control of validation, particularly catching validation errors, you can use the following pattern:\n\nstreamed\\_user\\_profile.py\n\n```\nfrom datetime import date\n\nfrom pydantic import ValidationError\nfrom typing_extensions import TypedDict\n\nfrom pydantic_ai import Agent\n\nclass UserProfile(TypedDict, total=False):\n    name: str\n    dob: date\n    bio: str\n\nagent = Agent('openai:gpt-4o', result_type=UserProfile)\n\nasync def main():\n    user_input = 'My name is Ben, I was born on January 28th 1990, I like the chain the dog and the pyramid.'\n    async with agent.run_stream(user_input) as result:\n        async for message, last in result.stream_structured(debounce_by=0.01):\n            try:\n                profile = await result.validate_structured_result(\n                    message,\n                    allow_partial=not last,\n                )\n            except ValidationError:\n                continue\n            print(profile)\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the '}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyr'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\n## Examples\n\nThe following examples demonstrate how to use streamed responses in PydanticAI:\n\n- [Stream markdown](https://ai.pydantic.dev/examples/stream-markdown/)\n- [Stream Whales](https://ai.pydantic.dev/examples/stream-whales/)",
    "metadata": {
      "url": "https://ai.pydantic.dev/results/",
      "ogUrl": "https://ai.pydantic.dev/results/",
      "title": "Results - PydanticAI",
      "og:url": "https://ai.pydantic.dev/results/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/results.png",
      "ogTitle": "Results - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/results.png",
      "og:title": "Results - PydanticAI",
      "scrapeId": "d3b3fb89-ee95-484c-98d5-ba1addbe622e",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/results/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/results.png",
      "twitter:title": "Results - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/message-history/#messages-and-chat-history)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Messages and chat history\n\nPydanticAI provides access to messages exchanged during an agent run. These messages can be used both to continue a coherent conversation, and to understand how an agent performed.\n\n### Accessing Messages from Results\n\nAfter running an agent, you can access the messages exchanged during that run from the `result` object.\n\nBoth [`RunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult)\n(returned by [`Agent.run`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run), [`Agent.run_sync`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync))\nand [`StreamedRunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult) (returned by [`Agent.run_stream`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream)) have the following methods:\n\n- [`all_messages()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult.all_messages): returns all messages, including messages from prior runs. There's also a variant that returns JSON bytes, [`all_messages_json()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult.all_messages_json).\n- [`new_messages()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult.new_messages): returns only the messages from the current run. There's also a variant that returns JSON bytes, [`new_messages_json()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult.new_messages_json).\n\nStreamedRunResult and complete messages\n\nOn [`StreamedRunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult), the messages returned from these methods will only include the final result message once the stream has finished.\n\nE.g. you've awaited one of the following coroutines:\n\n- [`StreamedRunResult.stream()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream)\n- [`StreamedRunResult.stream_text()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream_text)\n- [`StreamedRunResult.stream_structured()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream_structured)\n- [`StreamedRunResult.get_data()`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.get_data)\n\n**Note:** The final result message will NOT be added to result messages if you use [`.stream_text(delta=True)`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult.stream_text) since in this case the result content is never built as one string.\n\nExample of accessing methods on a [`RunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.RunResult) :\n\nrun\\_result\\_messages.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nresult = agent.run_sync('Tell me a joke.')\nprint(result.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\n# all messages from the run\nprint(result.all_messages())\n\"\"\"\n[\\\n    ModelRequest(\\\n        parts=[\\\n            SystemPromptPart(\\\n                content='Be a helpful assistant.',\\\n                dynamic_ref=None,\\\n                part_kind='system-prompt',\\\n            ),\\\n            UserPromptPart(\\\n                content='Tell me a joke.',\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='user-prompt',\\\n            ),\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            TextPart(\\\n                content='Did you hear about the toothpaste scandal? They called it Colgate.',\\\n                part_kind='text',\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n]\n\"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nExample of accessing methods on a [`StreamedRunResult`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.StreamedRunResult) :\n\nstreamed\\_run\\_result\\_messages.py\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nasync def main():\n    async with agent.run_stream('Tell me a joke.') as result:\n        # incomplete messages before the stream finishes\n        print(result.all_messages())\n        \"\"\"\n        [\\\n            ModelRequest(\\\n                parts=[\\\n                    SystemPromptPart(\\\n                        content='Be a helpful assistant.',\\\n                        dynamic_ref=None,\\\n                        part_kind='system-prompt',\\\n                    ),\\\n                    UserPromptPart(\\\n                        content='Tell me a joke.',\\\n                        timestamp=datetime.datetime(...),\\\n                        part_kind='user-prompt',\\\n                    ),\\\n                ],\\\n                kind='request',\\\n            )\\\n        ]\n        \"\"\"\n\n        async for text in result.stream_text():\n            print(text)\n            #> Did you hear\n            #> Did you hear about the toothpaste\n            #> Did you hear about the toothpaste scandal? They called\n            #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n        # complete messages once the stream finishes\n        print(result.all_messages())\n        \"\"\"\n        [\\\n            ModelRequest(\\\n                parts=[\\\n                    SystemPromptPart(\\\n                        content='Be a helpful assistant.',\\\n                        dynamic_ref=None,\\\n                        part_kind='system-prompt',\\\n                    ),\\\n                    UserPromptPart(\\\n                        content='Tell me a joke.',\\\n                        timestamp=datetime.datetime(...),\\\n                        part_kind='user-prompt',\\\n                    ),\\\n                ],\\\n                kind='request',\\\n            ),\\\n            ModelResponse(\\\n                parts=[\\\n                    TextPart(\\\n                        content='Did you hear about the toothpaste scandal? They called it Colgate.',\\\n                        part_kind='text',\\\n                    )\\\n                ],\\\n                model_name='function:stream_model_logic',\\\n                timestamp=datetime.datetime(...),\\\n                kind='response',\\\n            ),\\\n        ]\n        \"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\n### Using Messages as Input for Further Agent Runs\n\nThe primary use of message histories in PydanticAI is to maintain context across multiple agent runs.\n\nTo use existing messages in a run, pass them to the `message_history` parameter of\n[`Agent.run`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run), [`Agent.run_sync`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync) or\n[`Agent.run_stream`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream).\n\nIf `message_history` is set and not empty, a new system prompt is not generated — we assume the existing message history includes a system prompt.\n\nReusing messages in a conversation\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nresult1 = agent.run_sync('Tell me a joke.')\nprint(result1.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\nresult2 = agent.run_sync('Explain?', message_history=result1.new_messages())\nprint(result2.data)\n#> This is an excellent joke invented by Samuel Colvin, it needs no explanation.\n\nprint(result2.all_messages())\n\"\"\"\n[\\\n    ModelRequest(\\\n        parts=[\\\n            SystemPromptPart(\\\n                content='Be a helpful assistant.',\\\n                dynamic_ref=None,\\\n                part_kind='system-prompt',\\\n            ),\\\n            UserPromptPart(\\\n                content='Tell me a joke.',\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='user-prompt',\\\n            ),\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            TextPart(\\\n                content='Did you hear about the toothpaste scandal? They called it Colgate.',\\\n                part_kind='text',\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n    ModelRequest(\\\n        parts=[\\\n            UserPromptPart(\\\n                content='Explain?',\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='user-prompt',\\\n            )\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            TextPart(\\\n                content='This is an excellent joke invented by Samuel Colvin, it needs no explanation.',\\\n                part_kind='text',\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n]\n\"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\n## Other ways of using messages\n\nSince messages are defined by simple dataclasses, you can manually create and manipulate, e.g. for testing.\n\nThe message format is independent of the model used, so you can use messages in different agents, or the same agent with different models.\n\nIn the example below, we reuse the message from the first agent run, which uses the `openai:gpt-4o` model, in a second agent run using the `google-gla:gemini-1.5-pro` model.\n\nReusing messages with a different model\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nresult1 = agent.run_sync('Tell me a joke.')\nprint(result1.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\nresult2 = agent.run_sync(\n    'Explain?',\n    model='google-gla:gemini-1.5-pro',\n    message_history=result1.new_messages(),\n)\nprint(result2.data)\n#> This is an excellent joke invented by Samuel Colvin, it needs no explanation.\n\nprint(result2.all_messages())\n\"\"\"\n[\\\n    ModelRequest(\\\n        parts=[\\\n            SystemPromptPart(\\\n                content='Be a helpful assistant.',\\\n                dynamic_ref=None,\\\n                part_kind='system-prompt',\\\n            ),\\\n            UserPromptPart(\\\n                content='Tell me a joke.',\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='user-prompt',\\\n            ),\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            TextPart(\\\n                content='Did you hear about the toothpaste scandal? They called it Colgate.',\\\n                part_kind='text',\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n    ModelRequest(\\\n        parts=[\\\n            UserPromptPart(\\\n                content='Explain?',\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='user-prompt',\\\n            )\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            TextPart(\\\n                content='This is an excellent joke invented by Samuel Colvin, it needs no explanation.',\\\n                part_kind='text',\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n]\n\"\"\"\n\n```\n\n## Examples\n\nFor a more complete example of using messages in conversations, see the [chat app](https://ai.pydantic.dev/examples/chat-app/) example.",
    "metadata": {
      "url": "https://ai.pydantic.dev/message-history/",
      "ogUrl": "https://ai.pydantic.dev/message-history/",
      "title": "Messages and chat history - PydanticAI",
      "og:url": "https://ai.pydantic.dev/message-history/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/message-history.png",
      "ogTitle": "Messages and chat history - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/message-history.png",
      "og:title": "Messages and chat history - PydanticAI",
      "scrapeId": "245d9109-1427-4181-b708-9535effba6e7",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/message-history/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/message-history.png",
      "twitter:title": "Messages and chat history - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/agent/#pydantic_aiagent)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.agent`\n\n### Agent`dataclass`\n\nBases: `Generic[AgentDepsT, ResultDataT]`\n\nClass for defining \"agents\" - a way to have a specific type of \"conversation\" with an LLM.\n\nAgents are generic in the dependency type they take [`AgentDepsT`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.AgentDepsT)\nand the result data type they return, [`ResultDataT`](https://ai.pydantic.dev/api/result/#pydantic_ai.result.ResultDataT).\n\nBy default, if neither generic parameter is customised, agents have type `Agent[None, str]`.\n\nMinimal usage example:\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\nresult = agent.run_sync('What is the capital of France?')\nprint(result.data)\n#> Paris\n\n```\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>  63<br>  64<br>  65<br>  66<br>  67<br>  68<br>  69<br>  70<br>  71<br>  72<br>  73<br>  74<br>  75<br>  76<br>  77<br>  78<br>  79<br>  80<br>  81<br>  82<br>  83<br>  84<br>  85<br>  86<br>  87<br>  88<br>  89<br>  90<br>  91<br>  92<br>  93<br>  94<br>  95<br>  96<br>  97<br>  98<br>  99<br> 100<br> 101<br> 102<br> 103<br> 104<br> 105<br> 106<br> 107<br> 108<br> 109<br> 110<br> 111<br> 112<br> 113<br> 114<br> 115<br> 116<br> 117<br> 118<br> 119<br> 120<br> 121<br> 122<br> 123<br> 124<br> 125<br> 126<br> 127<br> 128<br> 129<br> 130<br> 131<br> 132<br> 133<br> 134<br> 135<br> 136<br> 137<br> 138<br> 139<br> 140<br> 141<br> 142<br> 143<br> 144<br> 145<br> 146<br> 147<br> 148<br> 149<br> 150<br> 151<br> 152<br> 153<br> 154<br> 155<br> 156<br> 157<br> 158<br> 159<br> 160<br> 161<br> 162<br> 163<br> 164<br> 165<br> 166<br> 167<br> 168<br> 169<br> 170<br> 171<br> 172<br> 173<br> 174<br> 175<br> 176<br> 177<br> 178<br> 179<br> 180<br> 181<br> 182<br> 183<br> 184<br> 185<br> 186<br> 187<br> 188<br> 189<br> 190<br> 191<br> 192<br> 193<br> 194<br> 195<br> 196<br> 197<br> 198<br> 199<br> 200<br> 201<br> 202<br> 203<br> 204<br> 205<br> 206<br> 207<br> 208<br> 209<br> 210<br> 211<br> 212<br> 213<br> 214<br> 215<br> 216<br> 217<br> 218<br> 219<br> 220<br> 221<br> 222<br> 223<br> 224<br> 225<br> 226<br> 227<br> 228<br> 229<br> 230<br> 231<br> 232<br> 233<br> 234<br> 235<br> 236<br> 237<br> 238<br> 239<br> 240<br> 241<br> 242<br> 243<br> 244<br> 245<br> 246<br> 247<br> 248<br> 249<br> 250<br> 251<br> 252<br> 253<br> 254<br> 255<br> 256<br> 257<br> 258<br> 259<br> 260<br> 261<br> 262<br> 263<br> 264<br> 265<br> 266<br> 267<br> 268<br> 269<br> 270<br> 271<br> 272<br> 273<br> 274<br> 275<br> 276<br> 277<br> 278<br> 279<br> 280<br> 281<br> 282<br> 283<br> 284<br> 285<br> 286<br> 287<br> 288<br> 289<br> 290<br> 291<br> 292<br> 293<br> 294<br> 295<br> 296<br> 297<br> 298<br> 299<br> 300<br> 301<br> 302<br> 303<br> 304<br> 305<br> 306<br> 307<br> 308<br> 309<br> 310<br> 311<br> 312<br> 313<br> 314<br> 315<br> 316<br> 317<br> 318<br> 319<br> 320<br> 321<br> 322<br> 323<br> 324<br> 325<br> 326<br> 327<br> 328<br> 329<br> 330<br> 331<br> 332<br> 333<br> 334<br> 335<br> 336<br> 337<br> 338<br> 339<br> 340<br> 341<br> 342<br> 343<br> 344<br> 345<br> 346<br> 347<br> 348<br> 349<br> 350<br> 351<br> 352<br> 353<br> 354<br> 355<br> 356<br> 357<br> 358<br> 359<br> 360<br> 361<br> 362<br> 363<br> 364<br> 365<br> 366<br> 367<br> 368<br> 369<br> 370<br> 371<br> 372<br> 373<br> 374<br> 375<br> 376<br> 377<br> 378<br> 379<br> 380<br> 381<br> 382<br> 383<br> 384<br> 385<br> 386<br> 387<br> 388<br> 389<br> 390<br> 391<br> 392<br> 393<br> 394<br> 395<br> 396<br> 397<br> 398<br> 399<br> 400<br> 401<br> 402<br> 403<br> 404<br> 405<br> 406<br> 407<br> 408<br> 409<br> 410<br> 411<br> 412<br> 413<br> 414<br> 415<br> 416<br> 417<br> 418<br> 419<br> 420<br> 421<br> 422<br> 423<br> 424<br> 425<br> 426<br> 427<br> 428<br> 429<br> 430<br> 431<br> 432<br> 433<br> 434<br> 435<br> 436<br> 437<br> 438<br> 439<br> 440<br> 441<br> 442<br> 443<br> 444<br> 445<br> 446<br> 447<br> 448<br> 449<br> 450<br> 451<br> 452<br> 453<br> 454<br> 455<br> 456<br> 457<br> 458<br> 459<br> 460<br> 461<br> 462<br> 463<br> 464<br> 465<br> 466<br> 467<br> 468<br> 469<br> 470<br> 471<br> 472<br> 473<br> 474<br> 475<br> 476<br> 477<br> 478<br> 479<br> 480<br> 481<br> 482<br> 483<br> 484<br> 485<br> 486<br> 487<br> 488<br> 489<br> 490<br> 491<br> 492<br> 493<br> 494<br> 495<br> 496<br> 497<br> 498<br> 499<br> 500<br> 501<br> 502<br> 503<br> 504<br> 505<br> 506<br> 507<br> 508<br> 509<br> 510<br> 511<br> 512<br> 513<br> 514<br> 515<br> 516<br> 517<br> 518<br> 519<br> 520<br> 521<br> 522<br> 523<br> 524<br> 525<br> 526<br> 527<br> 528<br> 529<br> 530<br> 531<br> 532<br> 533<br> 534<br> 535<br> 536<br> 537<br> 538<br> 539<br> 540<br> 541<br> 542<br> 543<br> 544<br> 545<br> 546<br> 547<br> 548<br> 549<br> 550<br> 551<br> 552<br> 553<br> 554<br> 555<br> 556<br> 557<br> 558<br> 559<br> 560<br> 561<br> 562<br> 563<br> 564<br> 565<br> 566<br> 567<br> 568<br> 569<br> 570<br> 571<br> 572<br> 573<br> 574<br> 575<br> 576<br> 577<br> 578<br> 579<br> 580<br> 581<br> 582<br> 583<br> 584<br> 585<br> 586<br> 587<br> 588<br> 589<br> 590<br> 591<br> 592<br> 593<br> 594<br> 595<br> 596<br> 597<br> 598<br> 599<br> 600<br> 601<br> 602<br> 603<br> 604<br> 605<br> 606<br> 607<br> 608<br> 609<br> 610<br> 611<br> 612<br> 613<br> 614<br> 615<br> 616<br> 617<br> 618<br> 619<br> 620<br> 621<br> 622<br> 623<br> 624<br> 625<br> 626<br> 627<br> 628<br> 629<br> 630<br> 631<br> 632<br> 633<br> 634<br> 635<br> 636<br> 637<br> 638<br> 639<br> 640<br> 641<br> 642<br> 643<br> 644<br> 645<br> 646<br> 647<br> 648<br> 649<br> 650<br> 651<br> 652<br> 653<br> 654<br> 655<br> 656<br> 657<br> 658<br> 659<br> 660<br> 661<br> 662<br> 663<br> 664<br> 665<br> 666<br> 667<br> 668<br> 669<br> 670<br> 671<br> 672<br> 673<br> 674<br> 675<br> 676<br> 677<br> 678<br> 679<br> 680<br> 681<br> 682<br> 683<br> 684<br> 685<br> 686<br> 687<br> 688<br> 689<br> 690<br> 691<br> 692<br> 693<br> 694<br> 695<br> 696<br> 697<br> 698<br> 699<br> 700<br> 701<br> 702<br> 703<br> 704<br> 705<br> 706<br> 707<br> 708<br> 709<br> 710<br> 711<br> 712<br> 713<br> 714<br> 715<br> 716<br> 717<br> 718<br> 719<br> 720<br> 721<br> 722<br> 723<br> 724<br> 725<br> 726<br> 727<br> 728<br> 729<br> 730<br> 731<br> 732<br> 733<br> 734<br> 735<br> 736<br> 737<br> 738<br> 739<br> 740<br> 741<br> 742<br> 743<br> 744<br> 745<br> 746<br> 747<br> 748<br> 749<br> 750<br> 751<br> 752<br> 753<br> 754<br> 755<br> 756<br> 757<br> 758<br> 759<br> 760<br> 761<br> 762<br> 763<br> 764<br> 765<br> 766<br> 767<br> 768<br> 769<br> 770<br> 771<br> 772<br> 773<br> 774<br> 775<br> 776<br> 777<br> 778<br> 779<br> 780<br> 781<br> 782<br> 783<br> 784<br> 785<br> 786<br> 787<br> 788<br> 789<br> 790<br> 791<br> 792<br> 793<br> 794<br> 795<br> 796<br> 797<br> 798<br> 799<br> 800<br> 801<br> 802<br> 803<br> 804<br> 805<br> 806<br> 807<br> 808<br> 809<br> 810<br> 811<br> 812<br> 813<br> 814<br> 815<br> 816<br> 817<br> 818<br> 819<br> 820<br> 821<br> 822<br> 823<br> 824<br> 825<br> 826<br> 827<br> 828<br> 829<br> 830<br> 831<br> 832<br> 833<br> 834<br> 835<br> 836<br> 837<br> 838<br> 839<br> 840<br> 841<br> 842<br> 843<br> 844<br> 845<br> 846<br> 847<br> 848<br> 849<br> 850<br> 851<br> 852<br> 853<br> 854<br> 855<br> 856<br> 857<br> 858<br> 859<br> 860<br> 861<br> 862<br> 863<br> 864<br> 865<br> 866<br> 867<br> 868<br> 869<br> 870<br> 871<br> 872<br> 873<br> 874<br> 875<br> 876<br> 877<br> 878<br> 879<br> 880<br> 881<br> 882<br> 883<br> 884<br> 885<br> 886<br> 887<br> 888<br> 889<br> 890<br> 891<br> 892<br> 893<br> 894<br> 895<br> 896<br> 897<br> 898<br> 899<br> 900<br> 901<br> 902<br> 903<br> 904<br> 905<br> 906<br> 907<br> 908<br> 909<br> 910<br> 911<br> 912<br> 913<br> 914<br> 915<br> 916<br> 917<br> 918<br> 919<br> 920<br> 921<br> 922<br> 923<br> 924<br> 925<br> 926<br> 927<br> 928<br> 929<br> 930<br> 931<br> 932<br> 933<br> 934<br> 935<br> 936<br> 937<br> 938<br> 939<br> 940<br> 941<br> 942<br> 943<br> 944<br> 945<br> 946<br> 947<br> 948<br> 949<br> 950<br> 951<br> 952<br> 953<br> 954<br> 955<br> 956<br> 957<br> 958<br> 959<br> 960<br> 961<br> 962<br> 963<br> 964<br> 965<br> 966<br> 967<br> 968<br> 969<br> 970<br> 971<br> 972<br> 973<br> 974<br> 975<br> 976<br> 977<br> 978<br> 979<br> 980<br> 981<br> 982<br> 983<br> 984<br> 985<br> 986<br> 987<br> 988<br> 989<br> 990<br> 991<br> 992<br> 993<br> 994<br> 995<br> 996<br> 997<br> 998<br> 999<br>1000<br>1001<br>1002<br>1003<br>1004<br>1005<br>1006<br>1007<br>1008<br>1009<br>1010<br>1011<br>1012<br>1013<br>1014<br>1015<br>1016<br>1017<br>1018<br>1019<br>1020<br>1021<br>1022<br>1023<br>1024<br>1025<br>1026<br>1027<br>1028<br>1029<br>1030<br>1031<br>1032<br>1033<br>1034<br>1035<br>1036<br>1037<br>1038<br>1039<br>1040<br>1041<br>1042<br>1043<br>1044<br>1045<br>1046<br>1047<br>1048<br>1049<br>1050<br>1051<br>1052<br>1053<br>1054<br>1055<br>1056<br>1057<br>1058<br>1059<br>1060<br>``` | ````<br>@final<br>@dataclasses.dataclass(init=False)<br>class Agent(Generic[AgentDepsT, ResultDataT]):<br>    \"\"\"Class for defining \"agents\" - a way to have a specific type of \"conversation\" with an LLM.<br>    Agents are generic in the dependency type they take [`AgentDepsT`][pydantic_ai.tools.AgentDepsT]<br>    and the result data type they return, [`ResultDataT`][pydantic_ai.result.ResultDataT].<br>    By default, if neither generic parameter is customised, agents have type `Agent[None, str]`.<br>    Minimal usage example:<br>    ```python<br>    from pydantic_ai import Agent<br>    agent = Agent('openai:gpt-4o')<br>    result = agent.run_sync('What is the capital of France?')<br>    print(result.data)<br>    #> Paris<br>    ```<br>    \"\"\"<br>    # we use dataclass fields in order to conveniently know what attributes are available<br>    model: models.Model | models.KnownModelName | None<br>    \"\"\"The default model configured for this agent.\"\"\"<br>    name: str | None<br>    \"\"\"The name of the agent, used for logging.<br>    If `None`, we try to infer the agent name from the call frame when the agent is first run.<br>    \"\"\"<br>    end_strategy: EndStrategy<br>    \"\"\"Strategy for handling tool calls when a final result is found.\"\"\"<br>    model_settings: ModelSettings | None<br>    \"\"\"Optional model request settings to use for this agents's runs, by default.<br>    Note, if `model_settings` is provided by `run`, `run_sync`, or `run_stream`, those settings will<br>    be merged with this value, with the runtime argument taking priority.<br>    \"\"\"<br>    result_type: type[ResultDataT] = dataclasses.field(repr=False)<br>    \"\"\"<br>    The type of the result data, used to validate the result data, defaults to `str`.<br>    \"\"\"<br>    _deps_type: type[AgentDepsT] = dataclasses.field(repr=False)<br>    _result_tool_name: str = dataclasses.field(repr=False)<br>    _result_tool_description: str | None = dataclasses.field(repr=False)<br>    _result_schema: _result.ResultSchema[ResultDataT] | None = dataclasses.field(repr=False)<br>    _result_validators: list[_result.ResultValidator[AgentDepsT, ResultDataT]] = dataclasses.field(repr=False)<br>    _system_prompts: tuple[str, ...] = dataclasses.field(repr=False)<br>    _system_prompt_functions: list[_system_prompt.SystemPromptRunner[AgentDepsT]] = dataclasses.field(repr=False)<br>    _system_prompt_dynamic_functions: dict[str, _system_prompt.SystemPromptRunner[AgentDepsT]] = dataclasses.field(<br>        repr=False<br>    )<br>    _function_tools: dict[str, Tool[AgentDepsT]] = dataclasses.field(repr=False)<br>    _default_retries: int = dataclasses.field(repr=False)<br>    _max_result_retries: int = dataclasses.field(repr=False)<br>    _override_deps: _utils.Option[AgentDepsT] = dataclasses.field(default=None, repr=False)<br>    _override_model: _utils.Option[models.Model] = dataclasses.field(default=None, repr=False)<br>    def __init__(<br>        self,<br>        model: models.Model | models.KnownModelName | None = None,<br>        *,<br>        result_type: type[ResultDataT] = str,<br>        system_prompt: str | Sequence[str] = (),<br>        deps_type: type[AgentDepsT] = NoneType,<br>        name: str | None = None,<br>        model_settings: ModelSettings | None = None,<br>        retries: int = 1,<br>        result_tool_name: str = 'final_result',<br>        result_tool_description: str | None = None,<br>        result_retries: int | None = None,<br>        tools: Sequence[Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]] = (),<br>        defer_model_check: bool = False,<br>        end_strategy: EndStrategy = 'early',<br>    ):<br>        \"\"\"Create an agent.<br>        Args:<br>            model: The default model to use for this agent, if not provide,<br>                you must provide the model when calling it.<br>            result_type: The type of the result data, used to validate the result data, defaults to `str`.<br>            system_prompt: Static system prompts to use for this agent, you can also register system<br>                prompts via a function with [`system_prompt`][pydantic_ai.Agent.system_prompt].<br>            deps_type: The type used for dependency injection, this parameter exists solely to allow you to fully<br>                parameterize the agent, and therefore get the best out of static type checking.<br>                If you're not using deps, but want type checking to pass, you can set `deps=None` to satisfy Pyright<br>                or add a type hint `: Agent[None, <return type>]`.<br>            name: The name of the agent, used for logging. If `None`, we try to infer the agent name from the call frame<br>                when the agent is first run.<br>            model_settings: Optional model request settings to use for this agent's runs, by default.<br>            retries: The default number of retries to allow before raising an error.<br>            result_tool_name: The name of the tool to use for the final result.<br>            result_tool_description: The description of the final result tool.<br>            result_retries: The maximum number of retries to allow for result validation, defaults to `retries`.<br>            tools: Tools to register with the agent, you can also register tools via the decorators<br>                [`@agent.tool`][pydantic_ai.Agent.tool] and [`@agent.tool_plain`][pydantic_ai.Agent.tool_plain].<br>            defer_model_check: by default, if you provide a [named][pydantic_ai.models.KnownModelName] model,<br>                it's evaluated to create a [`Model`][pydantic_ai.models.Model] instance immediately,<br>                which checks for the necessary environment variables. Set this to `false`<br>                to defer the evaluation until the first run. Useful if you want to<br>                [override the model][pydantic_ai.Agent.override] for testing.<br>            end_strategy: Strategy for handling tool calls that are requested alongside a final result.<br>                See [`EndStrategy`][pydantic_ai.agent.EndStrategy] for more information.<br>        \"\"\"<br>        if model is None or defer_model_check:<br>            self.model = model<br>        else:<br>            self.model = models.infer_model(model)<br>        self.end_strategy = end_strategy<br>        self.name = name<br>        self.model_settings = model_settings<br>        self.result_type = result_type<br>        self._deps_type = deps_type<br>        self._result_tool_name = result_tool_name<br>        self._result_tool_description = result_tool_description<br>        self._result_schema: _result.ResultSchema[ResultDataT] | None = _result.ResultSchema[result_type].build(<br>            result_type, result_tool_name, result_tool_description<br>        )<br>        self._result_validators: list[_result.ResultValidator[AgentDepsT, ResultDataT]] = []<br>        self._system_prompts = (system_prompt,) if isinstance(system_prompt, str) else tuple(system_prompt)<br>        self._system_prompt_functions: list[_system_prompt.SystemPromptRunner[AgentDepsT]] = []<br>        self._system_prompt_dynamic_functions: dict[str, _system_prompt.SystemPromptRunner[AgentDepsT]] = {}<br>        self._function_tools: dict[str, Tool[AgentDepsT]] = {}<br>        self._default_retries = retries<br>        self._max_result_retries = result_retries if result_retries is not None else retries<br>        for tool in tools:<br>            if isinstance(tool, Tool):<br>                self._register_tool(tool)<br>            else:<br>                self._register_tool(Tool(tool))<br>    @overload<br>    async def run(<br>        self,<br>        user_prompt: str,<br>        *,<br>        result_type: None = None,<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> result.RunResult[ResultDataT]: ...<br>    @overload<br>    async def run(<br>        self,<br>        user_prompt: str,<br>        *,<br>        result_type: type[RunResultDataT],<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> result.RunResult[RunResultDataT]: ...<br>    async def run(<br>        self,<br>        user_prompt: str,<br>        *,<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        result_type: type[RunResultDataT] | None = None,<br>        infer_name: bool = True,<br>    ) -> result.RunResult[Any]:<br>        \"\"\"Run the agent with a user prompt in async mode.<br>        Example:<br>        ```python<br>        from pydantic_ai import Agent<br>        agent = Agent('openai:gpt-4o')<br>        async def main():<br>            result = await agent.run('What is the capital of France?')<br>            print(result.data)<br>            #> Paris<br>        ```<br>        Args:<br>            result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no<br>                result validators since result validators would expect an argument that matches the agent's result type.<br>            user_prompt: User input to start/continue the conversation.<br>            message_history: History of the conversation so far.<br>            model: Optional model to use for this run, required if `model` was not set when creating the agent.<br>            deps: Optional dependencies to use for this run.<br>            model_settings: Optional settings to use for this model's request.<br>            usage_limits: Optional limits on model request count or token usage.<br>            usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.<br>            infer_name: Whether to try to infer the agent name from the call frame if it's not set.<br>        Returns:<br>            The result of the run.<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        model_used = self._get_model(model)<br>        deps = self._get_deps(deps)<br>        new_message_index = len(message_history) if message_history else 0<br>        result_schema: _result.ResultSchema[RunResultDataT] | None = self._prepare_result_schema(result_type)<br>        # Build the graph<br>        graph = self._build_graph(result_type)<br>        # Build the initial state<br>        state = _agent_graph.GraphAgentState(<br>            message_history=message_history[:] if message_history else [],<br>            usage=usage or _usage.Usage(),<br>            retries=0,<br>            run_step=0,<br>        )<br>        # We consider it a user error if a user tries to restrict the result type while having a result validator that<br>        # may change the result type from the restricted type to something else. Therefore, we consider the following<br>        # typecast reasonable, even though it is possible to violate it with otherwise-type-checked code.<br>        result_validators = cast(list[_result.ResultValidator[AgentDepsT, RunResultDataT]], self._result_validators)<br>        # TODO: Instead of this, copy the function tools to ensure they don't share current_retry state between agent<br>        #  runs. Requires some changes to `Tool` to make them copyable though.<br>        for v in self._function_tools.values():<br>            v.current_retry = 0<br>        model_settings = merge_model_settings(self.model_settings, model_settings)<br>        usage_limits = usage_limits or _usage.UsageLimits()<br>        with _logfire.span(<br>            '{agent_name} run {prompt=}',<br>            prompt=user_prompt,<br>            agent=self,<br>            model_name=model_used.model_name if model_used else 'no-model',<br>            agent_name=self.name or 'agent',<br>        ) as run_span:<br>            # Build the deps object for the graph<br>            graph_deps = _agent_graph.GraphAgentDeps[AgentDepsT, RunResultDataT](<br>                user_deps=deps,<br>                prompt=user_prompt,<br>                new_message_index=new_message_index,<br>                model=model_used,<br>                model_settings=model_settings,<br>                usage_limits=usage_limits,<br>                max_result_retries=self._max_result_retries,<br>                end_strategy=self.end_strategy,<br>                result_schema=result_schema,<br>                result_tools=self._result_schema.tool_defs() if self._result_schema else [],<br>                result_validators=result_validators,<br>                function_tools=self._function_tools,<br>                run_span=run_span,<br>            )<br>            start_node = _agent_graph.UserPromptNode[AgentDepsT](<br>                user_prompt=user_prompt,<br>                system_prompts=self._system_prompts,<br>                system_prompt_functions=self._system_prompt_functions,<br>                system_prompt_dynamic_functions=self._system_prompt_dynamic_functions,<br>            )<br>            # Actually run<br>            end_result, _ = await graph.run(<br>                start_node,<br>                state=state,<br>                deps=graph_deps,<br>                infer_name=False,<br>            )<br>        # Build final run result<br>        # We don't do any advanced checking if the data is actually from a final result or not<br>        return result.RunResult(<br>            state.message_history,<br>            new_message_index,<br>            end_result.data,<br>            end_result.tool_name,<br>            state.usage,<br>        )<br>    @overload<br>    def run_sync(<br>        self,<br>        user_prompt: str,<br>        *,<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> result.RunResult[ResultDataT]: ...<br>    @overload<br>    def run_sync(<br>        self,<br>        user_prompt: str,<br>        *,<br>        result_type: type[RunResultDataT] | None,<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> result.RunResult[RunResultDataT]: ...<br>    def run_sync(<br>        self,<br>        user_prompt: str,<br>        *,<br>        result_type: type[RunResultDataT] | None = None,<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> result.RunResult[Any]:<br>        \"\"\"Run the agent with a user prompt synchronously.<br>        This is a convenience method that wraps [`self.run`][pydantic_ai.Agent.run] with `loop.run_until_complete(...)`.<br>        You therefore can't use this method inside async code or if there's an active event loop.<br>        Example:<br>        ```python<br>        from pydantic_ai import Agent<br>        agent = Agent('openai:gpt-4o')<br>        result_sync = agent.run_sync('What is the capital of Italy?')<br>        print(result_sync.data)<br>        #> Rome<br>        ```<br>        Args:<br>            result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no<br>                result validators since result validators would expect an argument that matches the agent's result type.<br>            user_prompt: User input to start/continue the conversation.<br>            message_history: History of the conversation so far.<br>            model: Optional model to use for this run, required if `model` was not set when creating the agent.<br>            deps: Optional dependencies to use for this run.<br>            model_settings: Optional settings to use for this model's request.<br>            usage_limits: Optional limits on model request count or token usage.<br>            usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.<br>            infer_name: Whether to try to infer the agent name from the call frame if it's not set.<br>        Returns:<br>            The result of the run.<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            self._infer_name(inspect.currentframe())<br>        return asyncio.get_event_loop().run_until_complete(<br>            self.run(<br>                user_prompt,<br>                result_type=result_type,<br>                message_history=message_history,<br>                model=model,<br>                deps=deps,<br>                model_settings=model_settings,<br>                usage_limits=usage_limits,<br>                usage=usage,<br>                infer_name=False,<br>            )<br>        )<br>    @overload<br>    def run_stream(<br>        self,<br>        user_prompt: str,<br>        *,<br>        result_type: None = None,<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> AbstractAsyncContextManager[result.StreamedRunResult[AgentDepsT, ResultDataT]]: ...<br>    @overload<br>    def run_stream(<br>        self,<br>        user_prompt: str,<br>        *,<br>        result_type: type[RunResultDataT],<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> AbstractAsyncContextManager[result.StreamedRunResult[AgentDepsT, RunResultDataT]]: ...<br>    @asynccontextmanager<br>    async def run_stream(<br>        self,<br>        user_prompt: str,<br>        *,<br>        result_type: type[RunResultDataT] | None = None,<br>        message_history: list[_messages.ModelMessage] | None = None,<br>        model: models.Model | models.KnownModelName | None = None,<br>        deps: AgentDepsT = None,<br>        model_settings: ModelSettings | None = None,<br>        usage_limits: _usage.UsageLimits | None = None,<br>        usage: _usage.Usage | None = None,<br>        infer_name: bool = True,<br>    ) -> AsyncIterator[result.StreamedRunResult[AgentDepsT, Any]]:<br>        \"\"\"Run the agent with a user prompt in async mode, returning a streamed response.<br>        Example:<br>        ```python<br>        from pydantic_ai import Agent<br>        agent = Agent('openai:gpt-4o')<br>        async def main():<br>            async with agent.run_stream('What is the capital of the UK?') as response:<br>                print(await response.get_data())<br>                #> London<br>        ```<br>        Args:<br>            result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no<br>                result validators since result validators would expect an argument that matches the agent's result type.<br>            user_prompt: User input to start/continue the conversation.<br>            message_history: History of the conversation so far.<br>            model: Optional model to use for this run, required if `model` was not set when creating the agent.<br>            deps: Optional dependencies to use for this run.<br>            model_settings: Optional settings to use for this model's request.<br>            usage_limits: Optional limits on model request count or token usage.<br>            usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.<br>            infer_name: Whether to try to infer the agent name from the call frame if it's not set.<br>        Returns:<br>            The result of the run.<br>        \"\"\"<br>        if infer_name and self.name is None:<br>            # f_back because `asynccontextmanager` adds one frame<br>            if frame := inspect.currentframe():  # pragma: no branch<br>                self._infer_name(frame.f_back)<br>        model_used = self._get_model(model)<br>        deps = self._get_deps(deps)<br>        new_message_index = len(message_history) if message_history else 0<br>        result_schema: _result.ResultSchema[RunResultDataT] | None = self._prepare_result_schema(result_type)<br>        # Build the graph<br>        graph = self._build_stream_graph(result_type)<br>        # Build the initial state<br>        graph_state = _agent_graph.GraphAgentState(<br>            message_history=message_history[:] if message_history else [],<br>            usage=usage or _usage.Usage(),<br>            retries=0,<br>            run_step=0,<br>        )<br>        # We consider it a user error if a user tries to restrict the result type while having a result validator that<br>        # may change the result type from the restricted type to something else. Therefore, we consider the following<br>        # typecast reasonable, even though it is possible to violate it with otherwise-type-checked code.<br>        result_validators = cast(list[_result.ResultValidator[AgentDepsT, RunResultDataT]], self._result_validators)<br>        # TODO: Instead of this, copy the function tools to ensure they don't share current_retry state between agent<br>        #  runs. Requires some changes to `Tool` to make them copyable though.<br>        for v in self._function_tools.values():<br>            v.current_retry = 0<br>        model_settings = merge_model_settings(self.model_settings, model_settings)<br>        usage_limits = usage_limits or _usage.UsageLimits()<br>        with _logfire.span(<br>            '{agent_name} run stream {prompt=}',<br>            prompt=user_prompt,<br>            agent=self,<br>            model_name=model_used.model_name if model_used else 'no-model',<br>            agent_name=self.name or 'agent',<br>        ) as run_span:<br>            # Build the deps object for the graph<br>            graph_deps = _agent_graph.GraphAgentDeps[AgentDepsT, RunResultDataT](<br>                user_deps=deps,<br>                prompt=user_prompt,<br>                new_message_index=new_message_index,<br>                model=model_used,<br>                model_settings=model_settings,<br>                usage_limits=usage_limits,<br>                max_result_retries=self._max_result_retries,<br>                end_strategy=self.end_strategy,<br>                result_schema=result_schema,<br>                result_tools=self._result_schema.tool_defs() if self._result_schema else [],<br>                result_validators=result_validators,<br>                function_tools=self._function_tools,<br>                run_span=run_span,<br>            )<br>            start_node = _agent_graph.StreamUserPromptNode[AgentDepsT](<br>                user_prompt=user_prompt,<br>                system_prompts=self._system_prompts,<br>                system_prompt_functions=self._system_prompt_functions,<br>                system_prompt_dynamic_functions=self._system_prompt_dynamic_functions,<br>            )<br>            # Actually run<br>            node = start_node<br>            history: list[HistoryStep[_agent_graph.GraphAgentState, RunResultDataT]] = []<br>            while True:<br>                if isinstance(node, _agent_graph.StreamModelRequestNode):<br>                    node = cast(<br>                        _agent_graph.StreamModelRequestNode[<br>                            AgentDepsT, result.StreamedRunResult[AgentDepsT, RunResultDataT]<br>                        ],<br>                        node,<br>                    )<br>                    async with node.run_to_result(GraphRunContext(graph_state, graph_deps)) as r:<br>                        if isinstance(r, End):<br>                            yield r.data<br>                            break<br>                assert not isinstance(node, End)  # the previous line should be hit first<br>                node = await graph.next(<br>                    node,<br>                    history,<br>                    state=graph_state,<br>                    deps=graph_deps,<br>                    infer_name=False,<br>                )<br>    @contextmanager<br>    def override(<br>        self,<br>        *,<br>        deps: AgentDepsT | _utils.Unset = _utils.UNSET,<br>        model: models.Model | models.KnownModelName | _utils.Unset = _utils.UNSET,<br>    ) -> Iterator[None]:<br>        \"\"\"Context manager to temporarily override agent dependencies and model.<br>        This is particularly useful when testing.<br>        You can find an example of this [here](../testing-evals.md#overriding-model-via-pytest-fixtures).<br>        Args:<br>            deps: The dependencies to use instead of the dependencies passed to the agent run.<br>            model: The model to use instead of the model passed to the agent run.<br>        \"\"\"<br>        if _utils.is_set(deps):<br>            override_deps_before = self._override_deps<br>            self._override_deps = _utils.Some(deps)<br>        else:<br>            override_deps_before = _utils.UNSET<br>        # noinspection PyTypeChecker<br>        if _utils.is_set(model):<br>            override_model_before = self._override_model<br>            # noinspection PyTypeChecker<br>            self._override_model = _utils.Some(models.infer_model(model))  # pyright: ignore[reportArgumentType]<br>        else:<br>            override_model_before = _utils.UNSET<br>        try:<br>            yield<br>        finally:<br>            if _utils.is_set(override_deps_before):<br>                self._override_deps = override_deps_before<br>            if _utils.is_set(override_model_before):<br>                self._override_model = override_model_before<br>    @overload<br>    def system_prompt(<br>        self, func: Callable[[RunContext[AgentDepsT]], str], /<br>    ) -> Callable[[RunContext[AgentDepsT]], str]: ...<br>    @overload<br>    def system_prompt(<br>        self, func: Callable[[RunContext[AgentDepsT]], Awaitable[str]], /<br>    ) -> Callable[[RunContext[AgentDepsT]], Awaitable[str]]: ...<br>    @overload<br>    def system_prompt(self, func: Callable[[], str], /) -> Callable[[], str]: ...<br>    @overload<br>    def system_prompt(self, func: Callable[[], Awaitable[str]], /) -> Callable[[], Awaitable[str]]: ...<br>    @overload<br>    def system_prompt(<br>        self, /, *, dynamic: bool = False<br>    ) -> Callable[[_system_prompt.SystemPromptFunc[AgentDepsT]], _system_prompt.SystemPromptFunc[AgentDepsT]]: ...<br>    def system_prompt(<br>        self,<br>        func: _system_prompt.SystemPromptFunc[AgentDepsT] | None = None,<br>        /,<br>        *,<br>        dynamic: bool = False,<br>    ) -> (<br>        Callable[[_system_prompt.SystemPromptFunc[AgentDepsT]], _system_prompt.SystemPromptFunc[AgentDepsT]]<br>        | _system_prompt.SystemPromptFunc[AgentDepsT]<br>    ):<br>        \"\"\"Decorator to register a system prompt function.<br>        Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its only argument.<br>        Can decorate a sync or async functions.<br>        The decorator can be used either bare (`agent.system_prompt`) or as a function call<br>        (`agent.system_prompt(...)`), see the examples below.<br>        Overloads for every possible signature of `system_prompt` are included so the decorator doesn't obscure<br>        the type of the function, see `tests/typed_agent.py` for tests.<br>        Args:<br>            func: The function to decorate<br>            dynamic: If True, the system prompt will be reevaluated even when `messages_history` is provided,<br>                see [`SystemPromptPart.dynamic_ref`][pydantic_ai.messages.SystemPromptPart.dynamic_ref]<br>        Example:<br>        ```python<br>        from pydantic_ai import Agent, RunContext<br>        agent = Agent('test', deps_type=str)<br>        @agent.system_prompt<br>        def simple_system_prompt() -> str:<br>            return 'foobar'<br>        @agent.system_prompt(dynamic=True)<br>        async def async_system_prompt(ctx: RunContext[str]) -> str:<br>            return f'{ctx.deps} is the best'<br>        ```<br>        \"\"\"<br>        if func is None:<br>            def decorator(<br>                func_: _system_prompt.SystemPromptFunc[AgentDepsT],<br>            ) -> _system_prompt.SystemPromptFunc[AgentDepsT]:<br>                runner = _system_prompt.SystemPromptRunner[AgentDepsT](func_, dynamic=dynamic)<br>                self._system_prompt_functions.append(runner)<br>                if dynamic:<br>                    self._system_prompt_dynamic_functions[func_.__qualname__] = runner<br>                return func_<br>            return decorator<br>        else:<br>            assert not dynamic, \"dynamic can't be True in this case\"<br>            self._system_prompt_functions.append(_system_prompt.SystemPromptRunner[AgentDepsT](func, dynamic=dynamic))<br>            return func<br>    @overload<br>    def result_validator(<br>        self, func: Callable[[RunContext[AgentDepsT], ResultDataT], ResultDataT], /<br>    ) -> Callable[[RunContext[AgentDepsT], ResultDataT], ResultDataT]: ...<br>    @overload<br>    def result_validator(<br>        self, func: Callable[[RunContext[AgentDepsT], ResultDataT], Awaitable[ResultDataT]], /<br>    ) -> Callable[[RunContext[AgentDepsT], ResultDataT], Awaitable[ResultDataT]]: ...<br>    @overload<br>    def result_validator(<br>        self, func: Callable[[ResultDataT], ResultDataT], /<br>    ) -> Callable[[ResultDataT], ResultDataT]: ...<br>    @overload<br>    def result_validator(<br>        self, func: Callable[[ResultDataT], Awaitable[ResultDataT]], /<br>    ) -> Callable[[ResultDataT], Awaitable[ResultDataT]]: ...<br>    def result_validator(<br>        self, func: _result.ResultValidatorFunc[AgentDepsT, ResultDataT], /<br>    ) -> _result.ResultValidatorFunc[AgentDepsT, ResultDataT]:<br>        \"\"\"Decorator to register a result validator function.<br>        Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.<br>        Can decorate a sync or async functions.<br>        Overloads for every possible signature of `result_validator` are included so the decorator doesn't obscure<br>        the type of the function, see `tests/typed_agent.py` for tests.<br>        Example:<br>        ```python<br>        from pydantic_ai import Agent, ModelRetry, RunContext<br>        agent = Agent('test', deps_type=str)<br>        @agent.result_validator<br>        def result_validator_simple(data: str) -> str:<br>            if 'wrong' in data:<br>                raise ModelRetry('wrong response')<br>            return data<br>        @agent.result_validator<br>        async def result_validator_deps(ctx: RunContext[str], data: str) -> str:<br>            if ctx.deps in data:<br>                raise ModelRetry('wrong response')<br>            return data<br>        result = agent.run_sync('foobar', deps='spam')<br>        print(result.data)<br>        #> success (no tool calls)<br>        ```<br>        \"\"\"<br>        self._result_validators.append(_result.ResultValidator[AgentDepsT, Any](func))<br>        return func<br>    @overload<br>    def tool(self, func: ToolFuncContext[AgentDepsT, ToolParams], /) -> ToolFuncContext[AgentDepsT, ToolParams]: ...<br>    @overload<br>    def tool(<br>        self,<br>        /,<br>        *,<br>        retries: int | None = None,<br>        prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>        docstring_format: DocstringFormat = 'auto',<br>        require_parameter_descriptions: bool = False,<br>    ) -> Callable[[ToolFuncContext[AgentDepsT, ToolParams]], ToolFuncContext[AgentDepsT, ToolParams]]: ...<br>    def tool(<br>        self,<br>        func: ToolFuncContext[AgentDepsT, ToolParams] | None = None,<br>        /,<br>        *,<br>        retries: int | None = None,<br>        prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>        docstring_format: DocstringFormat = 'auto',<br>        require_parameter_descriptions: bool = False,<br>    ) -> Any:<br>        \"\"\"Decorator to register a tool function which takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.<br>        Can decorate a sync or async functions.<br>        The docstring is inspected to extract both the tool description and description of each parameter,<br>        [learn more](../tools.md#function-tools-and-schema).<br>        We can't add overloads for every possible signature of tool, since the return type is a recursive union<br>        so the signature of functions decorated with `@agent.tool` is obscured.<br>        Example:<br>        ```python<br>        from pydantic_ai import Agent, RunContext<br>        agent = Agent('test', deps_type=int)<br>        @agent.tool<br>        def foobar(ctx: RunContext[int], x: int) -> int:<br>            return ctx.deps + x<br>        @agent.tool(retries=2)<br>        async def spam(ctx: RunContext[str], y: float) -> float:<br>            return ctx.deps + y<br>        result = agent.run_sync('foobar', deps=1)<br>        print(result.data)<br>        #> {\"foobar\":1,\"spam\":1.0}<br>        ```<br>        Args:<br>            func: The tool function to register.<br>            retries: The number of retries to allow for this tool, defaults to the agent's default retries,<br>                which defaults to 1.<br>            prepare: custom method to prepare the tool definition for each step, return `None` to omit this<br>                tool from a given step. This is useful if you want to customise a tool at call time,<br>                or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].<br>            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].<br>                Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.<br>            require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.<br>        \"\"\"<br>        if func is None:<br>            def tool_decorator(<br>                func_: ToolFuncContext[AgentDepsT, ToolParams],<br>            ) -> ToolFuncContext[AgentDepsT, ToolParams]:<br>                # noinspection PyTypeChecker<br>                self._register_function(func_, True, retries, prepare, docstring_format, require_parameter_descriptions)<br>                return func_<br>            return tool_decorator<br>        else:<br>            # noinspection PyTypeChecker<br>            self._register_function(func, True, retries, prepare, docstring_format, require_parameter_descriptions)<br>            return func<br>    @overload<br>    def tool_plain(self, func: ToolFuncPlain[ToolParams], /) -> ToolFuncPlain[ToolParams]: ...<br>    @overload<br>    def tool_plain(<br>        self,<br>        /,<br>        *,<br>        retries: int | None = None,<br>        prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>        docstring_format: DocstringFormat = 'auto',<br>        require_parameter_descriptions: bool = False,<br>    ) -> Callable[[ToolFuncPlain[ToolParams]], ToolFuncPlain[ToolParams]]: ...<br>    def tool_plain(<br>        self,<br>        func: ToolFuncPlain[ToolParams] | None = None,<br>        /,<br>        *,<br>        retries: int | None = None,<br>        prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>        docstring_format: DocstringFormat = 'auto',<br>        require_parameter_descriptions: bool = False,<br>    ) -> Any:<br>        \"\"\"Decorator to register a tool function which DOES NOT take `RunContext` as an argument.<br>        Can decorate a sync or async functions.<br>        The docstring is inspected to extract both the tool description and description of each parameter,<br>        [learn more](../tools.md#function-tools-and-schema).<br>        We can't add overloads for every possible signature of tool, since the return type is a recursive union<br>        so the signature of functions decorated with `@agent.tool` is obscured.<br>        Example:<br>        ```python<br>        from pydantic_ai import Agent, RunContext<br>        agent = Agent('test')<br>        @agent.tool<br>        def foobar(ctx: RunContext[int]) -> int:<br>            return 123<br>        @agent.tool(retries=2)<br>        async def spam(ctx: RunContext[str]) -> float:<br>            return 3.14<br>        result = agent.run_sync('foobar', deps=1)<br>        print(result.data)<br>        #> {\"foobar\":123,\"spam\":3.14}<br>        ```<br>        Args:<br>            func: The tool function to register.<br>            retries: The number of retries to allow for this tool, defaults to the agent's default retries,<br>                which defaults to 1.<br>            prepare: custom method to prepare the tool definition for each step, return `None` to omit this<br>                tool from a given step. This is useful if you want to customise a tool at call time,<br>                or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].<br>            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].<br>                Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.<br>            require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.<br>        \"\"\"<br>        if func is None:<br>            def tool_decorator(func_: ToolFuncPlain[ToolParams]) -> ToolFuncPlain[ToolParams]:<br>                # noinspection PyTypeChecker<br>                self._register_function(<br>                    func_, False, retries, prepare, docstring_format, require_parameter_descriptions<br>                )<br>                return func_<br>            return tool_decorator<br>        else:<br>            self._register_function(func, False, retries, prepare, docstring_format, require_parameter_descriptions)<br>            return func<br>    def _register_function(<br>        self,<br>        func: ToolFuncEither[AgentDepsT, ToolParams],<br>        takes_ctx: bool,<br>        retries: int | None,<br>        prepare: ToolPrepareFunc[AgentDepsT] | None,<br>        docstring_format: DocstringFormat,<br>        require_parameter_descriptions: bool,<br>    ) -> None:<br>        \"\"\"Private utility to register a function as a tool.\"\"\"<br>        retries_ = retries if retries is not None else self._default_retries<br>        tool = Tool[AgentDepsT](<br>            func,<br>            takes_ctx=takes_ctx,<br>            max_retries=retries_,<br>            prepare=prepare,<br>            docstring_format=docstring_format,<br>            require_parameter_descriptions=require_parameter_descriptions,<br>        )<br>        self._register_tool(tool)<br>    def _register_tool(self, tool: Tool[AgentDepsT]) -> None:<br>        \"\"\"Private utility to register a tool instance.\"\"\"<br>        if tool.max_retries is None:<br>            # noinspection PyTypeChecker<br>            tool = dataclasses.replace(tool, max_retries=self._default_retries)<br>        if tool.name in self._function_tools:<br>            raise exceptions.UserError(f'Tool name conflicts with existing tool: {tool.name!r}')<br>        if self._result_schema and tool.name in self._result_schema.tools:<br>            raise exceptions.UserError(f'Tool name conflicts with result schema name: {tool.name!r}')<br>        self._function_tools[tool.name] = tool<br>    def _get_model(self, model: models.Model | models.KnownModelName | None) -> models.Model:<br>        \"\"\"Create a model configured for this agent.<br>        Args:<br>            model: model to use for this run, required if `model` was not set when creating the agent.<br>        Returns:<br>            The model used<br>        \"\"\"<br>        model_: models.Model<br>        if some_model := self._override_model:<br>            # we don't want `override()` to cover up errors from the model not being defined, hence this check<br>            if model is None and self.model is None:<br>                raise exceptions.UserError(<br>                    '`model` must be set either when creating the agent or when calling it. '<br>                    '(Even when `override(model=...)` is customizing the model that will actually be called)'<br>                )<br>            model_ = some_model.value<br>        elif model is not None:<br>            model_ = models.infer_model(model)<br>        elif self.model is not None:<br>            # noinspection PyTypeChecker<br>            model_ = self.model = models.infer_model(self.model)<br>        else:<br>            raise exceptions.UserError('`model` must be set either when creating the agent or when calling it.')<br>        return model_<br>    def _get_deps(self: Agent[T, ResultDataT], deps: T) -> T:<br>        \"\"\"Get deps for a run.<br>        If we've overridden deps via `_override_deps`, use that, otherwise use the deps passed to the call.<br>        We could do runtime type checking of deps against `self._deps_type`, but that's a slippery slope.<br>        \"\"\"<br>        if some_deps := self._override_deps:<br>            return some_deps.value<br>        else:<br>            return deps<br>    def _infer_name(self, function_frame: FrameType | None) -> None:<br>        \"\"\"Infer the agent name from the call frame.<br>        Usage should be `self._infer_name(inspect.currentframe())`.<br>        \"\"\"<br>        assert self.name is None, 'Name already set'<br>        if function_frame is not None:  # pragma: no branch<br>            if parent_frame := function_frame.f_back:  # pragma: no branch<br>                for name, item in parent_frame.f_locals.items():<br>                    if item is self:<br>                        self.name = name<br>                        return<br>                if parent_frame.f_locals != parent_frame.f_globals:<br>                    # if we couldn't find the agent in locals and globals are a different dict, try globals<br>                    for name, item in parent_frame.f_globals.items():<br>                        if item is self:<br>                            self.name = name<br>                            return<br>    @property<br>    @deprecated(<br>        'The `last_run_messages` attribute has been removed, use `capture_run_messages` instead.', category=None<br>    )<br>    def last_run_messages(self) -> list[_messages.ModelMessage]:<br>        raise AttributeError('The `last_run_messages` attribute has been removed, use `capture_run_messages` instead.')<br>    def _build_graph(<br>        self, result_type: type[RunResultDataT] | None<br>    ) -> Graph[_agent_graph.GraphAgentState, _agent_graph.GraphAgentDeps[AgentDepsT, Any], Any]:<br>        return _agent_graph.build_agent_graph(self.name, self._deps_type, result_type or self.result_type)<br>    def _build_stream_graph(<br>        self, result_type: type[RunResultDataT] | None<br>    ) -> Graph[_agent_graph.GraphAgentState, _agent_graph.GraphAgentDeps[AgentDepsT, Any], Any]:<br>        return _agent_graph.build_agent_stream_graph(self.name, self._deps_type, result_type or self.result_type)<br>    def _prepare_result_schema(<br>        self, result_type: type[RunResultDataT] | None<br>    ) -> _result.ResultSchema[RunResultDataT] | None:<br>        if result_type is not None:<br>            if self._result_validators:<br>                raise exceptions.UserError('Cannot set a custom run `result_type` when the agent has result validators')<br>            return _result.ResultSchema[result_type].build(<br>                result_type, self._result_tool_name, self._result_tool_description<br>            )<br>        else:<br>            return self._result_schema  # pyright: ignore[reportReturnType]<br>```` |\n\n#### model`instance-attribute`\n\n```\nmodel: Model | KnownModelName | None\n\n```\n\nThe default model configured for this agent.\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model: Model | KnownModelName | None = None,\n    *,\n    result_type: type[ResultDataT] = str,\n    system_prompt: str | Sequence[str] = (),\n    deps_type: type[AgentDepsT] = NoneType,\n    name: str | None = None,\n    model_settings: ModelSettings | None = None,\n    retries: int = 1,\n    result_tool_name: str = \"final_result\",\n    result_tool_description: str | None = None,\n    result_retries: int | None = None,\n    tools: Sequence[\\\n        Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]\\\n    ] = (),\n    defer_model_check: bool = False,\n    end_strategy: EndStrategy = \"early\"\n)\n\n```\n\nCreate an agent.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model` | `Model | KnownModelName | None` | The default model to use for this agent, if not provide,<br>you must provide the model when calling it. | `None` |\n| `result_type` | `type[ResultDataT]` | The type of the result data, used to validate the result data, defaults to `str`. | `str` |\n| `system_prompt` | `str | Sequence[str]` | Static system prompts to use for this agent, you can also register system<br>prompts via a function with [`system_prompt`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.system_prompt). | `()` |\n| `deps_type` | `type[AgentDepsT]` | The type used for dependency injection, this parameter exists solely to allow you to fully<br>parameterize the agent, and therefore get the best out of static type checking.<br>If you're not using deps, but want type checking to pass, you can set `deps=None` to satisfy Pyright<br>or add a type hint `: Agent[None, <return type>]`. | `NoneType` |\n| `name` | `str | None` | The name of the agent, used for logging. If `None`, we try to infer the agent name from the call frame<br>when the agent is first run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional model request settings to use for this agent's runs, by default. | `None` |\n| `retries` | `int` | The default number of retries to allow before raising an error. | `1` |\n| `result_tool_name` | `str` | The name of the tool to use for the final result. | `'final_result'` |\n| `result_tool_description` | `str | None` | The description of the final result tool. | `None` |\n| `result_retries` | `int | None` | The maximum number of retries to allow for result validation, defaults to `retries`. | `None` |\n| `tools` | `Sequence[Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]]` | Tools to register with the agent, you can also register tools via the decorators<br>[`@agent.tool`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool) and [`@agent.tool_plain`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool_plain). | `()` |\n| `defer_model_check` | `bool` | by default, if you provide a [named](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.KnownModelName) model,<br>it's evaluated to create a [`Model`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.Model) instance immediately,<br>which checks for the necessary environment variables. Set this to `false`<br>to defer the evaluation until the first run. Useful if you want to<br>[override the model](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.override) for testing. | `False` |\n| `end_strategy` | `EndStrategy` | Strategy for handling tool calls that are requested alongside a final result.<br>See [`EndStrategy`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.EndStrategy) for more information. | `'early'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>``` | ```<br>def __init__(<br>    self,<br>    model: models.Model | models.KnownModelName | None = None,<br>    *,<br>    result_type: type[ResultDataT] = str,<br>    system_prompt: str | Sequence[str] = (),<br>    deps_type: type[AgentDepsT] = NoneType,<br>    name: str | None = None,<br>    model_settings: ModelSettings | None = None,<br>    retries: int = 1,<br>    result_tool_name: str = 'final_result',<br>    result_tool_description: str | None = None,<br>    result_retries: int | None = None,<br>    tools: Sequence[Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]] = (),<br>    defer_model_check: bool = False,<br>    end_strategy: EndStrategy = 'early',<br>):<br>    \"\"\"Create an agent.<br>    Args:<br>        model: The default model to use for this agent, if not provide,<br>            you must provide the model when calling it.<br>        result_type: The type of the result data, used to validate the result data, defaults to `str`.<br>        system_prompt: Static system prompts to use for this agent, you can also register system<br>            prompts via a function with [`system_prompt`][pydantic_ai.Agent.system_prompt].<br>        deps_type: The type used for dependency injection, this parameter exists solely to allow you to fully<br>            parameterize the agent, and therefore get the best out of static type checking.<br>            If you're not using deps, but want type checking to pass, you can set `deps=None` to satisfy Pyright<br>            or add a type hint `: Agent[None, <return type>]`.<br>        name: The name of the agent, used for logging. If `None`, we try to infer the agent name from the call frame<br>            when the agent is first run.<br>        model_settings: Optional model request settings to use for this agent's runs, by default.<br>        retries: The default number of retries to allow before raising an error.<br>        result_tool_name: The name of the tool to use for the final result.<br>        result_tool_description: The description of the final result tool.<br>        result_retries: The maximum number of retries to allow for result validation, defaults to `retries`.<br>        tools: Tools to register with the agent, you can also register tools via the decorators<br>            [`@agent.tool`][pydantic_ai.Agent.tool] and [`@agent.tool_plain`][pydantic_ai.Agent.tool_plain].<br>        defer_model_check: by default, if you provide a [named][pydantic_ai.models.KnownModelName] model,<br>            it's evaluated to create a [`Model`][pydantic_ai.models.Model] instance immediately,<br>            which checks for the necessary environment variables. Set this to `false`<br>            to defer the evaluation until the first run. Useful if you want to<br>            [override the model][pydantic_ai.Agent.override] for testing.<br>        end_strategy: Strategy for handling tool calls that are requested alongside a final result.<br>            See [`EndStrategy`][pydantic_ai.agent.EndStrategy] for more information.<br>    \"\"\"<br>    if model is None or defer_model_check:<br>        self.model = model<br>    else:<br>        self.model = models.infer_model(model)<br>    self.end_strategy = end_strategy<br>    self.name = name<br>    self.model_settings = model_settings<br>    self.result_type = result_type<br>    self._deps_type = deps_type<br>    self._result_tool_name = result_tool_name<br>    self._result_tool_description = result_tool_description<br>    self._result_schema: _result.ResultSchema[ResultDataT] | None = _result.ResultSchema[result_type].build(<br>        result_type, result_tool_name, result_tool_description<br>    )<br>    self._result_validators: list[_result.ResultValidator[AgentDepsT, ResultDataT]] = []<br>    self._system_prompts = (system_prompt,) if isinstance(system_prompt, str) else tuple(system_prompt)<br>    self._system_prompt_functions: list[_system_prompt.SystemPromptRunner[AgentDepsT]] = []<br>    self._system_prompt_dynamic_functions: dict[str, _system_prompt.SystemPromptRunner[AgentDepsT]] = {}<br>    self._function_tools: dict[str, Tool[AgentDepsT]] = {}<br>    self._default_retries = retries<br>    self._max_result_retries = result_retries if result_retries is not None else retries<br>    for tool in tools:<br>        if isinstance(tool, Tool):<br>            self._register_tool(tool)<br>        else:<br>            self._register_tool(Tool(tool))<br>``` |\n\n#### end\\_strategy`instance-attribute`\n\n```\nend_strategy: EndStrategy = end_strategy\n\n```\n\nStrategy for handling tool calls when a final result is found.\n\n#### name`instance-attribute`\n\n```\nname: str | None = name\n\n```\n\nThe name of the agent, used for logging.\n\nIf `None`, we try to infer the agent name from the call frame when the agent is first run.\n\n#### model\\_settings`instance-attribute`\n\n```\nmodel_settings: ModelSettings | None = model_settings\n\n```\n\nOptional model request settings to use for this agents's runs, by default.\n\nNote, if `model_settings` is provided by `run`, `run_sync`, or `run_stream`, those settings will\nbe merged with this value, with the runtime argument taking priority.\n\n#### result\\_type`class-attribute``instance-attribute`\n\n```\nresult_type: type[ResultDataT] = result_type\n\n```\n\nThe type of the result data, used to validate the result data, defaults to `str`.\n\n#### run`async`\n\n```\nrun(\n    user_prompt: str,\n    *,\n    result_type: None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> RunResult[ResultDataT]\n\n```\n\n```\nrun(\n    user_prompt: str,\n    *,\n    result_type: type[RunResultDataT],\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> RunResult[RunResultDataT]\n\n```\n\n```\nrun(\n    user_prompt: str,\n    *,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    result_type: type[RunResultDataT] | None = None,\n    infer_name: bool = True\n) -> RunResult[Any]\n\n```\n\nRun the agent with a user prompt in async mode.\n\nExample:\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nasync def main():\n    result = await agent.run('What is the capital of France?')\n    print(result.data)\n    #> Paris\n\n```\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no<br>result validators since result validators would expect an argument that matches the agent's result type. | `None` |\n| `user_prompt` | `str` | User input to start/continue the conversation. | _required_ |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional settings to use for this model's request. | `None` |\n| `usage_limits` | `UsageLimits | None` | Optional limits on model request count or token usage. | `None` |\n| `usage` | `Usage | None` | Optional usage to start with, useful for resuming a conversation or agents used in tools. | `None` |\n| `infer_name` | `bool` | Whether to try to infer the agent name from the call frame if it's not set. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `RunResult[Any]` | The result of the run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>``` | ````<br>async def run(<br>    self,<br>    user_prompt: str,<br>    *,<br>    message_history: list[_messages.ModelMessage] | None = None,<br>    model: models.Model | models.KnownModelName | None = None,<br>    deps: AgentDepsT = None,<br>    model_settings: ModelSettings | None = None,<br>    usage_limits: _usage.UsageLimits | None = None,<br>    usage: _usage.Usage | None = None,<br>    result_type: type[RunResultDataT] | None = None,<br>    infer_name: bool = True,<br>) -> result.RunResult[Any]:<br>    \"\"\"Run the agent with a user prompt in async mode.<br>    Example:<br>    ```python<br>    from pydantic_ai import Agent<br>    agent = Agent('openai:gpt-4o')<br>    async def main():<br>        result = await agent.run('What is the capital of France?')<br>        print(result.data)<br>        #> Paris<br>    ```<br>    Args:<br>        result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no<br>            result validators since result validators would expect an argument that matches the agent's result type.<br>        user_prompt: User input to start/continue the conversation.<br>        message_history: History of the conversation so far.<br>        model: Optional model to use for this run, required if `model` was not set when creating the agent.<br>        deps: Optional dependencies to use for this run.<br>        model_settings: Optional settings to use for this model's request.<br>        usage_limits: Optional limits on model request count or token usage.<br>        usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.<br>        infer_name: Whether to try to infer the agent name from the call frame if it's not set.<br>    Returns:<br>        The result of the run.<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    model_used = self._get_model(model)<br>    deps = self._get_deps(deps)<br>    new_message_index = len(message_history) if message_history else 0<br>    result_schema: _result.ResultSchema[RunResultDataT] | None = self._prepare_result_schema(result_type)<br>    # Build the graph<br>    graph = self._build_graph(result_type)<br>    # Build the initial state<br>    state = _agent_graph.GraphAgentState(<br>        message_history=message_history[:] if message_history else [],<br>        usage=usage or _usage.Usage(),<br>        retries=0,<br>        run_step=0,<br>    )<br>    # We consider it a user error if a user tries to restrict the result type while having a result validator that<br>    # may change the result type from the restricted type to something else. Therefore, we consider the following<br>    # typecast reasonable, even though it is possible to violate it with otherwise-type-checked code.<br>    result_validators = cast(list[_result.ResultValidator[AgentDepsT, RunResultDataT]], self._result_validators)<br>    # TODO: Instead of this, copy the function tools to ensure they don't share current_retry state between agent<br>    #  runs. Requires some changes to `Tool` to make them copyable though.<br>    for v in self._function_tools.values():<br>        v.current_retry = 0<br>    model_settings = merge_model_settings(self.model_settings, model_settings)<br>    usage_limits = usage_limits or _usage.UsageLimits()<br>    with _logfire.span(<br>        '{agent_name} run {prompt=}',<br>        prompt=user_prompt,<br>        agent=self,<br>        model_name=model_used.model_name if model_used else 'no-model',<br>        agent_name=self.name or 'agent',<br>    ) as run_span:<br>        # Build the deps object for the graph<br>        graph_deps = _agent_graph.GraphAgentDeps[AgentDepsT, RunResultDataT](<br>            user_deps=deps,<br>            prompt=user_prompt,<br>            new_message_index=new_message_index,<br>            model=model_used,<br>            model_settings=model_settings,<br>            usage_limits=usage_limits,<br>            max_result_retries=self._max_result_retries,<br>            end_strategy=self.end_strategy,<br>            result_schema=result_schema,<br>            result_tools=self._result_schema.tool_defs() if self._result_schema else [],<br>            result_validators=result_validators,<br>            function_tools=self._function_tools,<br>            run_span=run_span,<br>        )<br>        start_node = _agent_graph.UserPromptNode[AgentDepsT](<br>            user_prompt=user_prompt,<br>            system_prompts=self._system_prompts,<br>            system_prompt_functions=self._system_prompt_functions,<br>            system_prompt_dynamic_functions=self._system_prompt_dynamic_functions,<br>        )<br>        # Actually run<br>        end_result, _ = await graph.run(<br>            start_node,<br>            state=state,<br>            deps=graph_deps,<br>            infer_name=False,<br>        )<br>    # Build final run result<br>    # We don't do any advanced checking if the data is actually from a final result or not<br>    return result.RunResult(<br>        state.message_history,<br>        new_message_index,<br>        end_result.data,<br>        end_result.tool_name,<br>        state.usage,<br>    )<br>```` |\n\n#### run\\_sync\n\n```\nrun_sync(\n    user_prompt: str,\n    *,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> RunResult[ResultDataT]\n\n```\n\n```\nrun_sync(\n    user_prompt: str,\n    *,\n    result_type: type[RunResultDataT] | None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> RunResult[RunResultDataT]\n\n```\n\n```\nrun_sync(\n    user_prompt: str,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> RunResult[Any]\n\n```\n\nRun the agent with a user prompt synchronously.\n\nThis is a convenience method that wraps [`self.run`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run) with `loop.run_until_complete(...)`.\nYou therefore can't use this method inside async code or if there's an active event loop.\n\nExample:\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nresult_sync = agent.run_sync('What is the capital of Italy?')\nprint(result_sync.data)\n#> Rome\n\n```\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no<br>result validators since result validators would expect an argument that matches the agent's result type. | `None` |\n| `user_prompt` | `str` | User input to start/continue the conversation. | _required_ |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional settings to use for this model's request. | `None` |\n| `usage_limits` | `UsageLimits | None` | Optional limits on model request count or token usage. | `None` |\n| `usage` | `Usage | None` | Optional usage to start with, useful for resuming a conversation or agents used in tools. | `None` |\n| `infer_name` | `bool` | Whether to try to infer the agent name from the call frame if it's not set. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `RunResult[Any]` | The result of the run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>444<br>``` | ````<br>def run_sync(<br>    self,<br>    user_prompt: str,<br>    *,<br>    result_type: type[RunResultDataT] | None = None,<br>    message_history: list[_messages.ModelMessage] | None = None,<br>    model: models.Model | models.KnownModelName | None = None,<br>    deps: AgentDepsT = None,<br>    model_settings: ModelSettings | None = None,<br>    usage_limits: _usage.UsageLimits | None = None,<br>    usage: _usage.Usage | None = None,<br>    infer_name: bool = True,<br>) -> result.RunResult[Any]:<br>    \"\"\"Run the agent with a user prompt synchronously.<br>    This is a convenience method that wraps [`self.run`][pydantic_ai.Agent.run] with `loop.run_until_complete(...)`.<br>    You therefore can't use this method inside async code or if there's an active event loop.<br>    Example:<br>    ```python<br>    from pydantic_ai import Agent<br>    agent = Agent('openai:gpt-4o')<br>    result_sync = agent.run_sync('What is the capital of Italy?')<br>    print(result_sync.data)<br>    #> Rome<br>    ```<br>    Args:<br>        result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no<br>            result validators since result validators would expect an argument that matches the agent's result type.<br>        user_prompt: User input to start/continue the conversation.<br>        message_history: History of the conversation so far.<br>        model: Optional model to use for this run, required if `model` was not set when creating the agent.<br>        deps: Optional dependencies to use for this run.<br>        model_settings: Optional settings to use for this model's request.<br>        usage_limits: Optional limits on model request count or token usage.<br>        usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.<br>        infer_name: Whether to try to infer the agent name from the call frame if it's not set.<br>    Returns:<br>        The result of the run.<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        self._infer_name(inspect.currentframe())<br>    return asyncio.get_event_loop().run_until_complete(<br>        self.run(<br>            user_prompt,<br>            result_type=result_type,<br>            message_history=message_history,<br>            model=model,<br>            deps=deps,<br>            model_settings=model_settings,<br>            usage_limits=usage_limits,<br>            usage=usage,<br>            infer_name=False,<br>        )<br>    )<br>```` |\n\n#### run\\_stream`async`\n\n```\nrun_stream(\n    user_prompt: str,\n    *,\n    result_type: None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AbstractAsyncContextManager[\\\n    StreamedRunResult[AgentDepsT, ResultDataT]\\\n]\n\n```\n\n```\nrun_stream(\n    user_prompt: str,\n    *,\n    result_type: type[RunResultDataT],\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AbstractAsyncContextManager[\\\n    StreamedRunResult[AgentDepsT, RunResultDataT]\\\n]\n\n```\n\n```\nrun_stream(\n    user_prompt: str,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AsyncIterator[StreamedRunResult[AgentDepsT, Any]]\n\n```\n\nRun the agent with a user prompt in async mode, returning a streamed response.\n\nExample:\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nasync def main():\n    async with agent.run_stream('What is the capital of the UK?') as response:\n        print(await response.get_data())\n        #> London\n\n```\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no<br>result validators since result validators would expect an argument that matches the agent's result type. | `None` |\n| `user_prompt` | `str` | User input to start/continue the conversation. | _required_ |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional settings to use for this model's request. | `None` |\n| `usage_limits` | `UsageLimits | None` | Optional limits on model request count or token usage. | `None` |\n| `usage` | `Usage | None` | Optional usage to start with, useful for resuming a conversation or agents used in tools. | `None` |\n| `infer_name` | `bool` | Whether to try to infer the agent name from the call frame if it's not set. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[StreamedRunResult[AgentDepsT, Any]]` | The result of the run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>476<br>477<br>478<br>479<br>480<br>481<br>482<br>483<br>484<br>485<br>486<br>487<br>488<br>489<br>490<br>491<br>492<br>493<br>494<br>495<br>496<br>497<br>498<br>499<br>500<br>501<br>502<br>503<br>504<br>505<br>506<br>507<br>508<br>509<br>510<br>511<br>512<br>513<br>514<br>515<br>516<br>517<br>518<br>519<br>520<br>521<br>522<br>523<br>524<br>525<br>526<br>527<br>528<br>529<br>530<br>531<br>532<br>533<br>534<br>535<br>536<br>537<br>538<br>539<br>540<br>541<br>542<br>543<br>544<br>545<br>546<br>547<br>548<br>549<br>550<br>551<br>552<br>553<br>554<br>555<br>556<br>557<br>558<br>559<br>560<br>561<br>562<br>563<br>564<br>565<br>566<br>567<br>568<br>569<br>570<br>571<br>572<br>573<br>574<br>575<br>576<br>577<br>578<br>579<br>580<br>581<br>582<br>583<br>584<br>585<br>586<br>587<br>588<br>589<br>590<br>591<br>592<br>593<br>594<br>595<br>596<br>597<br>598<br>599<br>600<br>601<br>602<br>603<br>604<br>605<br>606<br>``` | ````<br>@asynccontextmanager<br>async def run_stream(<br>    self,<br>    user_prompt: str,<br>    *,<br>    result_type: type[RunResultDataT] | None = None,<br>    message_history: list[_messages.ModelMessage] | None = None,<br>    model: models.Model | models.KnownModelName | None = None,<br>    deps: AgentDepsT = None,<br>    model_settings: ModelSettings | None = None,<br>    usage_limits: _usage.UsageLimits | None = None,<br>    usage: _usage.Usage | None = None,<br>    infer_name: bool = True,<br>) -> AsyncIterator[result.StreamedRunResult[AgentDepsT, Any]]:<br>    \"\"\"Run the agent with a user prompt in async mode, returning a streamed response.<br>    Example:<br>    ```python<br>    from pydantic_ai import Agent<br>    agent = Agent('openai:gpt-4o')<br>    async def main():<br>        async with agent.run_stream('What is the capital of the UK?') as response:<br>            print(await response.get_data())<br>            #> London<br>    ```<br>    Args:<br>        result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no<br>            result validators since result validators would expect an argument that matches the agent's result type.<br>        user_prompt: User input to start/continue the conversation.<br>        message_history: History of the conversation so far.<br>        model: Optional model to use for this run, required if `model` was not set when creating the agent.<br>        deps: Optional dependencies to use for this run.<br>        model_settings: Optional settings to use for this model's request.<br>        usage_limits: Optional limits on model request count or token usage.<br>        usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.<br>        infer_name: Whether to try to infer the agent name from the call frame if it's not set.<br>    Returns:<br>        The result of the run.<br>    \"\"\"<br>    if infer_name and self.name is None:<br>        # f_back because `asynccontextmanager` adds one frame<br>        if frame := inspect.currentframe():  # pragma: no branch<br>            self._infer_name(frame.f_back)<br>    model_used = self._get_model(model)<br>    deps = self._get_deps(deps)<br>    new_message_index = len(message_history) if message_history else 0<br>    result_schema: _result.ResultSchema[RunResultDataT] | None = self._prepare_result_schema(result_type)<br>    # Build the graph<br>    graph = self._build_stream_graph(result_type)<br>    # Build the initial state<br>    graph_state = _agent_graph.GraphAgentState(<br>        message_history=message_history[:] if message_history else [],<br>        usage=usage or _usage.Usage(),<br>        retries=0,<br>        run_step=0,<br>    )<br>    # We consider it a user error if a user tries to restrict the result type while having a result validator that<br>    # may change the result type from the restricted type to something else. Therefore, we consider the following<br>    # typecast reasonable, even though it is possible to violate it with otherwise-type-checked code.<br>    result_validators = cast(list[_result.ResultValidator[AgentDepsT, RunResultDataT]], self._result_validators)<br>    # TODO: Instead of this, copy the function tools to ensure they don't share current_retry state between agent<br>    #  runs. Requires some changes to `Tool` to make them copyable though.<br>    for v in self._function_tools.values():<br>        v.current_retry = 0<br>    model_settings = merge_model_settings(self.model_settings, model_settings)<br>    usage_limits = usage_limits or _usage.UsageLimits()<br>    with _logfire.span(<br>        '{agent_name} run stream {prompt=}',<br>        prompt=user_prompt,<br>        agent=self,<br>        model_name=model_used.model_name if model_used else 'no-model',<br>        agent_name=self.name or 'agent',<br>    ) as run_span:<br>        # Build the deps object for the graph<br>        graph_deps = _agent_graph.GraphAgentDeps[AgentDepsT, RunResultDataT](<br>            user_deps=deps,<br>            prompt=user_prompt,<br>            new_message_index=new_message_index,<br>            model=model_used,<br>            model_settings=model_settings,<br>            usage_limits=usage_limits,<br>            max_result_retries=self._max_result_retries,<br>            end_strategy=self.end_strategy,<br>            result_schema=result_schema,<br>            result_tools=self._result_schema.tool_defs() if self._result_schema else [],<br>            result_validators=result_validators,<br>            function_tools=self._function_tools,<br>            run_span=run_span,<br>        )<br>        start_node = _agent_graph.StreamUserPromptNode[AgentDepsT](<br>            user_prompt=user_prompt,<br>            system_prompts=self._system_prompts,<br>            system_prompt_functions=self._system_prompt_functions,<br>            system_prompt_dynamic_functions=self._system_prompt_dynamic_functions,<br>        )<br>        # Actually run<br>        node = start_node<br>        history: list[HistoryStep[_agent_graph.GraphAgentState, RunResultDataT]] = []<br>        while True:<br>            if isinstance(node, _agent_graph.StreamModelRequestNode):<br>                node = cast(<br>                    _agent_graph.StreamModelRequestNode[<br>                        AgentDepsT, result.StreamedRunResult[AgentDepsT, RunResultDataT]<br>                    ],<br>                    node,<br>                )<br>                async with node.run_to_result(GraphRunContext(graph_state, graph_deps)) as r:<br>                    if isinstance(r, End):<br>                        yield r.data<br>                        break<br>            assert not isinstance(node, End)  # the previous line should be hit first<br>            node = await graph.next(<br>                node,<br>                history,<br>                state=graph_state,<br>                deps=graph_deps,<br>                infer_name=False,<br>            )<br>```` |\n\n#### override\n\n```\noverride(\n    *,\n    deps: AgentDepsT | Unset = UNSET,\n    model: Model | KnownModelName | Unset = UNSET\n) -> Iterator[None]\n\n```\n\nContext manager to temporarily override agent dependencies and model.\n\nThis is particularly useful when testing.\nYou can find an example of this [here](https://ai.pydantic.dev/testing-evals/#overriding-model-via-pytest-fixtures).\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `deps` | `AgentDepsT | Unset` | The dependencies to use instead of the dependencies passed to the agent run. | `UNSET` |\n| `model` | `Model | KnownModelName | Unset` | The model to use instead of the model passed to the agent run. | `UNSET` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>608<br>609<br>610<br>611<br>612<br>613<br>614<br>615<br>616<br>617<br>618<br>619<br>620<br>621<br>622<br>623<br>624<br>625<br>626<br>627<br>628<br>629<br>630<br>631<br>632<br>633<br>634<br>635<br>636<br>637<br>638<br>639<br>640<br>641<br>642<br>643<br>644<br>``` | ```<br>@contextmanager<br>def override(<br>    self,<br>    *,<br>    deps: AgentDepsT | _utils.Unset = _utils.UNSET,<br>    model: models.Model | models.KnownModelName | _utils.Unset = _utils.UNSET,<br>) -> Iterator[None]:<br>    \"\"\"Context manager to temporarily override agent dependencies and model.<br>    This is particularly useful when testing.<br>    You can find an example of this [here](../testing-evals.md#overriding-model-via-pytest-fixtures).<br>    Args:<br>        deps: The dependencies to use instead of the dependencies passed to the agent run.<br>        model: The model to use instead of the model passed to the agent run.<br>    \"\"\"<br>    if _utils.is_set(deps):<br>        override_deps_before = self._override_deps<br>        self._override_deps = _utils.Some(deps)<br>    else:<br>        override_deps_before = _utils.UNSET<br>    # noinspection PyTypeChecker<br>    if _utils.is_set(model):<br>        override_model_before = self._override_model<br>        # noinspection PyTypeChecker<br>        self._override_model = _utils.Some(models.infer_model(model))  # pyright: ignore[reportArgumentType]<br>    else:<br>        override_model_before = _utils.UNSET<br>    try:<br>        yield<br>    finally:<br>        if _utils.is_set(override_deps_before):<br>            self._override_deps = override_deps_before<br>        if _utils.is_set(override_model_before):<br>            self._override_model = override_model_before<br>``` |\n\n#### system\\_prompt\n\n```\nsystem_prompt(\n    func: Callable[[RunContext[AgentDepsT]], str]\n) -> Callable[[RunContext[AgentDepsT]], str]\n\n```\n\n```\nsystem_prompt(\n    func: Callable[[RunContext[AgentDepsT]], Awaitable[str]]\n) -> Callable[[RunContext[AgentDepsT]], Awaitable[str]]\n\n```\n\n```\nsystem_prompt(func: Callable[[], str]) -> Callable[[], str]\n\n```\n\n```\nsystem_prompt(\n    func: Callable[[], Awaitable[str]]\n) -> Callable[[], Awaitable[str]]\n\n```\n\n```\nsystem_prompt(*, dynamic: bool = False) -> Callable[\\\n    [SystemPromptFunc[AgentDepsT]],\\\n    SystemPromptFunc[AgentDepsT],\\\n]\n\n```\n\n```\nsystem_prompt(\n    func: SystemPromptFunc[AgentDepsT] | None = None,\n    /,\n    *,\n    dynamic: bool = False,\n) -> (\n    Callable[\\\n        [SystemPromptFunc[AgentDepsT]],\\\n        SystemPromptFunc[AgentDepsT],\\\n    ]\n    | SystemPromptFunc[AgentDepsT]\n)\n\n```\n\nDecorator to register a system prompt function.\n\nOptionally takes [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) as its only argument.\nCan decorate a sync or async functions.\n\nThe decorator can be used either bare ( `agent.system_prompt`) or as a function call\n( `agent.system_prompt(...)`), see the examples below.\n\nOverloads for every possible signature of `system_prompt` are included so the decorator doesn't obscure\nthe type of the function, see `tests/typed_agent.py` for tests.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `func` | `SystemPromptFunc[AgentDepsT] | None` | The function to decorate | `None` |\n| `dynamic` | `bool` | If True, the system prompt will be reevaluated even when `messages_history` is provided,<br>see [`SystemPromptPart.dynamic_ref`](https://ai.pydantic.dev/api/messages/#pydantic_ai.messages.SystemPromptPart.dynamic_ref) | `False` |\n\nExample:\n\n```\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent('test', deps_type=str)\n\n@agent.system_prompt\ndef simple_system_prompt() -> str:\n    return 'foobar'\n\n@agent.system_prompt(dynamic=True)\nasync def async_system_prompt(ctx: RunContext[str]) -> str:\n    return f'{ctx.deps} is the best'\n\n```\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>667<br>668<br>669<br>670<br>671<br>672<br>673<br>674<br>675<br>676<br>677<br>678<br>679<br>680<br>681<br>682<br>683<br>684<br>685<br>686<br>687<br>688<br>689<br>690<br>691<br>692<br>693<br>694<br>695<br>696<br>697<br>698<br>699<br>700<br>701<br>702<br>703<br>704<br>705<br>706<br>707<br>708<br>709<br>710<br>711<br>712<br>713<br>714<br>715<br>716<br>717<br>718<br>719<br>720<br>721<br>722<br>723<br>``` | ````<br>def system_prompt(<br>    self,<br>    func: _system_prompt.SystemPromptFunc[AgentDepsT] | None = None,<br>    /,<br>    *,<br>    dynamic: bool = False,<br>) -> (<br>    Callable[[_system_prompt.SystemPromptFunc[AgentDepsT]], _system_prompt.SystemPromptFunc[AgentDepsT]]<br>    | _system_prompt.SystemPromptFunc[AgentDepsT]<br>):<br>    \"\"\"Decorator to register a system prompt function.<br>    Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its only argument.<br>    Can decorate a sync or async functions.<br>    The decorator can be used either bare (`agent.system_prompt`) or as a function call<br>    (`agent.system_prompt(...)`), see the examples below.<br>    Overloads for every possible signature of `system_prompt` are included so the decorator doesn't obscure<br>    the type of the function, see `tests/typed_agent.py` for tests.<br>    Args:<br>        func: The function to decorate<br>        dynamic: If True, the system prompt will be reevaluated even when `messages_history` is provided,<br>            see [`SystemPromptPart.dynamic_ref`][pydantic_ai.messages.SystemPromptPart.dynamic_ref]<br>    Example:<br>    ```python<br>    from pydantic_ai import Agent, RunContext<br>    agent = Agent('test', deps_type=str)<br>    @agent.system_prompt<br>    def simple_system_prompt() -> str:<br>        return 'foobar'<br>    @agent.system_prompt(dynamic=True)<br>    async def async_system_prompt(ctx: RunContext[str]) -> str:<br>        return f'{ctx.deps} is the best'<br>    ```<br>    \"\"\"<br>    if func is None:<br>        def decorator(<br>            func_: _system_prompt.SystemPromptFunc[AgentDepsT],<br>        ) -> _system_prompt.SystemPromptFunc[AgentDepsT]:<br>            runner = _system_prompt.SystemPromptRunner[AgentDepsT](func_, dynamic=dynamic)<br>            self._system_prompt_functions.append(runner)<br>            if dynamic:<br>                self._system_prompt_dynamic_functions[func_.__qualname__] = runner<br>            return func_<br>        return decorator<br>    else:<br>        assert not dynamic, \"dynamic can't be True in this case\"<br>        self._system_prompt_functions.append(_system_prompt.SystemPromptRunner[AgentDepsT](func, dynamic=dynamic))<br>        return func<br>```` |\n\n#### result\\_validator\n\n```\nresult_validator(\n    func: Callable[\\\n        [RunContext[AgentDepsT], ResultDataT], ResultDataT\\\n    ]\n) -> Callable[\\\n    [RunContext[AgentDepsT], ResultDataT], ResultDataT\\\n]\n\n```\n\n```\nresult_validator(\n    func: Callable[\\\n        [RunContext[AgentDepsT], ResultDataT],\\\n        Awaitable[ResultDataT],\\\n    ]\n) -> Callable[\\\n    [RunContext[AgentDepsT], ResultDataT],\\\n    Awaitable[ResultDataT],\\\n]\n\n```\n\n```\nresult_validator(\n    func: Callable[[ResultDataT], ResultDataT]\n) -> Callable[[ResultDataT], ResultDataT]\n\n```\n\n```\nresult_validator(\n    func: Callable[[ResultDataT], Awaitable[ResultDataT]]\n) -> Callable[[ResultDataT], Awaitable[ResultDataT]]\n\n```\n\n```\nresult_validator(\n    func: ResultValidatorFunc[AgentDepsT, ResultDataT]\n) -> ResultValidatorFunc[AgentDepsT, ResultDataT]\n\n```\n\nDecorator to register a result validator function.\n\nOptionally takes [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) as its first argument.\nCan decorate a sync or async functions.\n\nOverloads for every possible signature of `result_validator` are included so the decorator doesn't obscure\nthe type of the function, see `tests/typed_agent.py` for tests.\n\nExample:\n\n```\nfrom pydantic_ai import Agent, ModelRetry, RunContext\n\nagent = Agent('test', deps_type=str)\n\n@agent.result_validator\ndef result_validator_simple(data: str) -> str:\n    if 'wrong' in data:\n        raise ModelRetry('wrong response')\n    return data\n\n@agent.result_validator\nasync def result_validator_deps(ctx: RunContext[str], data: str) -> str:\n    if ctx.deps in data:\n        raise ModelRetry('wrong response')\n    return data\n\nresult = agent.run_sync('foobar', deps='spam')\nprint(result.data)\n#> success (no tool calls)\n\n```\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>745<br>746<br>747<br>748<br>749<br>750<br>751<br>752<br>753<br>754<br>755<br>756<br>757<br>758<br>759<br>760<br>761<br>762<br>763<br>764<br>765<br>766<br>767<br>768<br>769<br>770<br>771<br>772<br>773<br>774<br>775<br>776<br>777<br>778<br>779<br>780<br>``` | ````<br>def result_validator(<br>    self, func: _result.ResultValidatorFunc[AgentDepsT, ResultDataT], /<br>) -> _result.ResultValidatorFunc[AgentDepsT, ResultDataT]:<br>    \"\"\"Decorator to register a result validator function.<br>    Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.<br>    Can decorate a sync or async functions.<br>    Overloads for every possible signature of `result_validator` are included so the decorator doesn't obscure<br>    the type of the function, see `tests/typed_agent.py` for tests.<br>    Example:<br>    ```python<br>    from pydantic_ai import Agent, ModelRetry, RunContext<br>    agent = Agent('test', deps_type=str)<br>    @agent.result_validator<br>    def result_validator_simple(data: str) -> str:<br>        if 'wrong' in data:<br>            raise ModelRetry('wrong response')<br>        return data<br>    @agent.result_validator<br>    async def result_validator_deps(ctx: RunContext[str], data: str) -> str:<br>        if ctx.deps in data:<br>            raise ModelRetry('wrong response')<br>        return data<br>    result = agent.run_sync('foobar', deps='spam')<br>    print(result.data)<br>    #> success (no tool calls)<br>    ```<br>    \"\"\"<br>    self._result_validators.append(_result.ResultValidator[AgentDepsT, Any](func))<br>    return func<br>```` |\n\n#### tool\n\n```\ntool(\n    func: ToolFuncContext[AgentDepsT, ToolParams]\n) -> ToolFuncContext[AgentDepsT, ToolParams]\n\n```\n\n```\ntool(\n    *,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False\n) -> Callable[\\\n    [ToolFuncContext[AgentDepsT, ToolParams]],\\\n    ToolFuncContext[AgentDepsT, ToolParams],\\\n]\n\n```\n\n```\ntool(\n    func: (\n        ToolFuncContext[AgentDepsT, ToolParams] | None\n    ) = None,\n    /,\n    *,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n) -> Any\n\n```\n\nDecorator to register a tool function which takes [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) as its first argument.\n\nCan decorate a sync or async functions.\n\nThe docstring is inspected to extract both the tool description and description of each parameter,\n[learn more](https://ai.pydantic.dev/tools/#function-tools-and-schema).\n\nWe can't add overloads for every possible signature of tool, since the return type is a recursive union\nso the signature of functions decorated with `@agent.tool` is obscured.\n\nExample:\n\n```\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent('test', deps_type=int)\n\n@agent.tool\ndef foobar(ctx: RunContext[int], x: int) -> int:\n    return ctx.deps + x\n\n@agent.tool(retries=2)\nasync def spam(ctx: RunContext[str], y: float) -> float:\n    return ctx.deps + y\n\nresult = agent.run_sync('foobar', deps=1)\nprint(result.data)\n#> {\"foobar\":1,\"spam\":1.0}\n\n```\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `func` | `ToolFuncContext[AgentDepsT, ToolParams] | None` | The tool function to register. | `None` |\n| `retries` | `int | None` | The number of retries to allow for this tool, defaults to the agent's default retries,<br>which defaults to 1. | `None` |\n| `prepare` | `ToolPrepareFunc[AgentDepsT] | None` | custom method to prepare the tool definition for each step, return `None` to omit this<br>tool from a given step. This is useful if you want to customise a tool at call time,<br>or omit it completely from a step. See [`ToolPrepareFunc`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolPrepareFunc). | `None` |\n| `docstring_format` | `DocstringFormat` | The format of the docstring, see [`DocstringFormat`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.DocstringFormat).<br>Defaults to `'auto'`, such that the format is inferred from the structure of the docstring. | `'auto'` |\n| `require_parameter_descriptions` | `bool` | If True, raise an error if a parameter description is missing. Defaults to False. | `False` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>796<br>797<br>798<br>799<br>800<br>801<br>802<br>803<br>804<br>805<br>806<br>807<br>808<br>809<br>810<br>811<br>812<br>813<br>814<br>815<br>816<br>817<br>818<br>819<br>820<br>821<br>822<br>823<br>824<br>825<br>826<br>827<br>828<br>829<br>830<br>831<br>832<br>833<br>834<br>835<br>836<br>837<br>838<br>839<br>840<br>841<br>842<br>843<br>844<br>845<br>846<br>847<br>848<br>849<br>850<br>851<br>852<br>853<br>854<br>855<br>856<br>857<br>858<br>859<br>``` | ````<br>def tool(<br>    self,<br>    func: ToolFuncContext[AgentDepsT, ToolParams] | None = None,<br>    /,<br>    *,<br>    retries: int | None = None,<br>    prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>    docstring_format: DocstringFormat = 'auto',<br>    require_parameter_descriptions: bool = False,<br>) -> Any:<br>    \"\"\"Decorator to register a tool function which takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.<br>    Can decorate a sync or async functions.<br>    The docstring is inspected to extract both the tool description and description of each parameter,<br>    [learn more](../tools.md#function-tools-and-schema).<br>    We can't add overloads for every possible signature of tool, since the return type is a recursive union<br>    so the signature of functions decorated with `@agent.tool` is obscured.<br>    Example:<br>    ```python<br>    from pydantic_ai import Agent, RunContext<br>    agent = Agent('test', deps_type=int)<br>    @agent.tool<br>    def foobar(ctx: RunContext[int], x: int) -> int:<br>        return ctx.deps + x<br>    @agent.tool(retries=2)<br>    async def spam(ctx: RunContext[str], y: float) -> float:<br>        return ctx.deps + y<br>    result = agent.run_sync('foobar', deps=1)<br>    print(result.data)<br>    #> {\"foobar\":1,\"spam\":1.0}<br>    ```<br>    Args:<br>        func: The tool function to register.<br>        retries: The number of retries to allow for this tool, defaults to the agent's default retries,<br>            which defaults to 1.<br>        prepare: custom method to prepare the tool definition for each step, return `None` to omit this<br>            tool from a given step. This is useful if you want to customise a tool at call time,<br>            or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].<br>        docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].<br>            Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.<br>        require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.<br>    \"\"\"<br>    if func is None:<br>        def tool_decorator(<br>            func_: ToolFuncContext[AgentDepsT, ToolParams],<br>        ) -> ToolFuncContext[AgentDepsT, ToolParams]:<br>            # noinspection PyTypeChecker<br>            self._register_function(func_, True, retries, prepare, docstring_format, require_parameter_descriptions)<br>            return func_<br>        return tool_decorator<br>    else:<br>        # noinspection PyTypeChecker<br>        self._register_function(func, True, retries, prepare, docstring_format, require_parameter_descriptions)<br>        return func<br>```` |\n\n#### tool\\_plain\n\n```\ntool_plain(\n    func: ToolFuncPlain[ToolParams],\n) -> ToolFuncPlain[ToolParams]\n\n```\n\n```\ntool_plain(\n    *,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False\n) -> Callable[\\\n    [ToolFuncPlain[ToolParams]], ToolFuncPlain[ToolParams]\\\n]\n\n```\n\n```\ntool_plain(\n    func: ToolFuncPlain[ToolParams] | None = None,\n    /,\n    *,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n) -> Any\n\n```\n\nDecorator to register a tool function which DOES NOT take `RunContext` as an argument.\n\nCan decorate a sync or async functions.\n\nThe docstring is inspected to extract both the tool description and description of each parameter,\n[learn more](https://ai.pydantic.dev/tools/#function-tools-and-schema).\n\nWe can't add overloads for every possible signature of tool, since the return type is a recursive union\nso the signature of functions decorated with `@agent.tool` is obscured.\n\nExample:\n\n```\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent('test')\n\n@agent.tool\ndef foobar(ctx: RunContext[int]) -> int:\n    return 123\n\n@agent.tool(retries=2)\nasync def spam(ctx: RunContext[str]) -> float:\n    return 3.14\n\nresult = agent.run_sync('foobar', deps=1)\nprint(result.data)\n#> {\"foobar\":123,\"spam\":3.14}\n\n```\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `func` | `ToolFuncPlain[ToolParams] | None` | The tool function to register. | `None` |\n| `retries` | `int | None` | The number of retries to allow for this tool, defaults to the agent's default retries,<br>which defaults to 1. | `None` |\n| `prepare` | `ToolPrepareFunc[AgentDepsT] | None` | custom method to prepare the tool definition for each step, return `None` to omit this<br>tool from a given step. This is useful if you want to customise a tool at call time,<br>or omit it completely from a step. See [`ToolPrepareFunc`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolPrepareFunc). | `None` |\n| `docstring_format` | `DocstringFormat` | The format of the docstring, see [`DocstringFormat`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.DocstringFormat).<br>Defaults to `'auto'`, such that the format is inferred from the structure of the docstring. | `'auto'` |\n| `require_parameter_descriptions` | `bool` | If True, raise an error if a parameter description is missing. Defaults to False. | `False` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>875<br>876<br>877<br>878<br>879<br>880<br>881<br>882<br>883<br>884<br>885<br>886<br>887<br>888<br>889<br>890<br>891<br>892<br>893<br>894<br>895<br>896<br>897<br>898<br>899<br>900<br>901<br>902<br>903<br>904<br>905<br>906<br>907<br>908<br>909<br>910<br>911<br>912<br>913<br>914<br>915<br>916<br>917<br>918<br>919<br>920<br>921<br>922<br>923<br>924<br>925<br>926<br>927<br>928<br>929<br>930<br>931<br>932<br>933<br>934<br>935<br>936<br>937<br>``` | ````<br>def tool_plain(<br>    self,<br>    func: ToolFuncPlain[ToolParams] | None = None,<br>    /,<br>    *,<br>    retries: int | None = None,<br>    prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>    docstring_format: DocstringFormat = 'auto',<br>    require_parameter_descriptions: bool = False,<br>) -> Any:<br>    \"\"\"Decorator to register a tool function which DOES NOT take `RunContext` as an argument.<br>    Can decorate a sync or async functions.<br>    The docstring is inspected to extract both the tool description and description of each parameter,<br>    [learn more](../tools.md#function-tools-and-schema).<br>    We can't add overloads for every possible signature of tool, since the return type is a recursive union<br>    so the signature of functions decorated with `@agent.tool` is obscured.<br>    Example:<br>    ```python<br>    from pydantic_ai import Agent, RunContext<br>    agent = Agent('test')<br>    @agent.tool<br>    def foobar(ctx: RunContext[int]) -> int:<br>        return 123<br>    @agent.tool(retries=2)<br>    async def spam(ctx: RunContext[str]) -> float:<br>        return 3.14<br>    result = agent.run_sync('foobar', deps=1)<br>    print(result.data)<br>    #> {\"foobar\":123,\"spam\":3.14}<br>    ```<br>    Args:<br>        func: The tool function to register.<br>        retries: The number of retries to allow for this tool, defaults to the agent's default retries,<br>            which defaults to 1.<br>        prepare: custom method to prepare the tool definition for each step, return `None` to omit this<br>            tool from a given step. This is useful if you want to customise a tool at call time,<br>            or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].<br>        docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].<br>            Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.<br>        require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.<br>    \"\"\"<br>    if func is None:<br>        def tool_decorator(func_: ToolFuncPlain[ToolParams]) -> ToolFuncPlain[ToolParams]:<br>            # noinspection PyTypeChecker<br>            self._register_function(<br>                func_, False, retries, prepare, docstring_format, require_parameter_descriptions<br>            )<br>            return func_<br>        return tool_decorator<br>    else:<br>        self._register_function(func, False, retries, prepare, docstring_format, require_parameter_descriptions)<br>        return func<br>```` |\n\n### EndStrategy`module-attribute`\n\n```\nEndStrategy = Literal['early', 'exhaustive']\n\n```\n\nThe strategy for handling multiple tool calls when a final result is found.\n\n- `'early'`: Stop processing other tool calls once a final result is found\n- `'exhaustive'`: Process all tool calls even after finding a final result\n\n### capture\\_run\\_messages\n\n```\ncapture_run_messages() -> Iterator[list[ModelMessage]]\n\n```\n\nContext manager to access the messages used in a [`run`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run), [`run_sync`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_sync), or [`run_stream`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.run_stream) call.\n\nUseful when a run may raise an exception, see [model errors](https://ai.pydantic.dev/agents/#model-errors) for more information.\n\nExamples:\n\n```\nfrom pydantic_ai import Agent, capture_run_messages\n\nagent = Agent('test')\n\nwith capture_run_messages() as messages:\n    try:\n        result = agent.run_sync('foobar')\n    except Exception:\n        print(messages)\n        raise\n\n```\n\nNote\n\nIf you call `run`, `run_sync`, or `run_stream` more than once within a single `capture_run_messages` context,\n`messages` will represent the messages exchanged during the first call only.\n\nSource code in `pydantic_ai_slim/pydantic_ai/_agent_graph.py`\n\n|     |     |\n| --- | --- |\n| ```<br>702<br>703<br>704<br>705<br>706<br>707<br>708<br>709<br>710<br>711<br>712<br>713<br>714<br>715<br>716<br>717<br>718<br>719<br>720<br>721<br>722<br>723<br>724<br>725<br>726<br>727<br>728<br>729<br>730<br>731<br>732<br>733<br>734<br>``` | ````<br>@contextmanager<br>def capture_run_messages() -> Iterator[list[_messages.ModelMessage]]:<br>    \"\"\"Context manager to access the messages used in a [`run`][pydantic_ai.Agent.run], [`run_sync`][pydantic_ai.Agent.run_sync], or [`run_stream`][pydantic_ai.Agent.run_stream] call.<br>    Useful when a run may raise an exception, see [model errors](../agents.md#model-errors) for more information.<br>    Examples:<br>    ```python<br>    from pydantic_ai import Agent, capture_run_messages<br>    agent = Agent('test')<br>    with capture_run_messages() as messages:<br>        try:<br>            result = agent.run_sync('foobar')<br>        except Exception:<br>            print(messages)<br>            raise<br>    ```<br>    !!! note<br>        If you call `run`, `run_sync`, or `run_stream` more than once within a single `capture_run_messages` context,<br>        `messages` will represent the messages exchanged during the first call only.<br>    \"\"\"<br>    try:<br>        yield _messages_ctx_var.get().messages<br>    except LookupError:<br>        messages: list[_messages.ModelMessage] = []<br>        token = _messages_ctx_var.set(_RunMessages(messages))<br>        try:<br>            yield messages<br>        finally:<br>            _messages_ctx_var.reset(token)<br>```` |",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/agent/",
      "ogUrl": "https://ai.pydantic.dev/api/agent/",
      "title": "pydantic_ai.agent - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/agent/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/agent.png",
      "ogTitle": "pydantic_ai.agent - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/agent.png",
      "og:title": "pydantic_ai.agent - PydanticAI",
      "scrapeId": "73dff3a0-009a-43d4-96c0-43fd32774a73",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/agent/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/agent.png",
      "twitter:title": "pydantic_ai.agent - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/test/#pydantic_aimodelstest)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.test`\n\nUtility model for quickly testing apps built with PydanticAI.\n\nHere's a minimal example:\n\ntest\\_model\\_usage.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.test import TestModel\n\nmy_agent = Agent('openai:gpt-4o', system_prompt='...')\n\nasync def test_my_agent():\n    \"\"\"Unit test for my_agent, to be run by pytest.\"\"\"\n    m = TestModel()\n    with my_agent.override(model=m):\n        result = await my_agent.run('Testing my agent...')\n        assert result.data == 'success (no tool calls)'\n    assert m.last_model_request_parameters.function_tools == []\n\n```\n\nSee [Unit testing with `TestModel`](https://ai.pydantic.dev/testing-evals/#unit-testing-with-testmodel) for detailed documentation.\n\n### TestModel`dataclass`\n\nBases: `Model`\n\nA model specifically for testing purposes.\n\nThis will (by default) call all tools in the agent, then return a tool response if possible,\notherwise a plain response.\n\nHow useful this model is will vary significantly.\n\nApart from `__init__` derived by the `dataclass` decorator, all methods are private or match those\nof the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/test.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 50<br> 51<br> 52<br> 53<br> 54<br> 55<br> 56<br> 57<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>``` | ```<br>@dataclass<br>class TestModel(Model):<br>    \"\"\"A model specifically for testing purposes.<br>    This will (by default) call all tools in the agent, then return a tool response if possible,<br>    otherwise a plain response.<br>    How useful this model is will vary significantly.<br>    Apart from `__init__` derived by the `dataclass` decorator, all methods are private or match those<br>    of the base class.<br>    \"\"\"<br>    # NOTE: Avoid test discovery by pytest.<br>    __test__ = False<br>    call_tools: list[str] | Literal['all'] = 'all'<br>    \"\"\"List of tools to call. If `'all'`, all tools will be called.\"\"\"<br>    custom_result_text: str | None = None<br>    \"\"\"If set, this text is returned as the final result.\"\"\"<br>    custom_result_args: Any | None = None<br>    \"\"\"If set, these args will be passed to the result tool.\"\"\"<br>    seed: int = 0<br>    \"\"\"Seed for generating random data.\"\"\"<br>    last_model_request_parameters: ModelRequestParameters | None = field(default=None, init=False)<br>    \"\"\"The last ModelRequestParameters passed to the model in a request.<br>    The ModelRequestParameters contains information about the function and result tools available during request handling.<br>    This is set when a request is made, so will reflect the function tools from the last step of the last run.<br>    \"\"\"<br>    _model_name: str = field(default='test', repr=False)<br>    _system: str | None = field(default=None, repr=False)<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, Usage]:<br>        self.last_model_request_parameters = model_request_parameters<br>        model_response = self._request(messages, model_settings, model_request_parameters)<br>        usage = _estimate_usage([*messages, model_response])<br>        return model_response, usage<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        self.last_model_request_parameters = model_request_parameters<br>        model_response = self._request(messages, model_settings, model_request_parameters)<br>        yield TestStreamedResponse(<br>            _model_name=self._model_name, _structured_response=model_response, _messages=messages<br>        )<br>    @property<br>    def model_name(self) -> str:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>    def gen_tool_args(self, tool_def: ToolDefinition) -> Any:<br>        return _JsonSchemaTestData(tool_def.parameters_json_schema, self.seed).generate()<br>    def _get_tool_calls(self, model_request_parameters: ModelRequestParameters) -> list[tuple[str, ToolDefinition]]:<br>        if self.call_tools == 'all':<br>            return [(r.name, r) for r in model_request_parameters.function_tools]<br>        else:<br>            function_tools_lookup = {t.name: t for t in model_request_parameters.function_tools}<br>            tools_to_call = (function_tools_lookup[name] for name in self.call_tools)<br>            return [(r.name, r) for r in tools_to_call]<br>    def _get_result(self, model_request_parameters: ModelRequestParameters) -> _TextResult | _FunctionToolResult:<br>        if self.custom_result_text is not None:<br>            assert (<br>                model_request_parameters.allow_text_result<br>            ), 'Plain response not allowed, but `custom_result_text` is set.'<br>            assert self.custom_result_args is None, 'Cannot set both `custom_result_text` and `custom_result_args`.'<br>            return _TextResult(self.custom_result_text)<br>        elif self.custom_result_args is not None:<br>            assert (<br>                model_request_parameters.result_tools is not None<br>            ), 'No result tools provided, but `custom_result_args` is set.'<br>            result_tool = model_request_parameters.result_tools[0]<br>            if k := result_tool.outer_typed_dict_key:<br>                return _FunctionToolResult({k: self.custom_result_args})<br>            else:<br>                return _FunctionToolResult(self.custom_result_args)<br>        elif model_request_parameters.allow_text_result:<br>            return _TextResult(None)<br>        elif model_request_parameters.result_tools:<br>            return _FunctionToolResult(None)<br>        else:<br>            return _TextResult(None)<br>    def _request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> ModelResponse:<br>        tool_calls = self._get_tool_calls(model_request_parameters)<br>        result = self._get_result(model_request_parameters)<br>        result_tools = model_request_parameters.result_tools<br>        # if there are tools, the first thing we want to do is call all of them<br>        if tool_calls and not any(isinstance(m, ModelResponse) for m in messages):<br>            return ModelResponse(<br>                parts=[ToolCallPart(name, self.gen_tool_args(args)) for name, args in tool_calls],<br>                model_name=self._model_name,<br>            )<br>        if messages:<br>            last_message = messages[-1]<br>            assert isinstance(last_message, ModelRequest), 'Expected last message to be a `ModelRequest`.'<br>            # check if there are any retry prompts, if so retry them<br>            new_retry_names = {p.tool_name for p in last_message.parts if isinstance(p, RetryPromptPart)}<br>            if new_retry_names:<br>                # Handle retries for both function tools and result tools<br>                # Check function tools first<br>                retry_parts: list[ModelResponsePart] = [<br>                    ToolCallPart(name, self.gen_tool_args(args)) for name, args in tool_calls if name in new_retry_names<br>                ]<br>                # Check result tools<br>                if result_tools:<br>                    retry_parts.extend(<br>                        [<br>                            ToolCallPart(<br>                                tool.name,<br>                                result.value<br>                                if isinstance(result, _FunctionToolResult) and result.value is not None<br>                                else self.gen_tool_args(tool),<br>                            )<br>                            for tool in result_tools<br>                            if tool.name in new_retry_names<br>                        ]<br>                    )<br>                return ModelResponse(parts=retry_parts, model_name=self._model_name)<br>        if isinstance(result, _TextResult):<br>            if (response_text := result.value) is None:<br>                # build up details of tool responses<br>                output: dict[str, Any] = {}<br>                for message in messages:<br>                    if isinstance(message, ModelRequest):<br>                        for part in message.parts:<br>                            if isinstance(part, ToolReturnPart):<br>                                output[part.tool_name] = part.content<br>                if output:<br>                    return ModelResponse(<br>                        parts=[TextPart(pydantic_core.to_json(output).decode())], model_name=self._model_name<br>                    )<br>                else:<br>                    return ModelResponse(parts=[TextPart('success (no tool calls)')], model_name=self._model_name)<br>            else:<br>                return ModelResponse(parts=[TextPart(response_text)], model_name=self._model_name)<br>        else:<br>            assert result_tools, 'No result tools provided'<br>            custom_result_args = result.value<br>            result_tool = result_tools[self.seed % len(result_tools)]<br>            if custom_result_args is not None:<br>                return ModelResponse(<br>                    parts=[ToolCallPart(result_tool.name, custom_result_args)], model_name=self._model_name<br>                )<br>            else:<br>                response_args = self.gen_tool_args(result_tool)<br>                return ModelResponse(parts=[ToolCallPart(result_tool.name, response_args)], model_name=self._model_name)<br>``` |\n\n#### call\\_tools`class-attribute``instance-attribute`\n\n```\ncall_tools: list[str] | Literal['all'] = 'all'\n\n```\n\nList of tools to call. If `'all'`, all tools will be called.\n\n#### custom\\_result\\_text`class-attribute``instance-attribute`\n\n```\ncustom_result_text: str | None = None\n\n```\n\nIf set, this text is returned as the final result.\n\n#### custom\\_result\\_args`class-attribute``instance-attribute`\n\n```\ncustom_result_args: Any | None = None\n\n```\n\nIf set, these args will be passed to the result tool.\n\n#### seed`class-attribute``instance-attribute`\n\n```\nseed: int = 0\n\n```\n\nSeed for generating random data.\n\n#### last\\_model\\_request\\_parameters`class-attribute``instance-attribute`\n\n```\nlast_model_request_parameters: (\n    ModelRequestParameters | None\n) = field(default=None, init=False)\n\n```\n\nThe last ModelRequestParameters passed to the model in a request.\n\nThe ModelRequestParameters contains information about the function and result tools available during request handling.\n\nThis is set when a request is made, so will reflect the function tools from the last step of the last run.\n\n#### model\\_name`property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### TestStreamedResponse`dataclass`\n\nBases: `StreamedResponse`\n\nA structured response that streams test data.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/test.py`\n\n|     |     |\n| --- | --- |\n| ```<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>``` | ```<br>@dataclass<br>class TestStreamedResponse(StreamedResponse):<br>    \"\"\"A structured response that streams test data.\"\"\"<br>    _model_name: str<br>    _structured_response: ModelResponse<br>    _messages: InitVar[Iterable[ModelMessage]]<br>    _timestamp: datetime = field(default_factory=_utils.now_utc, init=False)<br>    def __post_init__(self, _messages: Iterable[ModelMessage]):<br>        self._usage = _estimate_usage(_messages)<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        for i, part in enumerate(self._structured_response.parts):<br>            if isinstance(part, TextPart):<br>                text = part.content<br>                *words, last_word = text.split(' ')<br>                words = [f'{word} ' for word in words]<br>                words.append(last_word)<br>                if len(words) == 1 and len(text) > 2:<br>                    mid = len(text) // 2<br>                    words = [text[:mid], text[mid:]]<br>                self._usage += _get_string_usage('')<br>                yield self._parts_manager.handle_text_delta(vendor_part_id=i, content='')<br>                for word in words:<br>                    self._usage += _get_string_usage(word)<br>                    yield self._parts_manager.handle_text_delta(vendor_part_id=i, content=word)<br>            else:<br>                yield self._parts_manager.handle_tool_call_part(<br>                    vendor_part_id=i, tool_name=part.tool_name, args=part.args, tool_call_id=part.tool_call_id<br>                )<br>    @property<br>    def model_name(self) -> str:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        return self._model_name<br>    @property<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._timestamp<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: str\n\n```\n\nGet the model name of the response.\n\n#### timestamp`property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/test/",
      "ogUrl": "https://ai.pydantic.dev/api/models/test/",
      "title": "pydantic_ai.models.test - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/test/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/test.png",
      "ogTitle": "pydantic_ai.models.test - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/test.png",
      "og:title": "pydantic_ai.models.test - PydanticAI",
      "scrapeId": "66fa5097-4f3f-4fcf-ad45-ef5619f8f89c",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/test/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/test.png",
      "twitter:title": "pydantic_ai.models.test - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/tools/#function-tools)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Function Tools\n\nFunction tools provide a mechanism for models to retrieve extra information to help them generate a response.\n\nThey're useful when it is impractical or impossible to put all the context an agent might need into the system prompt, or when you want to make agents' behavior more deterministic or reliable by deferring some of the logic required to generate a response to another (not necessarily AI-powered) tool.\n\nFunction tools vs. RAG\n\nFunction tools are basically the \"R\" of RAG (Retrieval-Augmented Generation) — they augment what the model can do by letting it request extra information.\n\nThe main semantic difference between PydanticAI Tools and RAG is RAG is synonymous with vector search, while PydanticAI tools are more general-purpose. (Note: we may add support for vector search functionality in the future, particularly an API for generating embeddings. See [#58](https://github.com/pydantic/pydantic-ai/issues/58))\n\nThere are a number of ways to register tools with an agent:\n\n- via the [`@agent.tool`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool) decorator — for tools that need access to the agent [context](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext)\n- via the [`@agent.tool_plain`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool_plain) decorator — for tools that do not need access to the agent [context](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext)\n- via the [`tools`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__) keyword argument to `Agent` which can take either plain functions, or instances of [`Tool`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.Tool)\n\n`@agent.tool` is considered the default decorator since in the majority of cases tools will need access to the agent context.\n\nHere's an example using both:\n\ndice\\_game.py\n\n```\nimport random\n\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent(\n    'google-gla:gemini-1.5-flash',\n    deps_type=str,\n    system_prompt=(\n        \"You're a dice game, you should roll the die and see if the number \"\n        \"you get back matches the user's guess. If so, tell them they're a winner. \"\n        \"Use the player's name in the response.\"\n    ),\n)\n\n@agent.tool_plain\ndef roll_die() -> str:\n    \"\"\"Roll a six-sided die and return the result.\"\"\"\n    return str(random.randint(1, 6))\n\n@agent.tool\ndef get_player_name(ctx: RunContext[str]) -> str:\n    \"\"\"Get the player's name.\"\"\"\n    return ctx.deps\n\ndice_result = agent.run_sync('My guess is 4', deps='Anne')\nprint(dice_result.data)\n#> Congratulations Anne, you guessed correctly! You're a winner!\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nLet's print the messages from that game to see what happened:\n\ndice\\_game\\_messages.py\n\n```\nfrom dice_game import dice_result\n\nprint(dice_result.all_messages())\n\"\"\"\n[\\\n    ModelRequest(\\\n        parts=[\\\n            SystemPromptPart(\\\n                content=\"You're a dice game, you should roll the die and see if the number you get back matches the user's guess. If so, tell them they're a winner. Use the player's name in the response.\",\\\n                dynamic_ref=None,\\\n                part_kind='system-prompt',\\\n            ),\\\n            UserPromptPart(\\\n                content='My guess is 4',\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='user-prompt',\\\n            ),\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            ToolCallPart(\\\n                tool_name='roll_die', args={}, tool_call_id=None, part_kind='tool-call'\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n    ModelRequest(\\\n        parts=[\\\n            ToolReturnPart(\\\n                tool_name='roll_die',\\\n                content='4',\\\n                tool_call_id=None,\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='tool-return',\\\n            )\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            ToolCallPart(\\\n                tool_name='get_player_name',\\\n                args={},\\\n                tool_call_id=None,\\\n                part_kind='tool-call',\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n    ModelRequest(\\\n        parts=[\\\n            ToolReturnPart(\\\n                tool_name='get_player_name',\\\n                content='Anne',\\\n                tool_call_id=None,\\\n                timestamp=datetime.datetime(...),\\\n                part_kind='tool-return',\\\n            )\\\n        ],\\\n        kind='request',\\\n    ),\\\n    ModelResponse(\\\n        parts=[\\\n            TextPart(\\\n                content=\"Congratulations Anne, you guessed correctly! You're a winner!\",\\\n                part_kind='text',\\\n            )\\\n        ],\\\n        model_name='function:model_logic',\\\n        timestamp=datetime.datetime(...),\\\n        kind='response',\\\n    ),\\\n]\n\"\"\"\n\n```\n\nWe can represent this with a diagram:\n\n## Registering Function Tools via kwarg\n\nAs well as using the decorators, we can register tools via the `tools` argument to the [`Agent` constructor](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.__init__). This is useful when you want to reuse tools, and can also give more fine-grained control over the tools.\n\ndice\\_game\\_tool\\_kwarg.py\n\n```\nimport random\n\nfrom pydantic_ai import Agent, RunContext, Tool\n\ndef roll_die() -> str:\n    \"\"\"Roll a six-sided die and return the result.\"\"\"\n    return str(random.randint(1, 6))\n\ndef get_player_name(ctx: RunContext[str]) -> str:\n    \"\"\"Get the player's name.\"\"\"\n    return ctx.deps\n\nagent_a = Agent(\n    'google-gla:gemini-1.5-flash',\n    deps_type=str,\n    tools=[roll_die, get_player_name],\n)\nagent_b = Agent(\n    'google-gla:gemini-1.5-flash',\n    deps_type=str,\n    tools=[\\\n        Tool(roll_die, takes_ctx=False),\\\n        Tool(get_player_name, takes_ctx=True),\\\n    ],\n)\ndice_result = agent_b.run_sync('My guess is 4', deps='Anne')\nprint(dice_result.data)\n#> Congratulations Anne, you guessed correctly! You're a winner!\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\n## Function Tools vs. Structured Results\n\nAs the name suggests, function tools use the model's \"tools\" or \"functions\" API to let the model know what is available to call. Tools or functions are also used to define the schema(s) for structured responses, thus a model might have access to many tools, some of which call function tools while others end the run and return a result.\n\n## Function tools and schema\n\nFunction parameters are extracted from the function signature, and all parameters except `RunContext` are used to build the schema for that tool call.\n\nEven better, PydanticAI extracts the docstring from functions and (thanks to [griffe](https://mkdocstrings.github.io/griffe/)) extracts parameter descriptions from the docstring and adds them to the schema.\n\n[Griffe supports](https://mkdocstrings.github.io/griffe/reference/docstrings/#docstrings) extracting parameter descriptions from `google`, `numpy`, and `sphinx` style docstrings. PydanticAI will infer the format to use based on the docstring, but you can explicitly set it using [`docstring_format`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.DocstringFormat). You can also enforce parameter requirements by setting `require_parameter_descriptions=True`. This will raise a [`UserError`](https://ai.pydantic.dev/api/exceptions/#pydantic_ai.exceptions.UserError) if a parameter description is missing.\n\nTo demonstrate a tool's schema, here we use [`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) to print the schema a model would receive:\n\ntool\\_schema.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.messages import ModelMessage, ModelResponse, TextPart\nfrom pydantic_ai.models.function import AgentInfo, FunctionModel\n\nagent = Agent()\n\n@agent.tool_plain(docstring_format='google', require_parameter_descriptions=True)\ndef foobar(a: int, b: str, c: dict[str, list[float]]) -> str:\n    \"\"\"Get me foobar.\n\n    Args:\n        a: apple pie\n        b: banana cake\n        c: carrot smoothie\n    \"\"\"\n    return f'{a} {b} {c}'\n\ndef print_schema(messages: list[ModelMessage], info: AgentInfo) -> ModelResponse:\n    tool = info.function_tools[0]\n    print(tool.description)\n    #> Get me foobar.\n    print(tool.parameters_json_schema)\n    \"\"\"\n    {\n        'properties': {\n            'a': {'description': 'apple pie', 'title': 'A', 'type': 'integer'},\n            'b': {'description': 'banana cake', 'title': 'B', 'type': 'string'},\n            'c': {\n                'additionalProperties': {'items': {'type': 'number'}, 'type': 'array'},\n                'description': 'carrot smoothie',\n                'title': 'C',\n                'type': 'object',\n            },\n        },\n        'required': ['a', 'b', 'c'],\n        'type': 'object',\n        'additionalProperties': False,\n    }\n    \"\"\"\n    return ModelResponse(parts=[TextPart('foobar')])\n\nagent.run_sync('hello', model=FunctionModel(print_schema))\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nThe return type of tool can be anything which Pydantic can serialize to JSON as some models (e.g. Gemini) support semi-structured return values, some expect text (OpenAI) but seem to be just as good at extracting meaning from the data. If a Python object is returned and the model expects a string, the value will be serialized to JSON.\n\nIf a tool has a single parameter that can be represented as an object in JSON schema (e.g. dataclass, TypedDict, pydantic model), the schema for the tool is simplified to be just that object.\n\nHere's an example where we use [`TestModel.last_model_request_parameters`](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel.last_model_request_parameters) to inspect the tool schema that would be passed to the model.\n\nsingle\\_parameter\\_tool.py\n\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.test import TestModel\n\nagent = Agent()\n\nclass Foobar(BaseModel):\n    \"\"\"This is a Foobar\"\"\"\n\n    x: int\n    y: str\n    z: float = 3.14\n\n@agent.tool_plain\ndef foobar(f: Foobar) -> str:\n    return str(f)\n\ntest_model = TestModel()\nresult = agent.run_sync('hello', model=test_model)\nprint(result.data)\n#> {\"foobar\":\"x=0 y='a' z=3.14\"}\nprint(test_model.last_model_request_parameters.function_tools)\n\"\"\"\n[\\\n    ToolDefinition(\\\n        name='foobar',\\\n        description='This is a Foobar',\\\n        parameters_json_schema={\\\n            'properties': {\\\n                'x': {'title': 'X', 'type': 'integer'},\\\n                'y': {'title': 'Y', 'type': 'string'},\\\n                'z': {'default': 3.14, 'title': 'Z', 'type': 'number'},\\\n            },\\\n            'required': ['x', 'y'],\\\n            'title': 'Foobar',\\\n            'type': 'object',\\\n        },\\\n        outer_typed_dict_key=None,\\\n    )\\\n]\n\"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\n## Dynamic Function tools\n\nTools can optionally be defined with another function: `prepare`, which is called at each step of a run to\ncustomize the definition of the tool passed to the model, or omit the tool completely from that step.\n\nA `prepare` method can be registered via the `prepare` kwarg to any of the tool registration mechanisms:\n\n- [`@agent.tool`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool) decorator\n- [`@agent.tool_plain`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool_plain) decorator\n- [`Tool`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.Tool) dataclass\n\nThe `prepare` method, should be of type [`ToolPrepareFunc`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolPrepareFunc), a function which takes [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) and a pre-built [`ToolDefinition`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolDefinition), and should either return that `ToolDefinition` with or without modifying it, return a new `ToolDefinition`, or return `None` to indicate this tools should not be registered for that step.\n\nHere's a simple `prepare` method that only includes the tool if the value of the dependency is `42`.\n\nAs with the previous example, we use [`TestModel`](https://ai.pydantic.dev/api/models/test/#pydantic_ai.models.test.TestModel) to demonstrate the behavior without calling a real model.\n\ntool\\_only\\_if\\_42.py\n\n```\nfrom typing import Union\n\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.tools import ToolDefinition\n\nagent = Agent('test')\n\nasync def only_if_42(\n    ctx: RunContext[int], tool_def: ToolDefinition\n) -> Union[ToolDefinition, None]:\n    if ctx.deps == 42:\n        return tool_def\n\n@agent.tool(prepare=only_if_42)\ndef hitchhiker(ctx: RunContext[int], answer: str) -> str:\n    return f'{ctx.deps} {answer}'\n\nresult = agent.run_sync('testing...', deps=41)\nprint(result.data)\n#> success (no tool calls)\nresult = agent.run_sync('testing...', deps=42)\nprint(result.data)\n#> {\"hitchhiker\":\"42 a\"}\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\nHere's a more complex example where we change the description of the `name` parameter to based on the value of `deps`\n\nFor the sake of variation, we create this tool using the [`Tool`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.Tool) dataclass.\n\ncustomize\\_name.py\n\n```\nfrom __future__ import annotations\n\nfrom typing import Literal\n\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.models.test import TestModel\nfrom pydantic_ai.tools import Tool, ToolDefinition\n\ndef greet(name: str) -> str:\n    return f'hello {name}'\n\nasync def prepare_greet(\n    ctx: RunContext[Literal['human', 'machine']], tool_def: ToolDefinition\n) -> ToolDefinition | None:\n    d = f'Name of the {ctx.deps} to greet.'\n    tool_def.parameters_json_schema['properties']['name']['description'] = d\n    return tool_def\n\ngreet_tool = Tool(greet, prepare=prepare_greet)\ntest_model = TestModel()\nagent = Agent(test_model, tools=[greet_tool], deps_type=Literal['human', 'machine'])\n\nresult = agent.run_sync('testing...', deps='human')\nprint(result.data)\n#> {\"greet\":\"hello a\"}\nprint(test_model.last_model_request_parameters.function_tools)\n\"\"\"\n[\\\n    ToolDefinition(\\\n        name='greet',\\\n        description='',\\\n        parameters_json_schema={\\\n            'properties': {\\\n                'name': {\\\n                    'title': 'Name',\\\n                    'type': 'string',\\\n                    'description': 'Name of the human to greet.',\\\n                }\\\n            },\\\n            'required': ['name'],\\\n            'type': 'object',\\\n            'additionalProperties': False,\\\n        },\\\n        outer_typed_dict_key=None,\\\n    )\\\n]\n\"\"\"\n\n```\n\n_(This example is complete, it can be run \"as is\")_",
    "metadata": {
      "url": "https://ai.pydantic.dev/tools/",
      "ogUrl": "https://ai.pydantic.dev/tools/",
      "title": "Function Tools - PydanticAI",
      "og:url": "https://ai.pydantic.dev/tools/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/tools.png",
      "ogTitle": "Function Tools - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/tools.png",
      "og:title": "Function Tools - PydanticAI",
      "scrapeId": "4dd2b327-cfa2-4259-85b0-8f69897a7570",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/tools/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/tools.png",
      "twitter:title": "Function Tools - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graphstate)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_graph.state`\n\n### StateT`module-attribute`\n\n```\nStateT = TypeVar('StateT', default=None)\n\n```\n\nType variable for the state in a graph.\n\n### deep\\_copy\\_state\n\n```\ndeep_copy_state(state: StateT) -> StateT\n\n```\n\nDefault method for snapshotting the state in a graph run, uses [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy).\n\nSource code in `pydantic_graph/pydantic_graph/state.py`\n\n|     |     |\n| --- | --- |\n| ```<br>24<br>25<br>26<br>27<br>28<br>29<br>``` | ```<br>def deep_copy_state(state: StateT) -> StateT:<br>    \"\"\"Default method for snapshotting the state in a graph run, uses [`copy.deepcopy`][copy.deepcopy].\"\"\"<br>    if state is None:<br>        return state<br>    else:<br>        return copy.deepcopy(state)<br>``` |\n\n### NodeStep`dataclass`\n\nBases: `Generic[StateT, RunEndT]`\n\nHistory step describing the execution of a node in a graph.\n\nSource code in `pydantic_graph/pydantic_graph/state.py`\n\n|     |     |\n| --- | --- |\n| ```<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>``` | ```<br>@dataclass<br>class NodeStep(Generic[StateT, RunEndT]):<br>    \"\"\"History step describing the execution of a node in a graph.\"\"\"<br>    state: StateT<br>    \"\"\"The state of the graph after the node has been run.\"\"\"<br>    node: Annotated[BaseNode[StateT, Any, RunEndT], CustomNodeSchema()]<br>    \"\"\"The node that was run.\"\"\"<br>    start_ts: datetime = field(default_factory=_utils.now_utc)<br>    \"\"\"The timestamp when the node started running.\"\"\"<br>    duration: float | None = None<br>    \"\"\"The duration of the node run in seconds.\"\"\"<br>    kind: Literal['node'] = 'node'<br>    \"\"\"The kind of history step, can be used as a discriminator when deserializing history.\"\"\"<br>    # TODO waiting for https://github.com/pydantic/pydantic/issues/11264, should be an InitVar<br>    snapshot_state: Annotated[Callable[[StateT], StateT], pydantic.Field(exclude=True, repr=False)] = field(<br>        default=deep_copy_state, repr=False<br>    )<br>    \"\"\"Function to snapshot the state of the graph.\"\"\"<br>    def __post_init__(self):<br>        # Copy the state to prevent it from being modified by other code<br>        self.state = self.snapshot_state(self.state)<br>    def data_snapshot(self) -> BaseNode[StateT, Any, RunEndT]:<br>        \"\"\"Returns a deep copy of [`self.node`][pydantic_graph.state.NodeStep.node].<br>        Useful for summarizing history.<br>        \"\"\"<br>        return copy.deepcopy(self.node)<br>``` |\n\n#### state`instance-attribute`\n\n```\nstate: StateT\n\n```\n\nThe state of the graph after the node has been run.\n\n#### node`instance-attribute`\n\n```\nnode: Annotated[\\\n    BaseNode[StateT, Any, RunEndT], CustomNodeSchema()\\\n]\n\n```\n\nThe node that was run.\n\n#### start\\_ts`class-attribute``instance-attribute`\n\n```\nstart_ts: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp when the node started running.\n\n#### duration`class-attribute``instance-attribute`\n\n```\nduration: float | None = None\n\n```\n\nThe duration of the node run in seconds.\n\n#### kind`class-attribute``instance-attribute`\n\n```\nkind: Literal['node'] = 'node'\n\n```\n\nThe kind of history step, can be used as a discriminator when deserializing history.\n\n#### snapshot\\_state`class-attribute``instance-attribute`\n\n```\nsnapshot_state: Annotated[\\\n    Callable[[StateT], StateT],\\\n    Field(exclude=True, repr=False),\\\n] = field(default=deep_copy_state, repr=False)\n\n```\n\nFunction to snapshot the state of the graph.\n\n#### data\\_snapshot\n\n```\ndata_snapshot() -> BaseNode[StateT, Any, RunEndT]\n\n```\n\nReturns a deep copy of [`self.node`](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graph.state.NodeStep.node).\n\nUseful for summarizing history.\n\nSource code in `pydantic_graph/pydantic_graph/state.py`\n\n|     |     |\n| --- | --- |\n| ```<br>56<br>57<br>58<br>59<br>60<br>61<br>``` | ```<br>def data_snapshot(self) -> BaseNode[StateT, Any, RunEndT]:<br>    \"\"\"Returns a deep copy of [`self.node`][pydantic_graph.state.NodeStep.node].<br>    Useful for summarizing history.<br>    \"\"\"<br>    return copy.deepcopy(self.node)<br>``` |\n\n### EndStep`dataclass`\n\nBases: `Generic[RunEndT]`\n\nHistory step describing the end of a graph run.\n\nSource code in `pydantic_graph/pydantic_graph/state.py`\n\n|     |     |\n| --- | --- |\n| ```<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>``` | ```<br>@dataclass<br>class EndStep(Generic[RunEndT]):<br>    \"\"\"History step describing the end of a graph run.\"\"\"<br>    result: End[RunEndT]<br>    \"\"\"The result of the graph run.\"\"\"<br>    ts: datetime = field(default_factory=_utils.now_utc)<br>    \"\"\"The timestamp when the graph run ended.\"\"\"<br>    kind: Literal['end'] = 'end'<br>    \"\"\"The kind of history step, can be used as a discriminator when deserializing history.\"\"\"<br>    def data_snapshot(self) -> End[RunEndT]:<br>        \"\"\"Returns a deep copy of [`self.result`][pydantic_graph.state.EndStep.result].<br>        Useful for summarizing history.<br>        \"\"\"<br>        return copy.deepcopy(self.result)<br>``` |\n\n#### result`instance-attribute`\n\n```\nresult: End[RunEndT]\n\n```\n\nThe result of the graph run.\n\n#### ts`class-attribute``instance-attribute`\n\n```\nts: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp when the graph run ended.\n\n#### kind`class-attribute``instance-attribute`\n\n```\nkind: Literal['end'] = 'end'\n\n```\n\nThe kind of history step, can be used as a discriminator when deserializing history.\n\n#### data\\_snapshot\n\n```\ndata_snapshot() -> End[RunEndT]\n\n```\n\nReturns a deep copy of [`self.result`](https://ai.pydantic.dev/api/pydantic_graph/state/#pydantic_graph.state.EndStep.result).\n\nUseful for summarizing history.\n\nSource code in `pydantic_graph/pydantic_graph/state.py`\n\n|     |     |\n| --- | --- |\n| ```<br>75<br>76<br>77<br>78<br>79<br>80<br>``` | ```<br>def data_snapshot(self) -> End[RunEndT]:<br>    \"\"\"Returns a deep copy of [`self.result`][pydantic_graph.state.EndStep.result].<br>    Useful for summarizing history.<br>    \"\"\"<br>    return copy.deepcopy(self.result)<br>``` |\n\n### HistoryStep`module-attribute`\n\n```\nHistoryStep = Union[\\\n    NodeStep[StateT, RunEndT], EndStep[RunEndT]\\\n]\n\n```\n\nA step in the history of a graph run.\n\n[`Graph.run`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.run) returns a list of these steps describing the execution of the graph,\ntogether with the run return value.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/pydantic_graph/state/",
      "ogUrl": "https://ai.pydantic.dev/api/pydantic_graph/state/",
      "title": "pydantic_graph.state - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/pydantic_graph/state/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/state.png",
      "ogTitle": "pydantic_graph.state - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/state.png",
      "og:title": "pydantic_graph.state - PydanticAI",
      "scrapeId": "e94c92ed-0d26-4de5-9798-de1c071d998b",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/pydantic_graph/state/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/state.png",
      "twitter:title": "pydantic_graph.state - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/gemini/#pydantic_aimodelsgemini)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.gemini`\n\nCustom interface to the `generativelanguage.googleapis.com` API using\n[HTTPX](https://www.python-httpx.org/) and [Pydantic](https://docs.pydantic.dev/latest/).\n\nThe Google SDK for interacting with the `generativelanguage.googleapis.com` API\n[`google-generativeai`](https://ai.google.dev/gemini-api/docs/quickstart?lang=python) reads like it was written by a\nJava developer who thought they knew everything about OOP, spent 30 minutes trying to learn Python,\ngave up and decided to build the library to prove how horrible Python is. It also doesn't use httpx for HTTP requests,\nand tries to implement tool calling itself, but doesn't use Pydantic or equivalent for validation.\n\nWe therefore implement support for the API directly.\n\nDespite these shortcomings, the Gemini model is actually quite powerful and very fast.\n\n## Setup\n\nFor details on how to set up authentication with this model, see [model configuration for Gemini](https://ai.pydantic.dev/models/#gemini).\n\n### LatestGeminiModelNames`module-attribute`\n\n```\nLatestGeminiModelNames = Literal[\\\n    \"gemini-1.5-flash\",\\\n    \"gemini-1.5-flash-8b\",\\\n    \"gemini-1.5-pro\",\\\n    \"gemini-1.0-pro\",\\\n    \"gemini-2.0-flash-exp\",\\\n    \"gemini-2.0-flash-thinking-exp-01-21\",\\\n    \"gemini-exp-1206\",\\\n    \"gemini-2.0-flash\",\\\n    \"gemini-2.0-flash-lite-preview-02-05\",\\\n]\n\n```\n\nLatest Gemini models.\n\n### GeminiModelName`module-attribute`\n\n```\nGeminiModelName = Union[str, LatestGeminiModelNames]\n\n```\n\nPossible Gemini model names.\n\nSince Gemini supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [the Gemini API docs](https://ai.google.dev/gemini-api/docs/models/gemini#model-variations) for a full list.\n\n### GeminiModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Gemini model request.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n|     |     |\n| --- | --- |\n| ```<br>64<br>65<br>66<br>67<br>``` | ```<br>class GeminiModelSettings(ModelSettings):<br>    \"\"\"Settings used for a Gemini model request.\"\"\"<br>    gemini_safety_settings: list[GeminiSafetySettings]<br>``` |\n\n### GeminiModel`dataclass`\n\nBases: `Model`\n\nA model that uses Gemini via `generativelanguage.googleapis.com` API.\n\nThis is implemented from scratch rather than using a dedicated SDK, good API documentation is\navailable [here](https://ai.google.dev/api).\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>``` | ```<br>@dataclass(init=False)<br>class GeminiModel(Model):<br>    \"\"\"A model that uses Gemini via `generativelanguage.googleapis.com` API.<br>    This is implemented from scratch rather than using a dedicated SDK, good API documentation is<br>    available [here](https://ai.google.dev/api).<br>    Apart from `__init__`, all methods are private or match those of the base class.<br>    \"\"\"<br>    http_client: AsyncHTTPClient = field(repr=False)<br>    _model_name: GeminiModelName = field(repr=False)<br>    _auth: AuthProtocol | None = field(repr=False)<br>    _url: str | None = field(repr=False)<br>    _system: str | None = field(default='google-gla', repr=False)<br>    def __init__(<br>        self,<br>        model_name: GeminiModelName,<br>        *,<br>        api_key: str | None = None,<br>        http_client: AsyncHTTPClient | None = None,<br>        url_template: str = 'https://generativelanguage.googleapis.com/v1beta/models/{model}:',<br>    ):<br>        \"\"\"Initialize a Gemini model.<br>        Args:<br>            model_name: The name of the model to use.<br>            api_key: The API key to use for authentication, if not provided, the `GEMINI_API_KEY` environment variable<br>                will be used if available.<br>            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>            url_template: The URL template to use for making requests, you shouldn't need to change this,<br>                docs [here](https://ai.google.dev/gemini-api/docs/quickstart?lang=rest#make-first-request),<br>                `model` is substituted with the model name, and `function` is added to the end of the URL.<br>        \"\"\"<br>        self._model_name = model_name<br>        if api_key is None:<br>            if env_api_key := os.getenv('GEMINI_API_KEY'):<br>                api_key = env_api_key<br>            else:<br>                raise exceptions.UserError('API key must be provided or set in the GEMINI_API_KEY environment variable')<br>        self.http_client = http_client or cached_async_http_client()<br>        self._auth = ApiKeyAuth(api_key)<br>        self._url = url_template.format(model=model_name)<br>    @property<br>    def auth(self) -> AuthProtocol:<br>        assert self._auth is not None, 'Auth not initialized'<br>        return self._auth<br>    @property<br>    def url(self) -> str:<br>        assert self._url is not None, 'URL not initialized'<br>        return self._url<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, usage.Usage]:<br>        check_allow_model_requests()<br>        async with self._make_request(<br>            messages, False, cast(GeminiModelSettings, model_settings or {}), model_request_parameters<br>        ) as http_response:<br>            response = _gemini_response_ta.validate_json(await http_response.aread())<br>        return self._process_response(response), _metadata_as_usage(response)<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        check_allow_model_requests()<br>        async with self._make_request(<br>            messages, True, cast(GeminiModelSettings, model_settings or {}), model_request_parameters<br>        ) as http_response:<br>            yield await self._process_streamed_response(http_response)<br>    @property<br>    def model_name(self) -> GeminiModelName:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> _GeminiTools | None:<br>        tools = [_function_from_abstract_tool(t) for t in model_request_parameters.function_tools]<br>        if model_request_parameters.result_tools:<br>            tools += [_function_from_abstract_tool(t) for t in model_request_parameters.result_tools]<br>        return _GeminiTools(function_declarations=tools) if tools else None<br>    def _get_tool_config(<br>        self, model_request_parameters: ModelRequestParameters, tools: _GeminiTools | None<br>    ) -> _GeminiToolConfig | None:<br>        if model_request_parameters.allow_text_result:<br>            return None<br>        elif tools:<br>            return _tool_config([t['name'] for t in tools['function_declarations']])<br>        else:<br>            return _tool_config([])<br>    @asynccontextmanager<br>    async def _make_request(<br>        self,<br>        messages: list[ModelMessage],<br>        streamed: bool,<br>        model_settings: GeminiModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[HTTPResponse]:<br>        tools = self._get_tools(model_request_parameters)<br>        tool_config = self._get_tool_config(model_request_parameters, tools)<br>        sys_prompt_parts, contents = self._message_to_gemini_content(messages)<br>        request_data = _GeminiRequest(contents=contents)<br>        if sys_prompt_parts:<br>            request_data['system_instruction'] = _GeminiTextContent(role='user', parts=sys_prompt_parts)<br>        if tools is not None:<br>            request_data['tools'] = tools<br>        if tool_config is not None:<br>            request_data['tool_config'] = tool_config<br>        generation_config: _GeminiGenerationConfig = {}<br>        if model_settings:<br>            if (max_tokens := model_settings.get('max_tokens')) is not None:<br>                generation_config['max_output_tokens'] = max_tokens<br>            if (temperature := model_settings.get('temperature')) is not None:<br>                generation_config['temperature'] = temperature<br>            if (top_p := model_settings.get('top_p')) is not None:<br>                generation_config['top_p'] = top_p<br>            if (presence_penalty := model_settings.get('presence_penalty')) is not None:<br>                generation_config['presence_penalty'] = presence_penalty<br>            if (frequency_penalty := model_settings.get('frequency_penalty')) is not None:<br>                generation_config['frequency_penalty'] = frequency_penalty<br>            if (gemini_safety_settings := model_settings.get('gemini_safety_settings')) != []:<br>                request_data['safety_settings'] = gemini_safety_settings<br>        if generation_config:<br>            request_data['generation_config'] = generation_config<br>        url = self.url + ('streamGenerateContent' if streamed else 'generateContent')<br>        headers = {<br>            'Content-Type': 'application/json',<br>            'User-Agent': get_user_agent(),<br>            **await self.auth.headers(),<br>        }<br>        request_json = _gemini_request_ta.dump_json(request_data, by_alias=True)<br>        async with self.http_client.stream(<br>            'POST',<br>            url,<br>            content=request_json,<br>            headers=headers,<br>            timeout=model_settings.get('timeout', USE_CLIENT_DEFAULT),<br>        ) as r:<br>            if r.status_code != 200:<br>                await r.aread()<br>                raise exceptions.UnexpectedModelBehavior(f'Unexpected response from gemini {r.status_code}', r.text)<br>            yield r<br>    def _process_response(self, response: _GeminiResponse) -> ModelResponse:<br>        if len(response['candidates']) != 1:<br>            raise UnexpectedModelBehavior('Expected exactly one candidate in Gemini response')<br>        if 'content' not in response['candidates'][0]:<br>            if response['candidates'][0].get('finish_reason') == 'SAFETY':<br>                raise UnexpectedModelBehavior('Safety settings triggered', str(response))<br>            else:<br>                raise UnexpectedModelBehavior('Content field missing from Gemini response', str(response))<br>        parts = response['candidates'][0]['content']['parts']<br>        return _process_response_from_parts(parts, model_name=response.get('model_version', self._model_name))<br>    async def _process_streamed_response(self, http_response: HTTPResponse) -> StreamedResponse:<br>        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"<br>        aiter_bytes = http_response.aiter_bytes()<br>        start_response: _GeminiResponse | None = None<br>        content = bytearray()<br>        async for chunk in aiter_bytes:<br>            content.extend(chunk)<br>            responses = _gemini_streamed_response_ta.validate_json(<br>                _ensure_decodeable(content),<br>                experimental_allow_partial='trailing-strings',<br>            )<br>            if responses:<br>                last = responses[-1]<br>                if last['candidates'] and last['candidates'][0].get('content', {}).get('parts'):<br>                    start_response = last<br>                    break<br>        if start_response is None:<br>            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')<br>        return GeminiStreamedResponse(_model_name=self._model_name, _content=content, _stream=aiter_bytes)<br>    @classmethod<br>    def _message_to_gemini_content(<br>        cls, messages: list[ModelMessage]<br>    ) -> tuple[list[_GeminiTextPart], list[_GeminiContent]]:<br>        sys_prompt_parts: list[_GeminiTextPart] = []<br>        contents: list[_GeminiContent] = []<br>        for m in messages:<br>            if isinstance(m, ModelRequest):<br>                message_parts: list[_GeminiPartUnion] = []<br>                for part in m.parts:<br>                    if isinstance(part, SystemPromptPart):<br>                        sys_prompt_parts.append(_GeminiTextPart(text=part.content))<br>                    elif isinstance(part, UserPromptPart):<br>                        message_parts.append(_GeminiTextPart(text=part.content))<br>                    elif isinstance(part, ToolReturnPart):<br>                        message_parts.append(_response_part_from_response(part.tool_name, part.model_response_object()))<br>                    elif isinstance(part, RetryPromptPart):<br>                        if part.tool_name is None:<br>                            message_parts.append(_GeminiTextPart(text=part.model_response()))<br>                        else:<br>                            response = {'call_error': part.model_response()}<br>                            message_parts.append(_response_part_from_response(part.tool_name, response))<br>                    else:<br>                        assert_never(part)<br>                if message_parts:<br>                    contents.append(_GeminiContent(role='user', parts=message_parts))<br>            elif isinstance(m, ModelResponse):<br>                contents.append(_content_model_response(m))<br>            else:<br>                assert_never(m)<br>        return sys_prompt_parts, contents<br>``` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: GeminiModelName,\n    *,\n    api_key: str | None = None,\n    http_client: AsyncClient | None = None,\n    url_template: str = \"https://generativelanguage.googleapis.com/v1beta/models/{model}:\"\n)\n\n```\n\nInitialize a Gemini model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `GeminiModelName` | The name of the model to use. | _required_ |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `GEMINI_API_KEY` environment variable<br>will be used if available. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n| `url_template` | `str` | The URL template to use for making requests, you shouldn't need to change this,<br>docs [here](https://ai.google.dev/gemini-api/docs/quickstart?lang=rest#make-first-request),<br>`model` is substituted with the model name, and `function` is added to the end of the URL. | `'https://generativelanguage.googleapis.com/v1beta/models/{model}:'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>``` | ```<br>def __init__(<br>    self,<br>    model_name: GeminiModelName,<br>    *,<br>    api_key: str | None = None,<br>    http_client: AsyncHTTPClient | None = None,<br>    url_template: str = 'https://generativelanguage.googleapis.com/v1beta/models/{model}:',<br>):<br>    \"\"\"Initialize a Gemini model.<br>    Args:<br>        model_name: The name of the model to use.<br>        api_key: The API key to use for authentication, if not provided, the `GEMINI_API_KEY` environment variable<br>            will be used if available.<br>        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>        url_template: The URL template to use for making requests, you shouldn't need to change this,<br>            docs [here](https://ai.google.dev/gemini-api/docs/quickstart?lang=rest#make-first-request),<br>            `model` is substituted with the model name, and `function` is added to the end of the URL.<br>    \"\"\"<br>    self._model_name = model_name<br>    if api_key is None:<br>        if env_api_key := os.getenv('GEMINI_API_KEY'):<br>            api_key = env_api_key<br>        else:<br>            raise exceptions.UserError('API key must be provided or set in the GEMINI_API_KEY environment variable')<br>    self.http_client = http_client or cached_async_http_client()<br>    self._auth = ApiKeyAuth(api_key)<br>    self._url = url_template.format(model=model_name)<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: GeminiModelName\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### AuthProtocol\n\nBases: `Protocol`\n\nAbstract definition for Gemini authentication.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n|     |     |\n| --- | --- |\n| ```<br>307<br>308<br>309<br>310<br>``` | ```<br>class AuthProtocol(Protocol):<br>    \"\"\"Abstract definition for Gemini authentication.\"\"\"<br>    async def headers(self) -> dict[str, str]: ...<br>``` |\n\n### ApiKeyAuth`dataclass`\n\nAuthentication using an API key for the `X-Goog-Api-Key` header.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n|     |     |\n| --- | --- |\n| ```<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>``` | ```<br>@dataclass<br>class ApiKeyAuth:<br>    \"\"\"Authentication using an API key for the `X-Goog-Api-Key` header.\"\"\"<br>    api_key: str<br>    async def headers(self) -> dict[str, str]:<br>        # https://cloud.google.com/docs/authentication/api-keys-use#using-with-rest<br>        return {'X-Goog-Api-Key': self.api_key}<br>``` |\n\n### GeminiStreamedResponse`dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for the Gemini model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n|     |     |\n| --- | --- |\n| ```<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>``` | ```<br>@dataclass<br>class GeminiStreamedResponse(StreamedResponse):<br>    \"\"\"Implementation of `StreamedResponse` for the Gemini model.\"\"\"<br>    _model_name: GeminiModelName<br>    _content: bytearray<br>    _stream: AsyncIterator[bytes]<br>    _timestamp: datetime = field(default_factory=_utils.now_utc, init=False)<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        async for gemini_response in self._get_gemini_responses():<br>            candidate = gemini_response['candidates'][0]<br>            if 'content' not in candidate:<br>                raise UnexpectedModelBehavior('Streamed response has no content field')<br>            gemini_part: _GeminiPartUnion<br>            for gemini_part in candidate['content']['parts']:<br>                if 'text' in gemini_part:<br>                    # Using vendor_part_id=None means we can produce multiple text parts if their deltas are sprinkled<br>                    # amongst the tool call deltas<br>                    yield self._parts_manager.handle_text_delta(vendor_part_id=None, content=gemini_part['text'])<br>                elif 'function_call' in gemini_part:<br>                    # Here, we assume all function_call parts are complete and don't have deltas.<br>                    # We do this by assigning a unique randomly generated \"vendor_part_id\".<br>                    # We need to confirm whether this is actually true, but if it isn't, we can still handle it properly<br>                    # it would just be a bit more complicated. And we'd need to confirm the intended semantics.<br>                    maybe_event = self._parts_manager.handle_tool_call_delta(<br>                        vendor_part_id=uuid4(),<br>                        tool_name=gemini_part['function_call']['name'],<br>                        args=gemini_part['function_call']['args'],<br>                        tool_call_id=None,<br>                    )<br>                    if maybe_event is not None:<br>                        yield maybe_event<br>                else:<br>                    assert 'function_response' in gemini_part, f'Unexpected part: {gemini_part}'<br>    async def _get_gemini_responses(self) -> AsyncIterator[_GeminiResponse]:<br>        # This method exists to ensure we only yield completed items, so we don't need to worry about<br>        # partial gemini responses, which would make everything more complicated<br>        gemini_responses: list[_GeminiResponse] = []<br>        current_gemini_response_index = 0<br>        # Right now, there are some circumstances where we will have information that could be yielded sooner than it is<br>        # But changing that would make things a lot more complicated.<br>        async for chunk in self._stream:<br>            self._content.extend(chunk)<br>            gemini_responses = _gemini_streamed_response_ta.validate_json(<br>                _ensure_decodeable(self._content),<br>                experimental_allow_partial='trailing-strings',<br>            )<br>            # The idea: yield only up to the latest response, which might still be partial.<br>            # Note that if the latest response is complete, we could yield it immediately, but there's not a good<br>            # allow_partial API to determine if the last item in the list is complete.<br>            responses_to_yield = gemini_responses[:-1]<br>            for r in responses_to_yield[current_gemini_response_index:]:<br>                current_gemini_response_index += 1<br>                self._usage += _metadata_as_usage(r)<br>                yield r<br>        # Now yield the final response, which should be complete<br>        if gemini_responses:<br>            r = gemini_responses[-1]<br>            self._usage += _metadata_as_usage(r)<br>            yield r<br>    @property<br>    def model_name(self) -> GeminiModelName:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        return self._model_name<br>    @property<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._timestamp<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: GeminiModelName\n\n```\n\nGet the model name of the response.\n\n#### timestamp`property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n### GeminiSafetySettings\n\nBases: `TypedDict`\n\nSafety settings options for Gemini model request.\n\nSee [Gemini API docs](https://ai.google.dev/gemini-api/docs/safety-settings) for safety category and threshold descriptions.\nFor an example on how to use `GeminiSafetySettings`, see [here](https://ai.pydantic.dev/agents/#model-specific-settings).\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n\n|     |     |\n| --- | --- |\n| ```<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>442<br>443<br>444<br>445<br>446<br>447<br>448<br>449<br>450<br>451<br>452<br>453<br>454<br>455<br>456<br>457<br>``` | ```<br>class GeminiSafetySettings(TypedDict):<br>    \"\"\"Safety settings options for Gemini model request.<br>    See [Gemini API docs](https://ai.google.dev/gemini-api/docs/safety-settings) for safety category and threshold descriptions.<br>    For an example on how to use `GeminiSafetySettings`, see [here](../../agents.md#model-specific-settings).<br>    \"\"\"<br>    category: Literal[<br>        'HARM_CATEGORY_UNSPECIFIED',<br>        'HARM_CATEGORY_HARASSMENT',<br>        'HARM_CATEGORY_HATE_SPEECH',<br>        'HARM_CATEGORY_SEXUALLY_EXPLICIT',<br>        'HARM_CATEGORY_DANGEROUS_CONTENT',<br>        'HARM_CATEGORY_CIVIC_INTEGRITY',<br>    ]<br>    \"\"\"<br>    Safety settings category.<br>    \"\"\"<br>    threshold: Literal[<br>        'HARM_BLOCK_THRESHOLD_UNSPECIFIED',<br>        'BLOCK_LOW_AND_ABOVE',<br>        'BLOCK_MEDIUM_AND_ABOVE',<br>        'BLOCK_ONLY_HIGH',<br>        'BLOCK_NONE',<br>        'OFF',<br>    ]<br>    \"\"\"<br>    Safety settings threshold.<br>    \"\"\"<br>``` |\n\n#### category`instance-attribute`\n\n```\ncategory: Literal[\\\n    \"HARM_CATEGORY_UNSPECIFIED\",\\\n    \"HARM_CATEGORY_HARASSMENT\",\\\n    \"HARM_CATEGORY_HATE_SPEECH\",\\\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\\\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\\\n    \"HARM_CATEGORY_CIVIC_INTEGRITY\",\\\n]\n\n```\n\nSafety settings category.\n\n#### threshold`instance-attribute`\n\n```\nthreshold: Literal[\\\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\\\n    \"BLOCK_LOW_AND_ABOVE\",\\\n    \"BLOCK_MEDIUM_AND_ABOVE\",\\\n    \"BLOCK_ONLY_HIGH\",\\\n    \"BLOCK_NONE\",\\\n    \"OFF\",\\\n]\n\n```\n\nSafety settings threshold.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/gemini/",
      "ogUrl": "https://ai.pydantic.dev/api/models/gemini/",
      "title": "pydantic_ai.models.gemini - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/gemini/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/gemini.png",
      "ogTitle": "pydantic_ai.models.gemini - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/gemini.png",
      "og:title": "pydantic_ai.models.gemini - PydanticAI",
      "scrapeId": "2e2b993f-92c2-4bc5-90d1-b9305b3f868a",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/gemini/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/gemini.png",
      "twitter:title": "pydantic_ai.models.gemini - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/troubleshooting/#troubleshooting)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Troubleshooting\n\nBelow are suggestions on how to fix some common errors you might encounter while using PydanticAI. If the issue you're experiencing is not listed below or addressed in the documentation, please feel free to ask in the [Pydantic Slack](https://ai.pydantic.dev/help/) or create an issue on [GitHub](https://github.com/pydantic/pydantic-ai/issues).\n\n## Jupyter Notebook Errors\n\n### `RuntimeError: This event loop is already running`\n\nThis error is caused by conflicts between the event loops in Jupyter notebook and PydanticAI's. One way to manage these conflicts is by using [`nest-asyncio`](https://pypi.org/project/nest-asyncio/). Namely, before you execute any agent runs, do the following:\n\n```\nimport nest_asyncio\n\nnest_asyncio.apply()\n\n```\n\nNote: This fix also applies to Google Colab.\n\n## API Key Configuration\n\n### `UserError: API key must be provided or set in the [MODEL]_API_KEY environment variable`\n\nIf you're running into issues with setting the API key for your model, visit the [Models](https://ai.pydantic.dev/models/) page to learn more about how to set an environment variable and/or pass in an `api_key` argument.\n\n## Monitoring HTTPX Requests\n\nYou can use custom `httpx` clients in your models in order to access specific requests, responses, and headers at runtime.\n\nIt's particularly helpful to use `logfire`'s [HTTPX integration](https://ai.pydantic.dev/logfire/#monitoring-httpx-requests) to monitor the above.",
    "metadata": {
      "url": "https://ai.pydantic.dev/troubleshooting/",
      "ogUrl": "https://ai.pydantic.dev/troubleshooting/",
      "title": "Troubleshooting - PydanticAI",
      "og:url": "https://ai.pydantic.dev/troubleshooting/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/troubleshooting.png",
      "ogTitle": "Troubleshooting - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/troubleshooting.png",
      "og:title": "Troubleshooting - PydanticAI",
      "scrapeId": "32ad0855-34af-4bd1-b1a5-b10079b4171d",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/troubleshooting/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/troubleshooting.png",
      "twitter:title": "Troubleshooting - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/function/#pydantic_aimodelsfunction)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.function`\n\nA model controlled by a local function.\n\n[`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel) is similar to [`TestModel`](https://ai.pydantic.dev/api/models/test/),\nbut allows greater control over the model's behavior.\n\nIts primary use case is for more advanced unit testing than is possible with `TestModel`.\n\nHere's a minimal example:\n\nfunction\\_model\\_usage.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.messages import ModelMessage, ModelResponse, TextPart\nfrom pydantic_ai.models.function import FunctionModel, AgentInfo\n\nmy_agent = Agent('openai:gpt-4o')\n\nasync def model_function(\n    messages: list[ModelMessage], info: AgentInfo\n) -> ModelResponse:\n    print(messages)\n    \"\"\"\n    [\\\n        ModelRequest(\\\n            parts=[\\\n                UserPromptPart(\\\n                    content='Testing my agent...',\\\n                    timestamp=datetime.datetime(...),\\\n                    part_kind='user-prompt',\\\n                )\\\n            ],\\\n            kind='request',\\\n        )\\\n    ]\n    \"\"\"\n    print(info)\n    \"\"\"\n    AgentInfo(\n        function_tools=[], allow_text_result=True, result_tools=[], model_settings=None\n    )\n    \"\"\"\n    return ModelResponse(parts=[TextPart('hello world')])\n\nasync def test_my_agent():\n    \"\"\"Unit test for my_agent, to be run by pytest.\"\"\"\n    with my_agent.override(model=FunctionModel(model_function)):\n        result = await my_agent.run('Testing my agent...')\n        assert result.data == 'hello world'\n\n```\n\nSee [Unit testing with `FunctionModel`](https://ai.pydantic.dev/testing-evals/#unit-testing-with-functionmodel) for detailed documentation.\n\n### FunctionModel`dataclass`\n\nBases: `Model`\n\nA model controlled by a local function.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 33<br> 34<br> 35<br> 36<br> 37<br> 38<br> 39<br> 40<br> 41<br> 42<br> 43<br> 44<br> 45<br> 46<br> 47<br> 48<br> 49<br> 50<br> 51<br> 52<br> 53<br> 54<br> 55<br> 56<br> 57<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>``` | ```<br>@dataclass(init=False)<br>class FunctionModel(Model):<br>    \"\"\"A model controlled by a local function.<br>    Apart from `__init__`, all methods are private or match those of the base class.<br>    \"\"\"<br>    function: FunctionDef | None = None<br>    stream_function: StreamFunctionDef | None = None<br>    _model_name: str = field(repr=False)<br>    _system: str | None = field(default=None, repr=False)<br>    @overload<br>    def __init__(self, function: FunctionDef) -> None: ...<br>    @overload<br>    def __init__(self, *, stream_function: StreamFunctionDef) -> None: ...<br>    @overload<br>    def __init__(self, function: FunctionDef, *, stream_function: StreamFunctionDef) -> None: ...<br>    def __init__(self, function: FunctionDef | None = None, *, stream_function: StreamFunctionDef | None = None):<br>        \"\"\"Initialize a `FunctionModel`.<br>        Either `function` or `stream_function` must be provided, providing both is allowed.<br>        Args:<br>            function: The function to call for non-streamed requests.<br>            stream_function: The function to call for streamed requests.<br>        \"\"\"<br>        if function is None and stream_function is None:<br>            raise TypeError('Either `function` or `stream_function` must be provided')<br>        self.function = function<br>        self.stream_function = stream_function<br>        function_name = self.function.__name__ if self.function is not None else ''<br>        stream_function_name = self.stream_function.__name__ if self.stream_function is not None else ''<br>        self._model_name = f'function:{function_name}:{stream_function_name}'<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, usage.Usage]:<br>        agent_info = AgentInfo(<br>            model_request_parameters.function_tools,<br>            model_request_parameters.allow_text_result,<br>            model_request_parameters.result_tools,<br>            model_settings,<br>        )<br>        assert self.function is not None, 'FunctionModel must receive a `function` to support non-streamed requests'<br>        if inspect.iscoroutinefunction(self.function):<br>            response = await self.function(messages, agent_info)<br>        else:<br>            response_ = await _utils.run_in_executor(self.function, messages, agent_info)<br>            assert isinstance(response_, ModelResponse), response_<br>            response = response_<br>        response.model_name = f'function:{self.function.__name__}'<br>        # TODO is `messages` right here? Should it just be new messages?<br>        return response, _estimate_usage(chain(messages, [response]))<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        agent_info = AgentInfo(<br>            model_request_parameters.function_tools,<br>            model_request_parameters.allow_text_result,<br>            model_request_parameters.result_tools,<br>            model_settings,<br>        )<br>        assert (<br>            self.stream_function is not None<br>        ), 'FunctionModel must receive a `stream_function` to support streamed requests'<br>        response_stream = PeekableAsyncStream(self.stream_function(messages, agent_info))<br>        first = await response_stream.peek()<br>        if isinstance(first, _utils.Unset):<br>            raise ValueError('Stream function must return at least one item')<br>        yield FunctionStreamedResponse(_model_name=f'function:{self.stream_function.__name__}', _iter=response_stream)<br>    @property<br>    def model_name(self) -> str:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>``` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(function: FunctionDef) -> None\n\n```\n\n```\n__init__(*, stream_function: StreamFunctionDef) -> None\n\n```\n\n```\n__init__(\n    function: FunctionDef,\n    *,\n    stream_function: StreamFunctionDef\n) -> None\n\n```\n\n```\n__init__(\n    function: FunctionDef | None = None,\n    *,\n    stream_function: StreamFunctionDef | None = None\n)\n\n```\n\nInitialize a `FunctionModel`.\n\nEither `function` or `stream_function` must be provided, providing both is allowed.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `function` | `FunctionDef | None` | The function to call for non-streamed requests. | `None` |\n| `stream_function` | `StreamFunctionDef | None` | The function to call for streamed requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n\n|     |     |\n| --- | --- |\n| ```<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>``` | ```<br>def __init__(self, function: FunctionDef | None = None, *, stream_function: StreamFunctionDef | None = None):<br>    \"\"\"Initialize a `FunctionModel`.<br>    Either `function` or `stream_function` must be provided, providing both is allowed.<br>    Args:<br>        function: The function to call for non-streamed requests.<br>        stream_function: The function to call for streamed requests.<br>    \"\"\"<br>    if function is None and stream_function is None:<br>        raise TypeError('Either `function` or `stream_function` must be provided')<br>    self.function = function<br>    self.stream_function = stream_function<br>    function_name = self.function.__name__ if self.function is not None else ''<br>    stream_function_name = self.stream_function.__name__ if self.stream_function is not None else ''<br>    self._model_name = f'function:{function_name}:{stream_function_name}'<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### AgentInfo`dataclass`\n\nInformation about an agent.\n\nThis is passed as the second to functions used within [`FunctionModel`](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel).\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n\n|     |     |\n| --- | --- |\n| ```<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>``` | ```<br>@dataclass(frozen=True)<br>class AgentInfo:<br>    \"\"\"Information about an agent.<br>    This is passed as the second to functions used within [`FunctionModel`][pydantic_ai.models.function.FunctionModel].<br>    \"\"\"<br>    function_tools: list[ToolDefinition]<br>    \"\"\"The function tools available on this agent.<br>    These are the tools registered via the [`tool`][pydantic_ai.Agent.tool] and<br>    [`tool_plain`][pydantic_ai.Agent.tool_plain] decorators.<br>    \"\"\"<br>    allow_text_result: bool<br>    \"\"\"Whether a plain text result is allowed.\"\"\"<br>    result_tools: list[ToolDefinition]<br>    \"\"\"The tools that can called as the final result of the run.\"\"\"<br>    model_settings: ModelSettings | None<br>    \"\"\"The model settings passed to the run call.\"\"\"<br>``` |\n\n#### function\\_tools`instance-attribute`\n\n```\nfunction_tools: list[ToolDefinition]\n\n```\n\nThe function tools available on this agent.\n\nThese are the tools registered via the [`tool`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool) and\n[`tool_plain`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.tool_plain) decorators.\n\n#### allow\\_text\\_result`instance-attribute`\n\n```\nallow_text_result: bool\n\n```\n\nWhether a plain text result is allowed.\n\n#### result\\_tools`instance-attribute`\n\n```\nresult_tools: list[ToolDefinition]\n\n```\n\nThe tools that can called as the final result of the run.\n\n#### model\\_settings`instance-attribute`\n\n```\nmodel_settings: ModelSettings | None\n\n```\n\nThe model settings passed to the run call.\n\n### DeltaToolCall`dataclass`\n\nIncremental change to a tool call.\n\nUsed to describe a chunk when streaming structured responses.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n\n|     |     |\n| --- | --- |\n| ```<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>``` | ```<br>@dataclass<br>class DeltaToolCall:<br>    \"\"\"Incremental change to a tool call.<br>    Used to describe a chunk when streaming structured responses.<br>    \"\"\"<br>    name: str | None = None<br>    \"\"\"Incremental change to the name of the tool.\"\"\"<br>    json_args: str | None = None<br>    \"\"\"Incremental change to the arguments as JSON\"\"\"<br>``` |\n\n#### name`class-attribute``instance-attribute`\n\n```\nname: str | None = None\n\n```\n\nIncremental change to the name of the tool.\n\n#### json\\_args`class-attribute``instance-attribute`\n\n```\njson_args: str | None = None\n\n```\n\nIncremental change to the arguments as JSON\n\n### DeltaToolCalls`module-attribute`\n\n```\nDeltaToolCalls: TypeAlias = dict[int, DeltaToolCall]\n\n```\n\nA mapping of tool call IDs to incremental changes.\n\n### FunctionDef`module-attribute`\n\n```\nFunctionDef: TypeAlias = Callable[\\\n    [list[ModelMessage], AgentInfo],\\\n    Union[ModelResponse, Awaitable[ModelResponse]],\\\n]\n\n```\n\nA function used to generate a non-streamed response.\n\n### StreamFunctionDef`module-attribute`\n\n```\nStreamFunctionDef: TypeAlias = Callable[\\\n    [list[ModelMessage], AgentInfo],\\\n    AsyncIterator[Union[str, DeltaToolCalls]],\\\n]\n\n```\n\nA function used to generate a streamed response.\n\nWhile this is defined as having return type of `AsyncIterator[Union[str, DeltaToolCalls]]`, it should\nreally be considered as `Union[AsyncIterator[str], AsyncIterator[DeltaToolCalls]`,\\\n\\\nE.g. you need to yield all text or all `DeltaToolCalls`, not mix them.\\\n\\\n### FunctionStreamedResponse`dataclass`\\\n\\\nBases: `StreamedResponse`\\\n\\\nImplementation of `StreamedResponse` for [FunctionModel](https://ai.pydantic.dev/api/models/function/#pydantic_ai.models.function.FunctionModel).\\\n\\\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\\\n\\\n|     |     |\\\n| --- | --- |\\\n| ```<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>``` | ```<br>@dataclass<br>class FunctionStreamedResponse(StreamedResponse):<br>    \"\"\"Implementation of `StreamedResponse` for [FunctionModel][pydantic_ai.models.function.FunctionModel].\"\"\"<br>    _model_name: str<br>    _iter: AsyncIterator[str | DeltaToolCalls]<br>    _timestamp: datetime = field(default_factory=_utils.now_utc)<br>    def __post_init__(self):<br>        self._usage += _estimate_usage([])<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        async for item in self._iter:<br>            if isinstance(item, str):<br>                response_tokens = _estimate_string_tokens(item)<br>                self._usage += usage.Usage(response_tokens=response_tokens, total_tokens=response_tokens)<br>                yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=item)<br>            else:<br>                delta_tool_calls = item<br>                for dtc_index, delta_tool_call in delta_tool_calls.items():<br>                    if delta_tool_call.json_args:<br>                        response_tokens = _estimate_string_tokens(delta_tool_call.json_args)<br>                        self._usage += usage.Usage(response_tokens=response_tokens, total_tokens=response_tokens)<br>                    maybe_event = self._parts_manager.handle_tool_call_delta(<br>                        vendor_part_id=dtc_index,<br>                        tool_name=delta_tool_call.name,<br>                        args=delta_tool_call.json_args,<br>                        tool_call_id=None,<br>                    )<br>                    if maybe_event is not None:<br>                        yield maybe_event<br>    @property<br>    def model_name(self) -> str:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        return self._model_name<br>    @property<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._timestamp<br>``` |\\\n\\\n#### model\\_name`property`\\\n\\\n```\\\nmodel_name: str\\\n\\\n```\\\n\\\nGet the model name of the response.\\\n\\\n#### timestamp`property`\\\n\\\n```\\\ntimestamp: datetime\\\n\\\n```\\\n\\\nGet the timestamp of the response.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/function/",
      "ogUrl": "https://ai.pydantic.dev/api/models/function/",
      "title": "pydantic_ai.models.function - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/function/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/function.png",
      "ogTitle": "pydantic_ai.models.function - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/function.png",
      "og:title": "pydantic_ai.models.function - PydanticAI",
      "scrapeId": "4307ce36-8e0c-443c-b59d-b6301c552106",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/function/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/function.png",
      "twitter:title": "pydantic_ai.models.function - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/sql-gen/#sql-generation)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# SQL Generation\n\nExample demonstrating how to use PydanticAI to generate SQL queries based on user input.\n\nDemonstrates:\n\n- [dynamic system prompt](https://ai.pydantic.dev/agents/#system-prompts)\n- [structured `result_type`](https://ai.pydantic.dev/results/#structured-result-validation)\n- [result validation](https://ai.pydantic.dev/results/#result-validators-functions)\n- [agent dependencies](https://ai.pydantic.dev/dependencies/)\n\n## Running the Example\n\nThe resulting SQL is validated by running it as an `EXPLAIN` query on PostgreSQL. To run the example, you first need to run PostgreSQL, e.g. via Docker:\n\n```\ndocker run --rm -e POSTGRES_PASSWORD=postgres -p 54320:5432 postgres\n\n```\n\n_(we run postgres on port `54320` to avoid conflicts with any other postgres instances you may have running)_\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/sql-gen/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/sql-gen/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.sql_gen\n\n```\n\n```\nuv run -m pydantic_ai_examples.sql_gen\n\n```\n\nor to use a custom prompt:\n\n[pip](https://ai.pydantic.dev/examples/sql-gen/#__tabbed_2_1)[uv](https://ai.pydantic.dev/examples/sql-gen/#__tabbed_2_2)\n\n```\npython -m pydantic_ai_examples.sql_gen \"find me errors\"\n\n```\n\n```\nuv run -m pydantic_ai_examples.sql_gen \"find me errors\"\n\n```\n\nThis model uses `gemini-1.5-flash` by default since Gemini is good at single shot queries of this kind.\n\n## Example Code\n\nsql\\_gen.py\n\n```\nimport asyncio\nimport sys\nfrom collections.abc import AsyncGenerator\nfrom contextlib import asynccontextmanager\nfrom dataclasses import dataclass\nfrom datetime import date\nfrom typing import Annotated, Any, Union\n\nimport asyncpg\nimport logfire\nfrom annotated_types import MinLen\nfrom devtools import debug\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import TypeAlias\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\nfrom pydantic_ai.format_as_xml import format_as_xml\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\nlogfire.instrument_asyncpg()\n\nDB_SCHEMA = \"\"\"\nCREATE TABLE records (\n    created_at timestamptz,\n    start_timestamp timestamptz,\n    end_timestamp timestamptz,\n    trace_id text,\n    span_id text,\n    parent_span_id text,\n    level log_level,\n    span_name text,\n    message text,\n    attributes_json_schema text,\n    attributes jsonb,\n    tags text[],\n    is_exception boolean,\n    otel_status_message text,\n    service_name text\n);\n\"\"\"\nSQL_EXAMPLES = [\\\n    {\\\n        'request': 'show me records where foobar is false',\\\n        'response': \"SELECT * FROM records WHERE attributes->>'foobar' = false\",\\\n    },\\\n    {\\\n        'request': 'show me records where attributes include the key \"foobar\"',\\\n        'response': \"SELECT * FROM records WHERE attributes ? 'foobar'\",\\\n    },\\\n    {\\\n        'request': 'show me records from yesterday',\\\n        'response': \"SELECT * FROM records WHERE start_timestamp::date > CURRENT_TIMESTAMP - INTERVAL '1 day'\",\\\n    },\\\n    {\\\n        'request': 'show me error records with the tag \"foobar\"',\\\n        'response': \"SELECT * FROM records WHERE level = 'error' and 'foobar' = ANY(tags)\",\\\n    },\\\n]\n\n@dataclass\nclass Deps:\n    conn: asyncpg.Connection\n\nclass Success(BaseModel):\n    \"\"\"Response when SQL could be successfully generated.\"\"\"\n\n    sql_query: Annotated[str, MinLen(1)]\n    explanation: str = Field(\n        '', description='Explanation of the SQL query, as markdown'\n    )\n\nclass InvalidRequest(BaseModel):\n    \"\"\"Response the user input didn't include enough information to generate SQL.\"\"\"\n\n    error_message: str\n\nResponse: TypeAlias = Union[Success, InvalidRequest]\nagent: Agent[Deps, Response] = Agent(\n    'google-gla:gemini-1.5-flash',\n    # Type ignore while we wait for PEP-0747, nonetheless unions will work fine everywhere else\n    result_type=Response,  # type: ignore\n    deps_type=Deps,\n)\n\n@agent.system_prompt\nasync def system_prompt() -> str:\n    return f\"\"\"\\\nGiven the following PostgreSQL table of records, your job is to\nwrite a SQL query that suits the user's request.\n\nDatabase schema:\n\n{DB_SCHEMA}\n\ntoday's date = {date.today()}\n\n{format_as_xml(SQL_EXAMPLES)}\n\"\"\"\n\n@agent.result_validator\nasync def validate_result(ctx: RunContext[Deps], result: Response) -> Response:\n    if isinstance(result, InvalidRequest):\n        return result\n\n    # gemini often adds extraneous backslashes to SQL\n    result.sql_query = result.sql_query.replace('\\\\', '')\n    if not result.sql_query.upper().startswith('SELECT'):\n        raise ModelRetry('Please create a SELECT query')\n\n    try:\n        await ctx.deps.conn.execute(f'EXPLAIN {result.sql_query}')\n    except asyncpg.exceptions.PostgresError as e:\n        raise ModelRetry(f'Invalid query: {e}') from e\n    else:\n        return result\n\nasync def main():\n    if len(sys.argv) == 1:\n        prompt = 'show me logs from yesterday, with level \"error\"'\n    else:\n        prompt = sys.argv[1]\n\n    async with database_connect(\n        'postgresql://postgres:postgres@localhost:54320', 'pydantic_ai_sql_gen'\n    ) as conn:\n        deps = Deps(conn)\n        result = await agent.run(prompt, deps=deps)\n    debug(result.data)\n\n# pyright: reportUnknownMemberType=false\n# pyright: reportUnknownVariableType=false\n@asynccontextmanager\nasync def database_connect(server_dsn: str, database: str) -> AsyncGenerator[Any, None]:\n    with logfire.span('check and create DB'):\n        conn = await asyncpg.connect(server_dsn)\n        try:\n            db_exists = await conn.fetchval(\n                'SELECT 1 FROM pg_database WHERE datname = $1', database\n            )\n            if not db_exists:\n                await conn.execute(f'CREATE DATABASE {database}')\n        finally:\n            await conn.close()\n\n    conn = await asyncpg.connect(f'{server_dsn}/{database}')\n    try:\n        with logfire.span('create schema'):\n            async with conn.transaction():\n                if not db_exists:\n                    await conn.execute(\n                        \"CREATE TYPE log_level AS ENUM ('debug', 'info', 'warning', 'error', 'critical')\"\n                    )\n                await conn.execute(DB_SCHEMA)\n        yield conn\n    finally:\n        await conn.close()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/sql-gen/",
      "ogUrl": "https://ai.pydantic.dev/examples/sql-gen/",
      "title": "SQL Generation - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/sql-gen/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/sql-gen.png",
      "ogTitle": "SQL Generation - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/sql-gen.png",
      "og:title": "SQL Generation - PydanticAI",
      "scrapeId": "d210888a-3993-4104-aa76-86a5e6ca04e0",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/sql-gen/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/sql-gen.png",
      "twitter:title": "SQL Generation - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/vertexai/#pydantic_aimodelsvertexai)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.vertexai`\n\nCustom interface to the `*-aiplatform.googleapis.com` API for Gemini models.\n\nThis model inherits from [`GeminiModel`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel) with just the URL and auth method\nchanged, it relies on the VertexAI\n[`generateContent`](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/generateContent)\nand\n[`streamGenerateContent`](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/streamGenerateContent)\nfunction endpoints\nhaving the same schemas as the equivalent [Gemini endpoints](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel).\n\n## Setup\n\nFor details on how to set up authentication with this model as well as a comparison with the `generativelanguage.googleapis.com` API used by [`GeminiModel`](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel),\nsee [model configuration for Gemini via VertexAI](https://ai.pydantic.dev/models/#gemini-via-vertexai).\n\n## Example Usage\n\nWith the default google project already configured in your environment using \"application default credentials\":\n\nvertex\\_example\\_env.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.vertexai import VertexAIModel\n\nmodel = VertexAIModel('gemini-1.5-flash')\nagent = Agent(model)\nresult = agent.run_sync('Tell me a joke.')\nprint(result.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\nOr using a service account JSON file:\n\nvertex\\_example\\_service\\_account.py\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.vertexai import VertexAIModel\n\nmodel = VertexAIModel(\n    'gemini-1.5-flash',\n    service_account_file='path/to/service-account.json',\n)\nagent = Agent(model)\nresult = agent.run_sync('Tell me a joke.')\nprint(result.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n### VERTEX\\_AI\\_URL\\_TEMPLATE`module-attribute`\n\n```\nVERTEX_AI_URL_TEMPLATE = \"https://{region}-aiplatform.googleapis.com/v1/projects/{project_id}/locations/{region}/publishers/{model_publisher}/models/{model}:\"\n\n```\n\nURL template for Vertex AI.\n\nSee\n[`generateContent` docs](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/generateContent)\nand\n[`streamGenerateContent` docs](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints/streamGenerateContent)\nfor more information.\n\nThe template is used thus:\n\n- `region` is substituted with the `region` argument,\nsee [available regions](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VertexAiRegion)\n- `model_publisher` is substituted with the `model_publisher` argument\n- `model` is substituted with the `model_name` argument\n- `project_id` is substituted with the `project_id` from auth/credentials\n- `function` ( `generateContent` or `streamGenerateContent`) is added to the end of the URL\n\n### VertexAIModel`dataclass`\n\nBases: `GeminiModel`\n\nA model that uses Gemini via the `*-aiplatform.googleapis.com` VertexAI API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/vertexai.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>``` | ```<br>@dataclass(init=False)<br>class VertexAIModel(GeminiModel):<br>    \"\"\"A model that uses Gemini via the `*-aiplatform.googleapis.com` VertexAI API.\"\"\"<br>    service_account_file: Path | str | None<br>    project_id: str | None<br>    region: VertexAiRegion<br>    model_publisher: Literal['google']<br>    url_template: str<br>    _model_name: GeminiModelName = field(repr=False)<br>    _system: str | None = field(default='google-vertex', repr=False)<br>    # TODO __init__ can be removed once we drop 3.9 and we can set kw_only correctly on the dataclass<br>    def __init__(<br>        self,<br>        model_name: GeminiModelName,<br>        *,<br>        service_account_file: Path | str | None = None,<br>        project_id: str | None = None,<br>        region: VertexAiRegion = 'us-central1',<br>        model_publisher: Literal['google'] = 'google',<br>        http_client: AsyncHTTPClient | None = None,<br>        url_template: str = VERTEX_AI_URL_TEMPLATE,<br>    ):<br>        \"\"\"Initialize a Vertex AI Gemini model.<br>        Args:<br>            model_name: The name of the model to use. I couldn't find a list of supported Google models, in VertexAI<br>                so for now this uses the same models as the [Gemini model][pydantic_ai.models.gemini.GeminiModel].<br>            service_account_file: Path to a service account file.<br>                If not provided, the default environment credentials will be used.<br>            project_id: The project ID to use, if not provided it will be taken from the credentials.<br>            region: The region to make requests to.<br>            model_publisher: The model publisher to use, I couldn't find a good list of available publishers,<br>                and from trial and error it seems non-google models don't work with the `generateContent` and<br>                `streamGenerateContent` functions, hence only `google` is currently supported.<br>                Please create an issue or PR if you know how to use other publishers.<br>            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>            url_template: URL template for Vertex AI, see<br>                [`VERTEX_AI_URL_TEMPLATE` docs][pydantic_ai.models.vertexai.VERTEX_AI_URL_TEMPLATE]<br>                for more information.<br>        \"\"\"<br>        self._model_name = model_name<br>        self.service_account_file = service_account_file<br>        self.project_id = project_id<br>        self.region = region<br>        self.model_publisher = model_publisher<br>        self.http_client = http_client or cached_async_http_client()<br>        self.url_template = url_template<br>        self._auth = None<br>        self._url = None<br>    async def ainit(self) -> None:<br>        \"\"\"Initialize the model, setting the URL and auth.<br>        This will raise an error if authentication fails.<br>        \"\"\"<br>        if self._url is not None and self._auth is not None:<br>            return<br>        if self.service_account_file is not None:<br>            creds: BaseCredentials | ServiceAccountCredentials = _creds_from_file(self.service_account_file)<br>            assert creds.project_id is None or isinstance(creds.project_id, str)<br>            creds_project_id: str | None = creds.project_id<br>            creds_source = 'service account file'<br>        else:<br>            creds, creds_project_id = await _async_google_auth()<br>            creds_source = '`google.auth.default()`'<br>        if self.project_id is None:<br>            if creds_project_id is None:<br>                raise UserError(f'No project_id provided and none found in {creds_source}')<br>            project_id = creds_project_id<br>        else:<br>            project_id = self.project_id<br>        self._url = self.url_template.format(<br>            region=self.region,<br>            project_id=project_id,<br>            model_publisher=self.model_publisher,<br>            model=self._model_name,<br>        )<br>        self._auth = BearerTokenAuth(creds)<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, usage.Usage]:<br>        await self.ainit()<br>        return await super().request(messages, model_settings, model_request_parameters)<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        await self.ainit()<br>        async with super().request_stream(messages, model_settings, model_request_parameters) as value:<br>            yield value<br>    @property<br>    def model_name(self) -> GeminiModelName:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>``` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: GeminiModelName,\n    *,\n    service_account_file: Path | str | None = None,\n    project_id: str | None = None,\n    region: VertexAiRegion = \"us-central1\",\n    model_publisher: Literal[\"google\"] = \"google\",\n    http_client: AsyncClient | None = None,\n    url_template: str = VERTEX_AI_URL_TEMPLATE\n)\n\n```\n\nInitialize a Vertex AI Gemini model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `GeminiModelName` | The name of the model to use. I couldn't find a list of supported Google models, in VertexAI<br>so for now this uses the same models as the [Gemini model](https://ai.pydantic.dev/api/models/gemini/#pydantic_ai.models.gemini.GeminiModel). | _required_ |\n| `service_account_file` | `Path | str | None` | Path to a service account file.<br>If not provided, the default environment credentials will be used. | `None` |\n| `project_id` | `str | None` | The project ID to use, if not provided it will be taken from the credentials. | `None` |\n| `region` | `VertexAiRegion` | The region to make requests to. | `'us-central1'` |\n| `model_publisher` | `Literal['google']` | The model publisher to use, I couldn't find a good list of available publishers,<br>and from trial and error it seems non-google models don't work with the `generateContent` and<br>`streamGenerateContent` functions, hence only `google` is currently supported.<br>Please create an issue or PR if you know how to use other publishers. | `'google'` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n| `url_template` | `str` | URL template for Vertex AI, see<br>[`VERTEX_AI_URL_TEMPLATE` docs](https://ai.pydantic.dev/api/models/vertexai/#pydantic_ai.models.vertexai.VERTEX_AI_URL_TEMPLATE)<br>for more information. | `VERTEX_AI_URL_TEMPLATE` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/vertexai.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>``` | ```<br>def __init__(<br>    self,<br>    model_name: GeminiModelName,<br>    *,<br>    service_account_file: Path | str | None = None,<br>    project_id: str | None = None,<br>    region: VertexAiRegion = 'us-central1',<br>    model_publisher: Literal['google'] = 'google',<br>    http_client: AsyncHTTPClient | None = None,<br>    url_template: str = VERTEX_AI_URL_TEMPLATE,<br>):<br>    \"\"\"Initialize a Vertex AI Gemini model.<br>    Args:<br>        model_name: The name of the model to use. I couldn't find a list of supported Google models, in VertexAI<br>            so for now this uses the same models as the [Gemini model][pydantic_ai.models.gemini.GeminiModel].<br>        service_account_file: Path to a service account file.<br>            If not provided, the default environment credentials will be used.<br>        project_id: The project ID to use, if not provided it will be taken from the credentials.<br>        region: The region to make requests to.<br>        model_publisher: The model publisher to use, I couldn't find a good list of available publishers,<br>            and from trial and error it seems non-google models don't work with the `generateContent` and<br>            `streamGenerateContent` functions, hence only `google` is currently supported.<br>            Please create an issue or PR if you know how to use other publishers.<br>        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>        url_template: URL template for Vertex AI, see<br>            [`VERTEX_AI_URL_TEMPLATE` docs][pydantic_ai.models.vertexai.VERTEX_AI_URL_TEMPLATE]<br>            for more information.<br>    \"\"\"<br>    self._model_name = model_name<br>    self.service_account_file = service_account_file<br>    self.project_id = project_id<br>    self.region = region<br>    self.model_publisher = model_publisher<br>    self.http_client = http_client or cached_async_http_client()<br>    self.url_template = url_template<br>    self._auth = None<br>    self._url = None<br>``` |\n\n#### ainit`async`\n\n```\nainit() -> None\n\n```\n\nInitialize the model, setting the URL and auth.\n\nThis will raise an error if authentication fails.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/vertexai.py`\n\n|     |     |\n| --- | --- |\n| ```<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>``` | ```<br>async def ainit(self) -> None:<br>    \"\"\"Initialize the model, setting the URL and auth.<br>    This will raise an error if authentication fails.<br>    \"\"\"<br>    if self._url is not None and self._auth is not None:<br>        return<br>    if self.service_account_file is not None:<br>        creds: BaseCredentials | ServiceAccountCredentials = _creds_from_file(self.service_account_file)<br>        assert creds.project_id is None or isinstance(creds.project_id, str)<br>        creds_project_id: str | None = creds.project_id<br>        creds_source = 'service account file'<br>    else:<br>        creds, creds_project_id = await _async_google_auth()<br>        creds_source = '`google.auth.default()`'<br>    if self.project_id is None:<br>        if creds_project_id is None:<br>            raise UserError(f'No project_id provided and none found in {creds_source}')<br>        project_id = creds_project_id<br>    else:<br>        project_id = self.project_id<br>    self._url = self.url_template.format(<br>        region=self.region,<br>        project_id=project_id,<br>        model_publisher=self.model_publisher,<br>        model=self._model_name,<br>    )<br>    self._auth = BearerTokenAuth(creds)<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: GeminiModelName\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### BearerTokenAuth`dataclass`\n\nAuthentication using a bearer token generated by google-auth.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/vertexai.py`\n\n|     |     |\n| --- | --- |\n| ```<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>``` | ```<br>@dataclass<br>class BearerTokenAuth:<br>    \"\"\"Authentication using a bearer token generated by google-auth.\"\"\"<br>    credentials: BaseCredentials | ServiceAccountCredentials<br>    token_created: datetime | None = field(default=None, init=False)<br>    async def headers(self) -> dict[str, str]:<br>        if self.credentials.token is None or self._token_expired():<br>            await run_in_executor(self._refresh_token)<br>            self.token_created = datetime.now()<br>        return {'Authorization': f'Bearer {self.credentials.token}'}<br>    def _token_expired(self) -> bool:<br>        if self.token_created is None:<br>            return True<br>        else:<br>            return (datetime.now() - self.token_created) > MAX_TOKEN_AGE<br>    def _refresh_token(self) -> str:<br>        self.credentials.refresh(Request())<br>        assert isinstance(self.credentials.token, str), f'Expected token to be a string, got {self.credentials.token}'<br>        return self.credentials.token<br>``` |\n\n### VertexAiRegion`module-attribute`\n\n```\nVertexAiRegion = Literal[\\\n    \"us-central1\",\\\n    \"us-east1\",\\\n    \"us-east4\",\\\n    \"us-south1\",\\\n    \"us-west1\",\\\n    \"us-west2\",\\\n    \"us-west3\",\\\n    \"us-west4\",\\\n    \"us-east5\",\\\n    \"europe-central2\",\\\n    \"europe-north1\",\\\n    \"europe-southwest1\",\\\n    \"europe-west1\",\\\n    \"europe-west2\",\\\n    \"europe-west3\",\\\n    \"europe-west4\",\\\n    \"europe-west6\",\\\n    \"europe-west8\",\\\n    \"europe-west9\",\\\n    \"europe-west12\",\\\n    \"africa-south1\",\\\n    \"asia-east1\",\\\n    \"asia-east2\",\\\n    \"asia-northeast1\",\\\n    \"asia-northeast2\",\\\n    \"asia-northeast3\",\\\n    \"asia-south1\",\\\n    \"asia-southeast1\",\\\n    \"asia-southeast2\",\\\n    \"australia-southeast1\",\\\n    \"australia-southeast2\",\\\n    \"me-central1\",\\\n    \"me-central2\",\\\n    \"me-west1\",\\\n    \"northamerica-northeast1\",\\\n    \"northamerica-northeast2\",\\\n    \"southamerica-east1\",\\\n    \"southamerica-west1\",\\\n]\n\n```\n\nRegions available for Vertex AI.\n\nMore details [here](https://cloud.google.com/vertex-ai/docs/reference/rest#rest_endpoints).",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/vertexai/",
      "ogUrl": "https://ai.pydantic.dev/api/models/vertexai/",
      "title": "pydantic_ai.models.vertexai - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/vertexai/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/vertexai.png",
      "ogTitle": "pydantic_ai.models.vertexai - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/vertexai.png",
      "og:title": "pydantic_ai.models.vertexai - PydanticAI",
      "scrapeId": "cbc9a8ca-d41c-4a08-a401-6741bb9d3711",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/vertexai/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/vertexai.png",
      "twitter:title": "pydantic_ai.models.vertexai - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/contributing/#installation-and-setup)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Contributing\n\nWe'd love you to contribute to PydanticAI!\n\n## Installation and Setup\n\nClone your fork and cd into the repo directory\n\n```\ngit clone git@github.com:<your username>/pydantic-ai.git\ncd pydantic-ai\n\n```\n\nInstall `uv` (version 0.4.30 or later) and `pre-commit`\n\nWe use pipx here, for other options see:\n\n- [`uv` install docs](https://docs.astral.sh/uv/getting-started/installation/)\n- [`pre-commit` install docs](https://pre-commit.com/#install)\n\nTo get `pipx` itself, see [these docs](https://pypa.github.io/pipx/)\n\n```\npipx install uv pre-commit\n\n```\n\nInstall `pydantic-ai`, all dependencies and pre-commit hooks\n\n```\nmake install\n\n```\n\n## Running Tests etc.\n\nWe use `make` to manage most commands you'll need to run.\n\nFor details on available commands, run:\n\n```\nmake help\n\n```\n\nTo run code formatting, linting, static type checks, and tests with coverage report generation, run:\n\n```\nmake\n\n```\n\n## Documentation Changes\n\nTo run the documentation page locally, run:\n\n```\nuv run mkdocs serve\n\n```\n\n## Rules for adding new models to PydanticAI\n\nTo avoid an excessive workload for the maintainers of PydanticAI, we can't accept all model contributions, so we're setting the following rules for when we'll accept new models and when we won't. This should hopefully reduce the chances of disappointment and wasted work.\n\n- To add a new model with an extra dependency, that dependency needs > 500k monthly downloads from PyPI consistently over 3 months or more\n- To add a new model which uses another models logic internally and has no extra dependencies, that model's GitHub org needs > 20k stars in total\n- For any other model that's just a custom URL and API key, we're happy to add a one-paragraph description with a link and instructions on the URL to use\n- For any other model that requires more logic, we recommend you release your own Python package `pydantic-ai-xxx`, which depends on [`pydantic-ai-slim`](https://ai.pydantic.dev/install/#slim-install) and implements a model that inherits from our [`Model`](https://ai.pydantic.dev/api/models/base/#pydantic_ai.models.Model) ABC\n\nIf you're unsure about adding a model, please [create an issue](https://github.com/pydantic/pydantic-ai/issues).",
    "metadata": {
      "url": "https://ai.pydantic.dev/contributing/",
      "ogUrl": "https://ai.pydantic.dev/contributing/",
      "title": "Contributing - PydanticAI",
      "og:url": "https://ai.pydantic.dev/contributing/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/contributing.png",
      "ogTitle": "Contributing - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/contributing.png",
      "og:title": "Contributing - PydanticAI",
      "scrapeId": "8304e337-718c-4eba-9b5a-7e23a37be80d",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/contributing/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/contributing.png",
      "twitter:title": "Contributing - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/weather-agent/#running-the-example)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Weather agent\n\nExample of PydanticAI with multiple tools which the LLM needs to call in turn to answer a question.\n\nDemonstrates:\n\n- [tools](https://ai.pydantic.dev/tools/)\n- [agent dependencies](https://ai.pydantic.dev/dependencies/)\n- [streaming text responses](https://ai.pydantic.dev/results/#streaming-text)\n- Building a [Gradio](https://www.gradio.app/) UI for the agent\n\nIn this case the idea is a \"weather\" agent — the user can ask for the weather in multiple locations,\nthe agent will use the `get_lat_lng` tool to get the latitude and longitude of the locations, then use\nthe `get_weather` tool to get the weather for those locations.\n\n## Running the Example\n\nTo run this example properly, you might want to add two extra API keys **(Note if either key is missing, the code will fall back to dummy data, so they're not required)**:\n\n- A weather API key from [tomorrow.io](https://www.tomorrow.io/weather-api/) set via `WEATHER_API_KEY`\n- A geocoding API key from [geocode.maps.co](https://geocode.maps.co/) set via `GEO_API_KEY`\n\nWith [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), run:\n\n[pip](https://ai.pydantic.dev/examples/weather-agent/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/weather-agent/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.weather_agent\n\n```\n\n```\nuv run -m pydantic_ai_examples.weather_agent\n\n```\n\n## Example Code\n\npydantic\\_ai\\_examples/weather\\_agent.py\n\n```\nfrom __future__ import annotations as _annotations\n\nimport asyncio\nimport os\nfrom dataclasses import dataclass\nfrom typing import Any\n\nimport logfire\nfrom devtools import debug\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\n@dataclass\nclass Deps:\n    client: AsyncClient\n    weather_api_key: str | None\n    geo_api_key: str | None\n\nweather_agent = Agent(\n    'openai:gpt-4o',\n    # 'Be concise, reply with one sentence.' is enough for some models (like openai) to use\n    # the below tools appropriately, but others like anthropic and gemini require a bit more direction.\n    system_prompt=(\n        'Be concise, reply with one sentence.'\n        'Use the `get_lat_lng` tool to get the latitude and longitude of the locations, '\n        'then use the `get_weather` tool to get the weather.'\n    ),\n    deps_type=Deps,\n    retries=2,\n)\n\n@weather_agent.tool\nasync def get_lat_lng(\n    ctx: RunContext[Deps], location_description: str\n) -> dict[str, float]:\n    \"\"\"Get the latitude and longitude of a location.\n\n    Args:\n        ctx: The context.\n        location_description: A description of a location.\n    \"\"\"\n    if ctx.deps.geo_api_key is None:\n        # if no API key is provided, return a dummy response (London)\n        return {'lat': 51.1, 'lng': -0.1}\n\n    params = {\n        'q': location_description,\n        'api_key': ctx.deps.geo_api_key,\n    }\n    with logfire.span('calling geocode API', params=params) as span:\n        r = await ctx.deps.client.get('https://geocode.maps.co/search', params=params)\n        r.raise_for_status()\n        data = r.json()\n        span.set_attribute('response', data)\n\n    if data:\n        return {'lat': data[0]['lat'], 'lng': data[0]['lon']}\n    else:\n        raise ModelRetry('Could not find the location')\n\n@weather_agent.tool\nasync def get_weather(ctx: RunContext[Deps], lat: float, lng: float) -> dict[str, Any]:\n    \"\"\"Get the weather at a location.\n\n    Args:\n        ctx: The context.\n        lat: Latitude of the location.\n        lng: Longitude of the location.\n    \"\"\"\n    if ctx.deps.weather_api_key is None:\n        # if no API key is provided, return a dummy response\n        return {'temperature': '21 °C', 'description': 'Sunny'}\n\n    params = {\n        'apikey': ctx.deps.weather_api_key,\n        'location': f'{lat},{lng}',\n        'units': 'metric',\n    }\n    with logfire.span('calling weather API', params=params) as span:\n        r = await ctx.deps.client.get(\n            'https://api.tomorrow.io/v4/weather/realtime', params=params\n        )\n        r.raise_for_status()\n        data = r.json()\n        span.set_attribute('response', data)\n\n    values = data['data']['values']\n    # https://docs.tomorrow.io/reference/data-layers-weather-codes\n    code_lookup = {\n        1000: 'Clear, Sunny',\n        1100: 'Mostly Clear',\n        1101: 'Partly Cloudy',\n        1102: 'Mostly Cloudy',\n        1001: 'Cloudy',\n        2000: 'Fog',\n        2100: 'Light Fog',\n        4000: 'Drizzle',\n        4001: 'Rain',\n        4200: 'Light Rain',\n        4201: 'Heavy Rain',\n        5000: 'Snow',\n        5001: 'Flurries',\n        5100: 'Light Snow',\n        5101: 'Heavy Snow',\n        6000: 'Freezing Drizzle',\n        6001: 'Freezing Rain',\n        6200: 'Light Freezing Rain',\n        6201: 'Heavy Freezing Rain',\n        7000: 'Ice Pellets',\n        7101: 'Heavy Ice Pellets',\n        7102: 'Light Ice Pellets',\n        8000: 'Thunderstorm',\n    }\n    return {\n        'temperature': f'{values[\"temperatureApparent\"]:0.0f}°C',\n        'description': code_lookup.get(values['weatherCode'], 'Unknown'),\n    }\n\nasync def main():\n    async with AsyncClient() as client:\n        # create a free API key at https://www.tomorrow.io/weather-api/\n        weather_api_key = os.getenv('WEATHER_API_KEY')\n        # create a free API key at https://geocode.maps.co/\n        geo_api_key = os.getenv('GEO_API_KEY')\n        deps = Deps(\n            client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key\n        )\n        result = await weather_agent.run(\n            'What is the weather like in London and in Wiltshire?', deps=deps\n        )\n        debug(result)\n        print('Response:', result.data)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```\n\n## Running the UI\n\nYou can build multi-turn chat applications for your agent with [Gradio](https://www.gradio.app/), a framework for building AI web applications entirely in python. Gradio comes with built-in chat components and agent support so the entire UI will be implemented in a single python file!\n\nHere's what the UI looks like for the weather agent:\n\nNote, to run the UI, you'll need Python 3.10+.\n\n```\npip install gradio>=5.9.0\npython/uv-run -m pydantic_ai_examples.weather_agent_gradio\n\n```\n\n## UI Code\n\npydantic\\_ai\\_examples/weather\\_agent\\_gradio.py\n\n```\n#! pydantic_ai_examples/weather_agent_gradio.py\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/weather-agent/",
      "ogUrl": "https://ai.pydantic.dev/examples/weather-agent/",
      "title": "Weather agent - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/weather-agent/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/weather-agent.png",
      "ogTitle": "Weather agent - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/weather-agent.png",
      "og:title": "Weather agent - PydanticAI",
      "scrapeId": "3e2eadb9-a9ca-40b9-9f82-a10eada741ed",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/weather-agent/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/weather-agent.png",
      "twitter:title": "Weather agent - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/models/groq/#pydantic_aimodelsgroq)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.models.groq`\n\n## Setup\n\nFor details on how to set up authentication with this model, see [model configuration for Groq](https://ai.pydantic.dev/models/#groq).\n\n### LatestGroqModelNames`module-attribute`\n\n```\nLatestGroqModelNames = Literal[\\\n    \"llama-3.3-70b-versatile\",\\\n    \"llama-3.3-70b-specdec\",\\\n    \"llama-3.1-8b-instant\",\\\n    \"llama-3.2-1b-preview\",\\\n    \"llama-3.2-3b-preview\",\\\n    \"llama-3.2-11b-vision-preview\",\\\n    \"llama-3.2-90b-vision-preview\",\\\n    \"llama3-70b-8192\",\\\n    \"llama3-8b-8192\",\\\n    \"mixtral-8x7b-32768\",\\\n    \"gemma2-9b-it\",\\\n]\n\n```\n\nLatest Groq models.\n\n### GroqModelName`module-attribute`\n\n```\nGroqModelName = Union[str, LatestGroqModelNames]\n\n```\n\nPossible Groq model names.\n\nSince Groq supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [the Groq docs](https://console.groq.com/docs/models) for a full list.\n\n### GroqModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Groq model request.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>``` | ```<br>class GroqModelSettings(ModelSettings):<br>    \"\"\"Settings used for a Groq model request.\"\"\"<br>``` |\n\n### GroqModel`dataclass`\n\nBases: `Model`\n\nA model that uses the Groq API.\n\nInternally, this uses the [Groq Python client](https://github.com/groq/groq-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>``` | ```<br>@dataclass(init=False)<br>class GroqModel(Model):<br>    \"\"\"A model that uses the Groq API.<br>    Internally, this uses the [Groq Python client](https://github.com/groq/groq-python) to interact with the API.<br>    Apart from `__init__`, all methods are private or match those of the base class.<br>    \"\"\"<br>    client: AsyncGroq = field(repr=False)<br>    _model_name: GroqModelName = field(repr=False)<br>    _system: str | None = field(default='groq', repr=False)<br>    def __init__(<br>        self,<br>        model_name: GroqModelName,<br>        *,<br>        api_key: str | None = None,<br>        groq_client: AsyncGroq | None = None,<br>        http_client: AsyncHTTPClient | None = None,<br>    ):<br>        \"\"\"Initialize a Groq model.<br>        Args:<br>            model_name: The name of the Groq model to use. List of model names available<br>                [here](https://console.groq.com/docs/models).<br>            api_key: The API key to use for authentication, if not provided, the `GROQ_API_KEY` environment variable<br>                will be used if available.<br>            groq_client: An existing<br>                [`AsyncGroq`](https://github.com/groq/groq-python?tab=readme-ov-file#async-usage)<br>                client to use, if provided, `api_key` and `http_client` must be `None`.<br>            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>        \"\"\"<br>        self._model_name = model_name<br>        if groq_client is not None:<br>            assert http_client is None, 'Cannot provide both `groq_client` and `http_client`'<br>            assert api_key is None, 'Cannot provide both `groq_client` and `api_key`'<br>            self.client = groq_client<br>        elif http_client is not None:<br>            self.client = AsyncGroq(api_key=api_key, http_client=http_client)<br>        else:<br>            self.client = AsyncGroq(api_key=api_key, http_client=cached_async_http_client())<br>    async def request(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> tuple[ModelResponse, usage.Usage]:<br>        check_allow_model_requests()<br>        response = await self._completions_create(<br>            messages, False, cast(GroqModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        return self._process_response(response), _map_usage(response)<br>    @asynccontextmanager<br>    async def request_stream(<br>        self,<br>        messages: list[ModelMessage],<br>        model_settings: ModelSettings | None,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncIterator[StreamedResponse]:<br>        check_allow_model_requests()<br>        response = await self._completions_create(<br>            messages, True, cast(GroqModelSettings, model_settings or {}), model_request_parameters<br>        )<br>        async with response:<br>            yield await self._process_streamed_response(response)<br>    @property<br>    def model_name(self) -> GroqModelName:<br>        \"\"\"The model name.\"\"\"<br>        return self._model_name<br>    @property<br>    def system(self) -> str | None:<br>        \"\"\"The system / model provider.\"\"\"<br>        return self._system<br>    @overload<br>    async def _completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: Literal[True],<br>        model_settings: GroqModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> AsyncStream[ChatCompletionChunk]:<br>        pass<br>    @overload<br>    async def _completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: Literal[False],<br>        model_settings: GroqModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> chat.ChatCompletion:<br>        pass<br>    async def _completions_create(<br>        self,<br>        messages: list[ModelMessage],<br>        stream: bool,<br>        model_settings: GroqModelSettings,<br>        model_request_parameters: ModelRequestParameters,<br>    ) -> chat.ChatCompletion | AsyncStream[ChatCompletionChunk]:<br>        tools = self._get_tools(model_request_parameters)<br>        # standalone function to make it easier to override<br>        if not tools:<br>            tool_choice: Literal['none', 'required', 'auto'] | None = None<br>        elif not model_request_parameters.allow_text_result:<br>            tool_choice = 'required'<br>        else:<br>            tool_choice = 'auto'<br>        groq_messages = list(chain(*(self._map_message(m) for m in messages)))<br>        return await self.client.chat.completions.create(<br>            model=str(self._model_name),<br>            messages=groq_messages,<br>            n=1,<br>            parallel_tool_calls=model_settings.get('parallel_tool_calls', NOT_GIVEN),<br>            tools=tools or NOT_GIVEN,<br>            tool_choice=tool_choice or NOT_GIVEN,<br>            stream=stream,<br>            max_tokens=model_settings.get('max_tokens', NOT_GIVEN),<br>            temperature=model_settings.get('temperature', NOT_GIVEN),<br>            top_p=model_settings.get('top_p', NOT_GIVEN),<br>            timeout=model_settings.get('timeout', NOT_GIVEN),<br>            seed=model_settings.get('seed', NOT_GIVEN),<br>            presence_penalty=model_settings.get('presence_penalty', NOT_GIVEN),<br>            frequency_penalty=model_settings.get('frequency_penalty', NOT_GIVEN),<br>            logit_bias=model_settings.get('logit_bias', NOT_GIVEN),<br>        )<br>    def _process_response(self, response: chat.ChatCompletion) -> ModelResponse:<br>        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"<br>        timestamp = datetime.fromtimestamp(response.created, tz=timezone.utc)<br>        choice = response.choices[0]<br>        items: list[ModelResponsePart] = []<br>        if choice.message.content is not None:<br>            items.append(TextPart(content=choice.message.content))<br>        if choice.message.tool_calls is not None:<br>            for c in choice.message.tool_calls:<br>                items.append(ToolCallPart(tool_name=c.function.name, args=c.function.arguments, tool_call_id=c.id))<br>        return ModelResponse(items, model_name=response.model, timestamp=timestamp)<br>    async def _process_streamed_response(self, response: AsyncStream[ChatCompletionChunk]) -> GroqStreamedResponse:<br>        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"<br>        peekable_response = _utils.PeekableAsyncStream(response)<br>        first_chunk = await peekable_response.peek()<br>        if isinstance(first_chunk, _utils.Unset):<br>            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')<br>        return GroqStreamedResponse(<br>            _response=peekable_response,<br>            _model_name=self._model_name,<br>            _timestamp=datetime.fromtimestamp(first_chunk.created, tz=timezone.utc),<br>        )<br>    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[chat.ChatCompletionToolParam]:<br>        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]<br>        if model_request_parameters.result_tools:<br>            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]<br>        return tools<br>    def _map_message(self, message: ModelMessage) -> Iterable[chat.ChatCompletionMessageParam]:<br>        \"\"\"Just maps a `pydantic_ai.Message` to a `groq.types.ChatCompletionMessageParam`.\"\"\"<br>        if isinstance(message, ModelRequest):<br>            yield from self._map_user_message(message)<br>        elif isinstance(message, ModelResponse):<br>            texts: list[str] = []<br>            tool_calls: list[chat.ChatCompletionMessageToolCallParam] = []<br>            for item in message.parts:<br>                if isinstance(item, TextPart):<br>                    texts.append(item.content)<br>                elif isinstance(item, ToolCallPart):<br>                    tool_calls.append(self._map_tool_call(item))<br>                else:<br>                    assert_never(item)<br>            message_param = chat.ChatCompletionAssistantMessageParam(role='assistant')<br>            if texts:<br>                # Note: model responses from this model should only have one text item, so the following<br>                # shouldn't merge multiple texts into one unless you switch models between runs:<br>                message_param['content'] = '\\n\\n'.join(texts)<br>            if tool_calls:<br>                message_param['tool_calls'] = tool_calls<br>            yield message_param<br>        else:<br>            assert_never(message)<br>    @staticmethod<br>    def _map_tool_call(t: ToolCallPart) -> chat.ChatCompletionMessageToolCallParam:<br>        return chat.ChatCompletionMessageToolCallParam(<br>            id=_guard_tool_call_id(t=t, model_source='Groq'),<br>            type='function',<br>            function={'name': t.tool_name, 'arguments': t.args_as_json_str()},<br>        )<br>    @staticmethod<br>    def _map_tool_definition(f: ToolDefinition) -> chat.ChatCompletionToolParam:<br>        return {<br>            'type': 'function',<br>            'function': {<br>                'name': f.name,<br>                'description': f.description,<br>                'parameters': f.parameters_json_schema,<br>            },<br>        }<br>    @classmethod<br>    def _map_user_message(cls, message: ModelRequest) -> Iterable[chat.ChatCompletionMessageParam]:<br>        for part in message.parts:<br>            if isinstance(part, SystemPromptPart):<br>                yield chat.ChatCompletionSystemMessageParam(role='system', content=part.content)<br>            elif isinstance(part, UserPromptPart):<br>                yield chat.ChatCompletionUserMessageParam(role='user', content=part.content)<br>            elif isinstance(part, ToolReturnPart):<br>                yield chat.ChatCompletionToolMessageParam(<br>                    role='tool',<br>                    tool_call_id=_guard_tool_call_id(t=part, model_source='Groq'),<br>                    content=part.model_response_str(),<br>                )<br>            elif isinstance(part, RetryPromptPart):<br>                if part.tool_name is None:<br>                    yield chat.ChatCompletionUserMessageParam(role='user', content=part.model_response())<br>                else:<br>                    yield chat.ChatCompletionToolMessageParam(<br>                        role='tool',<br>                        tool_call_id=_guard_tool_call_id(t=part, model_source='Groq'),<br>                        content=part.model_response(),<br>                    )<br>``` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: GroqModelName,\n    *,\n    api_key: str | None = None,\n    groq_client: AsyncGroq | None = None,\n    http_client: AsyncClient | None = None\n)\n\n```\n\nInitialize a Groq model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `GroqModelName` | The name of the Groq model to use. List of model names available<br>[here](https://console.groq.com/docs/models). | _required_ |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `GROQ_API_KEY` environment variable<br>will be used if available. | `None` |\n| `groq_client` | `AsyncGroq | None` | An existing<br>[`AsyncGroq`](https://github.com/groq/groq-python?tab=readme-ov-file#async-usage)<br>client to use, if provided, `api_key` and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>``` | ```<br>def __init__(<br>    self,<br>    model_name: GroqModelName,<br>    *,<br>    api_key: str | None = None,<br>    groq_client: AsyncGroq | None = None,<br>    http_client: AsyncHTTPClient | None = None,<br>):<br>    \"\"\"Initialize a Groq model.<br>    Args:<br>        model_name: The name of the Groq model to use. List of model names available<br>            [here](https://console.groq.com/docs/models).<br>        api_key: The API key to use for authentication, if not provided, the `GROQ_API_KEY` environment variable<br>            will be used if available.<br>        groq_client: An existing<br>            [`AsyncGroq`](https://github.com/groq/groq-python?tab=readme-ov-file#async-usage)<br>            client to use, if provided, `api_key` and `http_client` must be `None`.<br>        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.<br>    \"\"\"<br>    self._model_name = model_name<br>    if groq_client is not None:<br>        assert http_client is None, 'Cannot provide both `groq_client` and `http_client`'<br>        assert api_key is None, 'Cannot provide both `groq_client` and `api_key`'<br>        self.client = groq_client<br>    elif http_client is not None:<br>        self.client = AsyncGroq(api_key=api_key, http_client=http_client)<br>    else:<br>        self.client = AsyncGroq(api_key=api_key, http_client=cached_async_http_client())<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: GroqModelName\n\n```\n\nThe model name.\n\n#### system`property`\n\n```\nsystem: str | None\n\n```\n\nThe system / model provider.\n\n### GroqStreamedResponse`dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for Groq models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n\n|     |     |\n| --- | --- |\n| ```<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>``` | ```<br>@dataclass<br>class GroqStreamedResponse(StreamedResponse):<br>    \"\"\"Implementation of `StreamedResponse` for Groq models.\"\"\"<br>    _model_name: GroqModelName<br>    _response: AsyncIterable[ChatCompletionChunk]<br>    _timestamp: datetime<br>    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:<br>        async for chunk in self._response:<br>            self._usage += _map_usage(chunk)<br>            try:<br>                choice = chunk.choices[0]<br>            except IndexError:<br>                continue<br>            # Handle the text part of the response<br>            content = choice.delta.content<br>            if content is not None:<br>                yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=content)<br>            # Handle the tool calls<br>            for dtc in choice.delta.tool_calls or []:<br>                maybe_event = self._parts_manager.handle_tool_call_delta(<br>                    vendor_part_id=dtc.index,<br>                    tool_name=dtc.function and dtc.function.name,<br>                    args=dtc.function and dtc.function.arguments,<br>                    tool_call_id=dtc.id,<br>                )<br>                if maybe_event is not None:<br>                    yield maybe_event<br>    @property<br>    def model_name(self) -> GroqModelName:<br>        \"\"\"Get the model name of the response.\"\"\"<br>        return self._model_name<br>    @property<br>    def timestamp(self) -> datetime:<br>        \"\"\"Get the timestamp of the response.\"\"\"<br>        return self._timestamp<br>``` |\n\n#### model\\_name`property`\n\n```\nmodel_name: GroqModelName\n\n```\n\nGet the model name of the response.\n\n#### timestamp`property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/models/groq/",
      "ogUrl": "https://ai.pydantic.dev/api/models/groq/",
      "title": "pydantic_ai.models.groq - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/models/groq/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/models/groq.png",
      "ogTitle": "pydantic_ai.models.groq - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/models/groq.png",
      "og:title": "pydantic_ai.models.groq - PydanticAI",
      "scrapeId": "438f2929-157b-44a9-84af-0d2e41194041",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/models/groq/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/models/groq.png",
      "twitter:title": "pydantic_ai.models.groq - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/settings/#pydantic_aisettings)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.settings`\n\n### ModelSettings\n\nBases: `TypedDict`\n\nSettings to configure an LLM.\n\nHere we include only settings which apply to multiple models / model providers,\nthough not all of these settings are supported by all models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/settings.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 12<br> 13<br> 14<br> 15<br> 16<br> 17<br> 18<br> 19<br> 20<br> 21<br> 22<br> 23<br> 24<br> 25<br> 26<br> 27<br> 28<br> 29<br> 30<br> 31<br> 32<br> 33<br> 34<br> 35<br> 36<br> 37<br> 38<br> 39<br> 40<br> 41<br> 42<br> 43<br> 44<br> 45<br> 46<br> 47<br> 48<br> 49<br> 50<br> 51<br> 52<br> 53<br> 54<br> 55<br> 56<br> 57<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>``` | ```<br>class ModelSettings(TypedDict, total=False):<br>    \"\"\"Settings to configure an LLM.<br>    Here we include only settings which apply to multiple models / model providers,<br>    though not all of these settings are supported by all models.<br>    \"\"\"<br>    max_tokens: int<br>    \"\"\"The maximum number of tokens to generate before stopping.<br>    Supported by:<br>    * Gemini<br>    * Anthropic<br>    * OpenAI<br>    * Groq<br>    * Cohere<br>    * Mistral<br>    \"\"\"<br>    temperature: float<br>    \"\"\"Amount of randomness injected into the response.<br>    Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to a model's<br>    maximum `temperature` for creative and generative tasks.<br>    Note that even with `temperature` of `0.0`, the results will not be fully deterministic.<br>    Supported by:<br>    * Gemini<br>    * Anthropic<br>    * OpenAI<br>    * Groq<br>    * Cohere<br>    * Mistral<br>    \"\"\"<br>    top_p: float<br>    \"\"\"An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.<br>    So 0.1 means only the tokens comprising the top 10% probability mass are considered.<br>    You should either alter `temperature` or `top_p`, but not both.<br>    Supported by:<br>    * Gemini<br>    * Anthropic<br>    * OpenAI<br>    * Groq<br>    * Cohere<br>    * Mistral<br>    \"\"\"<br>    timeout: float | Timeout<br>    \"\"\"Override the client-level default timeout for a request, in seconds.<br>    Supported by:<br>    * Gemini<br>    * Anthropic<br>    * OpenAI<br>    * Groq<br>    * Mistral<br>    \"\"\"<br>    parallel_tool_calls: bool<br>    \"\"\"Whether to allow parallel tool calls.<br>    Supported by:<br>    * OpenAI (some models, not o1)<br>    * Groq<br>    * Anthropic<br>    \"\"\"<br>    seed: int<br>    \"\"\"The random seed to use for the model, theoretically allowing for deterministic results.<br>    Supported by:<br>    * OpenAI<br>    * Groq<br>    * Cohere<br>    * Mistral<br>    \"\"\"<br>    presence_penalty: float<br>    \"\"\"Penalize new tokens based on whether they have appeared in the text so far.<br>    Supported by:<br>    * OpenAI<br>    * Groq<br>    * Cohere<br>    * Gemini<br>    * Mistral<br>    \"\"\"<br>    frequency_penalty: float<br>    \"\"\"Penalize new tokens based on their existing frequency in the text so far.<br>    Supported by:<br>    * OpenAI<br>    * Groq<br>    * Cohere<br>    * Gemini<br>    * Mistral<br>    \"\"\"<br>    logit_bias: dict[str, int]<br>    \"\"\"Modify the likelihood of specified tokens appearing in the completion.<br>    Supported by:<br>    * OpenAI<br>    * Groq<br>    \"\"\"<br>``` |\n\n#### max\\_tokens`instance-attribute`\n\n```\nmax_tokens: int\n\n```\n\nThe maximum number of tokens to generate before stopping.\n\nSupported by:\n\n- Gemini\n- Anthropic\n- OpenAI\n- Groq\n- Cohere\n- Mistral\n\n#### temperature`instance-attribute`\n\n```\ntemperature: float\n\n```\n\nAmount of randomness injected into the response.\n\nUse `temperature` closer to `0.0` for analytical / multiple choice, and closer to a model's\nmaximum `temperature` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.\n\nSupported by:\n\n- Gemini\n- Anthropic\n- OpenAI\n- Groq\n- Cohere\n- Mistral\n\n#### top\\_p`instance-attribute`\n\n```\ntop_p: float\n\n```\n\nAn alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top\\_p probability mass.\n\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nYou should either alter `temperature` or `top_p`, but not both.\n\nSupported by:\n\n- Gemini\n- Anthropic\n- OpenAI\n- Groq\n- Cohere\n- Mistral\n\n#### timeout`instance-attribute`\n\n```\ntimeout: float | Timeout\n\n```\n\nOverride the client-level default timeout for a request, in seconds.\n\nSupported by:\n\n- Gemini\n- Anthropic\n- OpenAI\n- Groq\n- Mistral\n\n#### parallel\\_tool\\_calls`instance-attribute`\n\n```\nparallel_tool_calls: bool\n\n```\n\nWhether to allow parallel tool calls.\n\nSupported by:\n\n- OpenAI (some models, not o1)\n- Groq\n- Anthropic\n\n#### seed`instance-attribute`\n\n```\nseed: int\n\n```\n\nThe random seed to use for the model, theoretically allowing for deterministic results.\n\nSupported by:\n\n- OpenAI\n- Groq\n- Cohere\n- Mistral\n\n#### presence\\_penalty`instance-attribute`\n\n```\npresence_penalty: float\n\n```\n\nPenalize new tokens based on whether they have appeared in the text so far.\n\nSupported by:\n\n- OpenAI\n- Groq\n- Cohere\n- Gemini\n- Mistral\n\n#### frequency\\_penalty`instance-attribute`\n\n```\nfrequency_penalty: float\n\n```\n\nPenalize new tokens based on their existing frequency in the text so far.\n\nSupported by:\n\n- OpenAI\n- Groq\n- Cohere\n- Gemini\n- Mistral\n\n#### logit\\_bias`instance-attribute`\n\n```\nlogit_bias: dict[str, int]\n\n```\n\nModify the likelihood of specified tokens appearing in the completion.\n\nSupported by:\n\n- OpenAI\n- Groq",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/settings/",
      "ogUrl": "https://ai.pydantic.dev/api/settings/",
      "title": "pydantic_ai.settings - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/settings/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/settings.png",
      "ogTitle": "pydantic_ai.settings - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/settings.png",
      "og:title": "pydantic_ai.settings - PydanticAI",
      "scrapeId": "f00bbaac-b367-4e17-843d-53c68e978e05",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/settings/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/settings.png",
      "twitter:title": "pydantic_ai.settings - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/tools/#pydantic_aitools)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_ai.tools`\n\n### AgentDepsT`module-attribute`\n\n```\nAgentDepsT = TypeVar(\n    \"AgentDepsT\", default=None, contravariant=True\n)\n\n```\n\nType variable for agent dependencies.\n\n### RunContext`dataclass`\n\nBases: `Generic[AgentDepsT]`\n\nInformation about the current call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n\n|     |     |\n| --- | --- |\n| ```<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>``` | ```<br>@dataclasses.dataclass<br>class RunContext(Generic[AgentDepsT]):<br>    \"\"\"Information about the current call.\"\"\"<br>    deps: AgentDepsT<br>    \"\"\"Dependencies for the agent.\"\"\"<br>    model: models.Model<br>    \"\"\"The model used in this run.\"\"\"<br>    usage: Usage<br>    \"\"\"LLM usage associated with the run.\"\"\"<br>    prompt: str<br>    \"\"\"The original user prompt passed to the run.\"\"\"<br>    messages: list[_messages.ModelMessage] = field(default_factory=list)<br>    \"\"\"Messages exchanged in the conversation so far.\"\"\"<br>    tool_name: str | None = None<br>    \"\"\"Name of the tool being called.\"\"\"<br>    retry: int = 0<br>    \"\"\"Number of retries so far.\"\"\"<br>    run_step: int = 0<br>    \"\"\"The current step in the run.\"\"\"<br>    def replace_with(<br>        self, retry: int | None = None, tool_name: str | None | _utils.Unset = _utils.UNSET<br>    ) -> RunContext[AgentDepsT]:<br>        # Create a new `RunContext` a new `retry` value and `tool_name`.<br>        kwargs = {}<br>        if retry is not None:<br>            kwargs['retry'] = retry<br>        if tool_name is not _utils.UNSET:<br>            kwargs['tool_name'] = tool_name<br>        return dataclasses.replace(self, **kwargs)<br>``` |\n\n#### deps`instance-attribute`\n\n```\ndeps: AgentDepsT\n\n```\n\nDependencies for the agent.\n\n#### model`instance-attribute`\n\n```\nmodel: Model\n\n```\n\nThe model used in this run.\n\n#### usage`instance-attribute`\n\n```\nusage: Usage\n\n```\n\nLLM usage associated with the run.\n\n#### prompt`instance-attribute`\n\n```\nprompt: str\n\n```\n\nThe original user prompt passed to the run.\n\n#### messages`class-attribute``instance-attribute`\n\n```\nmessages: list[ModelMessage] = field(default_factory=list)\n\n```\n\nMessages exchanged in the conversation so far.\n\n#### tool\\_name`class-attribute``instance-attribute`\n\n```\ntool_name: str | None = None\n\n```\n\nName of the tool being called.\n\n#### retry`class-attribute``instance-attribute`\n\n```\nretry: int = 0\n\n```\n\nNumber of retries so far.\n\n#### run\\_step`class-attribute``instance-attribute`\n\n```\nrun_step: int = 0\n\n```\n\nThe current step in the run.\n\n### ToolParams`module-attribute`\n\n```\nToolParams = ParamSpec('ToolParams', default=...)\n\n```\n\nRetrieval function param spec.\n\n### SystemPromptFunc`module-attribute`\n\n```\nSystemPromptFunc = Union[\\\n    Callable[[RunContext[AgentDepsT]], str],\\\n    Callable[[RunContext[AgentDepsT]], Awaitable[str]],\\\n    Callable[[], str],\\\n    Callable[[], Awaitable[str]],\\\n]\n\n```\n\nA function that may or maybe not take `RunContext` as an argument, and may or may not be async.\n\nUsage `SystemPromptFunc[AgentDepsT]`.\n\n### ToolFuncContext`module-attribute`\n\n```\nToolFuncContext = Callable[\\\n    Concatenate[RunContext[AgentDepsT], ToolParams], Any\\\n]\n\n```\n\nA tool function that takes `RunContext` as the first argument.\n\nUsage `ToolContextFunc[AgentDepsT, ToolParams]`.\n\n### ToolFuncPlain`module-attribute`\n\n```\nToolFuncPlain = Callable[ToolParams, Any]\n\n```\n\nA tool function that does not take `RunContext` as the first argument.\n\nUsage `ToolPlainFunc[ToolParams]`.\n\n### ToolFuncEither`module-attribute`\n\n```\nToolFuncEither = Union[\\\n    ToolFuncContext[AgentDepsT, ToolParams],\\\n    ToolFuncPlain[ToolParams],\\\n]\n\n```\n\nEither kind of tool function.\n\nThis is just a union of [`ToolFuncContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolFuncContext) and\n[`ToolFuncPlain`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolFuncPlain).\n\nUsage `ToolFuncEither[AgentDepsT, ToolParams]`.\n\n### ToolPrepareFunc`module-attribute`\n\n```\nToolPrepareFunc: TypeAlias = (\n    \"Callable[[RunContext[AgentDepsT], ToolDefinition], Awaitable[ToolDefinition | None]]\"\n)\n\n```\n\nDefinition of a function that can prepare a tool definition at call time.\n\nSee [tool docs](https://ai.pydantic.dev/tools/#tool-prepare) for more information.\n\nExample — here `only_if_42` is valid as a `ToolPrepareFunc`:\n\n```\nfrom typing import Union\n\nfrom pydantic_ai import RunContext, Tool\nfrom pydantic_ai.tools import ToolDefinition\n\nasync def only_if_42(\n    ctx: RunContext[int], tool_def: ToolDefinition\n) -> Union[ToolDefinition, None]:\n    if ctx.deps == 42:\n        return tool_def\n\ndef hitchhiker(ctx: RunContext[int], answer: str) -> str:\n    return f'{ctx.deps} {answer}'\n\nhitchhiker = Tool(hitchhiker, prepare=only_if_42)\n\n```\n\nUsage `ToolPrepareFunc[AgentDepsT]`.\n\n### DocstringFormat`module-attribute`\n\n```\nDocstringFormat = Literal[\\\n    \"google\", \"numpy\", \"sphinx\", \"auto\"\\\n]\n\n```\n\nSupported docstring formats.\n\n- `'google'` — [Google-style](https://google.github.io/styleguide/pyguide.html#381-docstrings) docstrings.\n- `'numpy'` — [Numpy-style](https://numpydoc.readthedocs.io/en/latest/format.html) docstrings.\n- `'sphinx'` — [Sphinx-style](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html#the-sphinx-docstring-format) docstrings.\n- `'auto'` — Automatically infer the format based on the structure of the docstring.\n\n### Tool`dataclass`\n\nBases: `Generic[AgentDepsT]`\n\nA tool function for an agent.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n\n|     |     |\n| --- | --- |\n| ```<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>``` | ````<br>@dataclass(init=False)<br>class Tool(Generic[AgentDepsT]):<br>    \"\"\"A tool function for an agent.\"\"\"<br>    function: ToolFuncEither[AgentDepsT]<br>    takes_ctx: bool<br>    max_retries: int | None<br>    name: str<br>    description: str<br>    prepare: ToolPrepareFunc[AgentDepsT] | None<br>    docstring_format: DocstringFormat<br>    require_parameter_descriptions: bool<br>    _is_async: bool = field(init=False)<br>    _single_arg_name: str | None = field(init=False)<br>    _positional_fields: list[str] = field(init=False)<br>    _var_positional_field: str | None = field(init=False)<br>    _validator: SchemaValidator = field(init=False, repr=False)<br>    _parameters_json_schema: ObjectJsonSchema = field(init=False)<br>    # TODO: Move this state off the Tool class, which is otherwise stateless.<br>    #   This should be tracked inside a specific agent run, not the tool.<br>    current_retry: int = field(default=0, init=False)<br>    def __init__(<br>        self,<br>        function: ToolFuncEither[AgentDepsT],<br>        *,<br>        takes_ctx: bool | None = None,<br>        max_retries: int | None = None,<br>        name: str | None = None,<br>        description: str | None = None,<br>        prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>        docstring_format: DocstringFormat = 'auto',<br>        require_parameter_descriptions: bool = False,<br>    ):<br>        \"\"\"Create a new tool instance.<br>        Example usage:<br>        ```python {noqa=\"I001\"}<br>        from pydantic_ai import Agent, RunContext, Tool<br>        async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:<br>            return f'{ctx.deps} {x} {y}'<br>        agent = Agent('test', tools=[Tool(my_tool)])<br>        ```<br>        or with a custom prepare method:<br>        ```python {noqa=\"I001\"}<br>        from typing import Union<br>        from pydantic_ai import Agent, RunContext, Tool<br>        from pydantic_ai.tools import ToolDefinition<br>        async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:<br>            return f'{ctx.deps} {x} {y}'<br>        async def prep_my_tool(<br>            ctx: RunContext[int], tool_def: ToolDefinition<br>        ) -> Union[ToolDefinition, None]:<br>            # only register the tool if `deps == 42`<br>            if ctx.deps == 42:<br>                return tool_def<br>        agent = Agent('test', tools=[Tool(my_tool, prepare=prep_my_tool)])<br>        ```<br>        Args:<br>            function: The Python function to call as the tool.<br>            takes_ctx: Whether the function takes a [`RunContext`][pydantic_ai.tools.RunContext] first argument,<br>                this is inferred if unset.<br>            max_retries: Maximum number of retries allowed for this tool, set to the agent default if `None`.<br>            name: Name of the tool, inferred from the function if `None`.<br>            description: Description of the tool, inferred from the function if `None`.<br>            prepare: custom method to prepare the tool definition for each step, return `None` to omit this<br>                tool from a given step. This is useful if you want to customise a tool at call time,<br>                or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].<br>            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].<br>                Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.<br>            require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.<br>        \"\"\"<br>        if takes_ctx is None:<br>            takes_ctx = _pydantic.takes_ctx(function)<br>        f = _pydantic.function_schema(function, takes_ctx, docstring_format, require_parameter_descriptions)<br>        self.function = function<br>        self.takes_ctx = takes_ctx<br>        self.max_retries = max_retries<br>        self.name = name or function.__name__<br>        self.description = description or f['description']<br>        self.prepare = prepare<br>        self.docstring_format = docstring_format<br>        self.require_parameter_descriptions = require_parameter_descriptions<br>        self._is_async = inspect.iscoroutinefunction(self.function)<br>        self._single_arg_name = f['single_arg_name']<br>        self._positional_fields = f['positional_fields']<br>        self._var_positional_field = f['var_positional_field']<br>        self._validator = f['validator']<br>        self._parameters_json_schema = f['json_schema']<br>    async def prepare_tool_def(self, ctx: RunContext[AgentDepsT]) -> ToolDefinition | None:<br>        \"\"\"Get the tool definition.<br>        By default, this method creates a tool definition, then either returns it, or calls `self.prepare`<br>        if it's set.<br>        Returns:<br>            return a `ToolDefinition` or `None` if the tools should not be registered for this run.<br>        \"\"\"<br>        tool_def = ToolDefinition(<br>            name=self.name,<br>            description=self.description,<br>            parameters_json_schema=self._parameters_json_schema,<br>        )<br>        if self.prepare is not None:<br>            return await self.prepare(ctx, tool_def)<br>        else:<br>            return tool_def<br>    async def run(<br>        self, message: _messages.ToolCallPart, run_context: RunContext[AgentDepsT]<br>    ) -> _messages.ToolReturnPart | _messages.RetryPromptPart:<br>        \"\"\"Run the tool function asynchronously.\"\"\"<br>        try:<br>            if isinstance(message.args, str):<br>                args_dict = self._validator.validate_json(message.args)<br>            else:<br>                args_dict = self._validator.validate_python(message.args)<br>        except ValidationError as e:<br>            return self._on_error(e, message)<br>        args, kwargs = self._call_args(args_dict, message, run_context)<br>        try:<br>            if self._is_async:<br>                function = cast(Callable[[Any], Awaitable[str]], self.function)<br>                response_content = await function(*args, **kwargs)<br>            else:<br>                function = cast(Callable[[Any], str], self.function)<br>                response_content = await _utils.run_in_executor(function, *args, **kwargs)<br>        except ModelRetry as e:<br>            return self._on_error(e, message)<br>        self.current_retry = 0<br>        return _messages.ToolReturnPart(<br>            tool_name=message.tool_name,<br>            content=response_content,<br>            tool_call_id=message.tool_call_id,<br>        )<br>    def _call_args(<br>        self,<br>        args_dict: dict[str, Any],<br>        message: _messages.ToolCallPart,<br>        run_context: RunContext[AgentDepsT],<br>    ) -> tuple[list[Any], dict[str, Any]]:<br>        if self._single_arg_name:<br>            args_dict = {self._single_arg_name: args_dict}<br>        ctx = dataclasses.replace(run_context, retry=self.current_retry, tool_name=message.tool_name)<br>        args = [ctx] if self.takes_ctx else []<br>        for positional_field in self._positional_fields:<br>            args.append(args_dict.pop(positional_field))<br>        if self._var_positional_field:<br>            args.extend(args_dict.pop(self._var_positional_field))<br>        return args, args_dict<br>    def _on_error(<br>        self, exc: ValidationError | ModelRetry, call_message: _messages.ToolCallPart<br>    ) -> _messages.RetryPromptPart:<br>        self.current_retry += 1<br>        if self.max_retries is None or self.current_retry > self.max_retries:<br>            raise UnexpectedModelBehavior(f'Tool exceeded max retries count of {self.max_retries}') from exc<br>        else:<br>            if isinstance(exc, ValidationError):<br>                content = exc.errors(include_url=False)<br>            else:<br>                content = exc.message<br>            return _messages.RetryPromptPart(<br>                tool_name=call_message.tool_name,<br>                content=content,<br>                tool_call_id=call_message.tool_call_id,<br>            )<br>```` |\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    function: ToolFuncEither[AgentDepsT],\n    *,\n    takes_ctx: bool | None = None,\n    max_retries: int | None = None,\n    name: str | None = None,\n    description: str | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False\n)\n\n```\n\nCreate a new tool instance.\n\nExample usage:\n\n```\nfrom pydantic_ai import Agent, RunContext, Tool\n\nasync def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n    return f'{ctx.deps} {x} {y}'\n\nagent = Agent('test', tools=[Tool(my_tool)])\n\n```\n\nor with a custom prepare method:\n\n```\nfrom typing import Union\n\nfrom pydantic_ai import Agent, RunContext, Tool\nfrom pydantic_ai.tools import ToolDefinition\n\nasync def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n    return f'{ctx.deps} {x} {y}'\n\nasync def prep_my_tool(\n    ctx: RunContext[int], tool_def: ToolDefinition\n) -> Union[ToolDefinition, None]:\n    # only register the tool if `deps == 42`\n    if ctx.deps == 42:\n        return tool_def\n\nagent = Agent('test', tools=[Tool(my_tool, prepare=prep_my_tool)])\n\n```\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `function` | `ToolFuncEither[AgentDepsT]` | The Python function to call as the tool. | _required_ |\n| `takes_ctx` | `bool | None` | Whether the function takes a [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) first argument,<br>this is inferred if unset. | `None` |\n| `max_retries` | `int | None` | Maximum number of retries allowed for this tool, set to the agent default if `None`. | `None` |\n| `name` | `str | None` | Name of the tool, inferred from the function if `None`. | `None` |\n| `description` | `str | None` | Description of the tool, inferred from the function if `None`. | `None` |\n| `prepare` | `ToolPrepareFunc[AgentDepsT] | None` | custom method to prepare the tool definition for each step, return `None` to omit this<br>tool from a given step. This is useful if you want to customise a tool at call time,<br>or omit it completely from a step. See [`ToolPrepareFunc`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolPrepareFunc). | `None` |\n| `docstring_format` | `DocstringFormat` | The format of the docstring, see [`DocstringFormat`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.DocstringFormat).<br>Defaults to `'auto'`, such that the format is inferred from the structure of the docstring. | `'auto'` |\n| `require_parameter_descriptions` | `bool` | If True, raise an error if a parameter description is missing. Defaults to False. | `False` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n\n|     |     |\n| --- | --- |\n| ```<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>``` | ````<br>def __init__(<br>    self,<br>    function: ToolFuncEither[AgentDepsT],<br>    *,<br>    takes_ctx: bool | None = None,<br>    max_retries: int | None = None,<br>    name: str | None = None,<br>    description: str | None = None,<br>    prepare: ToolPrepareFunc[AgentDepsT] | None = None,<br>    docstring_format: DocstringFormat = 'auto',<br>    require_parameter_descriptions: bool = False,<br>):<br>    \"\"\"Create a new tool instance.<br>    Example usage:<br>    ```python {noqa=\"I001\"}<br>    from pydantic_ai import Agent, RunContext, Tool<br>    async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:<br>        return f'{ctx.deps} {x} {y}'<br>    agent = Agent('test', tools=[Tool(my_tool)])<br>    ```<br>    or with a custom prepare method:<br>    ```python {noqa=\"I001\"}<br>    from typing import Union<br>    from pydantic_ai import Agent, RunContext, Tool<br>    from pydantic_ai.tools import ToolDefinition<br>    async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:<br>        return f'{ctx.deps} {x} {y}'<br>    async def prep_my_tool(<br>        ctx: RunContext[int], tool_def: ToolDefinition<br>    ) -> Union[ToolDefinition, None]:<br>        # only register the tool if `deps == 42`<br>        if ctx.deps == 42:<br>            return tool_def<br>    agent = Agent('test', tools=[Tool(my_tool, prepare=prep_my_tool)])<br>    ```<br>    Args:<br>        function: The Python function to call as the tool.<br>        takes_ctx: Whether the function takes a [`RunContext`][pydantic_ai.tools.RunContext] first argument,<br>            this is inferred if unset.<br>        max_retries: Maximum number of retries allowed for this tool, set to the agent default if `None`.<br>        name: Name of the tool, inferred from the function if `None`.<br>        description: Description of the tool, inferred from the function if `None`.<br>        prepare: custom method to prepare the tool definition for each step, return `None` to omit this<br>            tool from a given step. This is useful if you want to customise a tool at call time,<br>            or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].<br>        docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].<br>            Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.<br>        require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.<br>    \"\"\"<br>    if takes_ctx is None:<br>        takes_ctx = _pydantic.takes_ctx(function)<br>    f = _pydantic.function_schema(function, takes_ctx, docstring_format, require_parameter_descriptions)<br>    self.function = function<br>    self.takes_ctx = takes_ctx<br>    self.max_retries = max_retries<br>    self.name = name or function.__name__<br>    self.description = description or f['description']<br>    self.prepare = prepare<br>    self.docstring_format = docstring_format<br>    self.require_parameter_descriptions = require_parameter_descriptions<br>    self._is_async = inspect.iscoroutinefunction(self.function)<br>    self._single_arg_name = f['single_arg_name']<br>    self._positional_fields = f['positional_fields']<br>    self._var_positional_field = f['var_positional_field']<br>    self._validator = f['validator']<br>    self._parameters_json_schema = f['json_schema']<br>```` |\n\n#### prepare\\_tool\\_def`async`\n\n```\nprepare_tool_def(\n    ctx: RunContext[AgentDepsT],\n) -> ToolDefinition | None\n\n```\n\nGet the tool definition.\n\nBy default, this method creates a tool definition, then either returns it, or calls `self.prepare`\nif it's set.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `ToolDefinition | None` | return a `ToolDefinition` or `None` if the tools should not be registered for this run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n\n|     |     |\n| --- | --- |\n| ```<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>``` | ```<br>async def prepare_tool_def(self, ctx: RunContext[AgentDepsT]) -> ToolDefinition | None:<br>    \"\"\"Get the tool definition.<br>    By default, this method creates a tool definition, then either returns it, or calls `self.prepare`<br>    if it's set.<br>    Returns:<br>        return a `ToolDefinition` or `None` if the tools should not be registered for this run.<br>    \"\"\"<br>    tool_def = ToolDefinition(<br>        name=self.name,<br>        description=self.description,<br>        parameters_json_schema=self._parameters_json_schema,<br>    )<br>    if self.prepare is not None:<br>        return await self.prepare(ctx, tool_def)<br>    else:<br>        return tool_def<br>``` |\n\n#### run`async`\n\n```\nrun(\n    message: ToolCallPart,\n    run_context: RunContext[AgentDepsT],\n) -> ToolReturnPart | RetryPromptPart\n\n```\n\nRun the tool function asynchronously.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n\n|     |     |\n| --- | --- |\n| ```<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>``` | ```<br>async def run(<br>    self, message: _messages.ToolCallPart, run_context: RunContext[AgentDepsT]<br>) -> _messages.ToolReturnPart | _messages.RetryPromptPart:<br>    \"\"\"Run the tool function asynchronously.\"\"\"<br>    try:<br>        if isinstance(message.args, str):<br>            args_dict = self._validator.validate_json(message.args)<br>        else:<br>            args_dict = self._validator.validate_python(message.args)<br>    except ValidationError as e:<br>        return self._on_error(e, message)<br>    args, kwargs = self._call_args(args_dict, message, run_context)<br>    try:<br>        if self._is_async:<br>            function = cast(Callable[[Any], Awaitable[str]], self.function)<br>            response_content = await function(*args, **kwargs)<br>        else:<br>            function = cast(Callable[[Any], str], self.function)<br>            response_content = await _utils.run_in_executor(function, *args, **kwargs)<br>    except ModelRetry as e:<br>        return self._on_error(e, message)<br>    self.current_retry = 0<br>    return _messages.ToolReturnPart(<br>        tool_name=message.tool_name,<br>        content=response_content,<br>        tool_call_id=message.tool_call_id,<br>    )<br>``` |\n\n### ObjectJsonSchema`module-attribute`\n\n```\nObjectJsonSchema: TypeAlias = dict[str, Any]\n\n```\n\nType representing JSON schema of an object, e.g. where `\"type\": \"object\"`.\n\nThis type is used to define tools parameters (aka arguments) in [ToolDefinition](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.ToolDefinition).\n\nWith PEP-728 this should be a TypedDict with `type: Literal['object']`, and `extra_parts=Any`\n\n### ToolDefinition`dataclass`\n\nDefinition of a tool passed to a model.\n\nThis is used for both function tools result tools.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n\n|     |     |\n| --- | --- |\n| ```<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>``` | ```<br>@dataclass<br>class ToolDefinition:<br>    \"\"\"Definition of a tool passed to a model.<br>    This is used for both function tools result tools.<br>    \"\"\"<br>    name: str<br>    \"\"\"The name of the tool.\"\"\"<br>    description: str<br>    \"\"\"The description of the tool.\"\"\"<br>    parameters_json_schema: ObjectJsonSchema<br>    \"\"\"The JSON schema for the tool's parameters.\"\"\"<br>    outer_typed_dict_key: str | None = None<br>    \"\"\"The key in the outer [TypedDict] that wraps a result tool.<br>    This will only be set for result tools which don't have an `object` JSON schema.<br>    \"\"\"<br>``` |\n\n#### name`instance-attribute`\n\n```\nname: str\n\n```\n\nThe name of the tool.\n\n#### description`instance-attribute`\n\n```\ndescription: str\n\n```\n\nThe description of the tool.\n\n#### parameters\\_json\\_schema`instance-attribute`\n\n```\nparameters_json_schema: ObjectJsonSchema\n\n```\n\nThe JSON schema for the tool's parameters.\n\n#### outer\\_typed\\_dict\\_key`class-attribute``instance-attribute`\n\n```\nouter_typed_dict_key: str | None = None\n\n```\n\nThe key in the outer \\[TypedDict\\] that wraps a result tool.\n\nThis will only be set for result tools which don't have an `object` JSON schema.",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/tools/",
      "ogUrl": "https://ai.pydantic.dev/api/tools/",
      "title": "pydantic_ai.tools - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/tools/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/tools.png",
      "ogTitle": "pydantic_ai.tools - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/tools.png",
      "og:title": "pydantic_ai.tools - PydanticAI",
      "scrapeId": "91a13a07-abe0-49ff-b333-6adfa7d78018",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/tools/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/tools.png",
      "twitter:title": "pydantic_ai.tools - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graphnodes)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# `pydantic_graph.nodes`\n\n### GraphRunContext`dataclass`\n\nBases: `Generic[StateT, DepsT]`\n\nContext for a graph.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>``` | ```<br>@dataclass<br>class GraphRunContext(Generic[StateT, DepsT]):<br>    \"\"\"Context for a graph.\"\"\"<br>    state: StateT<br>    \"\"\"The state of the graph.\"\"\"<br>    deps: DepsT<br>    \"\"\"Dependencies for the graph.\"\"\"<br>``` |\n\n#### state`instance-attribute`\n\n```\nstate: StateT\n\n```\n\nThe state of the graph.\n\n#### deps`instance-attribute`\n\n```\ndeps: DepsT\n\n```\n\nDependencies for the graph.\n\n### BaseNode\n\nBases: `ABC`, `Generic[StateT, DepsT, NodeRunEndT]`\n\nBase class for a node.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 37<br> 38<br> 39<br> 40<br> 41<br> 42<br> 43<br> 44<br> 45<br> 46<br> 47<br> 48<br> 49<br> 50<br> 51<br> 52<br> 53<br> 54<br> 55<br> 56<br> 57<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>``` | ```<br>class BaseNode(ABC, Generic[StateT, DepsT, NodeRunEndT]):<br>    \"\"\"Base class for a node.\"\"\"<br>    docstring_notes: ClassVar[bool] = False<br>    \"\"\"Set to `True` to generate mermaid diagram notes from the class's docstring.<br>    While this can add valuable information to the diagram, it can make diagrams harder to view, hence<br>    it is disabled by default. You can also customise notes overriding the<br>    [`get_note`][pydantic_graph.nodes.BaseNode.get_note] method.<br>    \"\"\"<br>    @abstractmethod<br>    async def run(self, ctx: GraphRunContext[StateT, DepsT]) -> BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]:<br>        \"\"\"Run the node.<br>        This is an abstract method that must be implemented by subclasses.<br>        !!! note \"Return types used at runtime\"<br>            The return type of this method are read by `pydantic_graph` at runtime and used to define which<br>            nodes can be called next in the graph. This is displayed in [mermaid diagrams](mermaid.md)<br>            and enforced when running the graph.<br>        Args:<br>            ctx: The graph context.<br>        Returns:<br>            The next node to run or [`End`][pydantic_graph.nodes.End] to signal the end of the graph.<br>        \"\"\"<br>        ...<br>    @classmethod<br>    @cache<br>    def get_id(cls) -> str:<br>        \"\"\"Get the ID of the node.\"\"\"<br>        return cls.__name__<br>    @classmethod<br>    def get_note(cls) -> str | None:<br>        \"\"\"Get a note about the node to render on mermaid charts.<br>        By default, this returns a note only if [`docstring_notes`][pydantic_graph.nodes.BaseNode.docstring_notes]<br>        is `True`. You can override this method to customise the node notes.<br>        \"\"\"<br>        if not cls.docstring_notes:<br>            return None<br>        docstring = cls.__doc__<br>        # dataclasses get an automatic docstring which is just their signature, we don't want that<br>        if docstring and is_dataclass(cls) and docstring.startswith(f'{cls.__name__}('):<br>            docstring = None<br>        if docstring:<br>            # remove indentation from docstring<br>            import inspect<br>            docstring = inspect.cleandoc(docstring)<br>        return docstring<br>    @classmethod<br>    def get_node_def(cls, local_ns: dict[str, Any] | None) -> NodeDef[StateT, DepsT, NodeRunEndT]:<br>        \"\"\"Get the node definition.\"\"\"<br>        type_hints = get_type_hints(cls.run, localns=local_ns, include_extras=True)<br>        try:<br>            return_hint = type_hints['return']<br>        except KeyError as e:<br>            raise exceptions.GraphSetupError(f'Node {cls} is missing a return type hint on its `run` method') from e<br>        next_node_edges: dict[str, Edge] = {}<br>        end_edge: Edge | None = None<br>        returns_base_node: bool = False<br>        for return_type in _utils.get_union_args(return_hint):<br>            return_type, annotations = _utils.unpack_annotated(return_type)<br>            edge = next((a for a in annotations if isinstance(a, Edge)), Edge(None))<br>            return_type_origin = get_origin(return_type) or return_type<br>            if return_type_origin is End:<br>                end_edge = edge<br>            elif return_type_origin is BaseNode:<br>                # TODO: Should we disallow this?<br>                returns_base_node = True<br>            elif issubclass(return_type_origin, BaseNode):<br>                next_node_edges[return_type.get_id()] = edge<br>            else:<br>                raise exceptions.GraphSetupError(f'Invalid return type: {return_type}')<br>        return NodeDef(<br>            cls,<br>            cls.get_id(),<br>            cls.get_note(),<br>            next_node_edges,<br>            end_edge,<br>            returns_base_node,<br>        )<br>``` |\n\n#### docstring\\_notes`class-attribute`\n\n```\ndocstring_notes: bool = False\n\n```\n\nSet to `True` to generate mermaid diagram notes from the class's docstring.\n\nWhile this can add valuable information to the diagram, it can make diagrams harder to view, hence\nit is disabled by default. You can also customise notes overriding the\n[`get_note`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode.get_note) method.\n\n#### run`abstractmethod``async`\n\n```\nrun(\n    ctx: GraphRunContext[StateT, DepsT]\n) -> BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]\n\n```\n\nRun the node.\n\nThis is an abstract method that must be implemented by subclasses.\n\nReturn types used at runtime\n\nThe return type of this method are read by `pydantic_graph` at runtime and used to define which\nnodes can be called next in the graph. This is displayed in [mermaid diagrams](https://ai.pydantic.dev/api/pydantic_graph/mermaid/)\nand enforced when running the graph.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `ctx` | `GraphRunContext[StateT, DepsT]` | The graph context. | _required_ |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]` | The next node to run or [`End`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.End) to signal the end of the graph. |\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>``` | ```<br>@abstractmethod<br>async def run(self, ctx: GraphRunContext[StateT, DepsT]) -> BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]:<br>    \"\"\"Run the node.<br>    This is an abstract method that must be implemented by subclasses.<br>    !!! note \"Return types used at runtime\"<br>        The return type of this method are read by `pydantic_graph` at runtime and used to define which<br>        nodes can be called next in the graph. This is displayed in [mermaid diagrams](mermaid.md)<br>        and enforced when running the graph.<br>    Args:<br>        ctx: The graph context.<br>    Returns:<br>        The next node to run or [`End`][pydantic_graph.nodes.End] to signal the end of the graph.<br>    \"\"\"<br>    ...<br>``` |\n\n#### get\\_id`cached``classmethod`\n\n```\nget_id() -> str\n\n```\n\nGet the ID of the node.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br>67<br>68<br>69<br>70<br>71<br>``` | ```<br>@classmethod<br>@cache<br>def get_id(cls) -> str:<br>    \"\"\"Get the ID of the node.\"\"\"<br>    return cls.__name__<br>``` |\n\n#### get\\_note`classmethod`\n\n```\nget_note() -> str | None\n\n```\n\nGet a note about the node to render on mermaid charts.\n\nBy default, this returns a note only if [`docstring_notes`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode.docstring_notes)\nis `True`. You can override this method to customise the node notes.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>``` | ```<br>@classmethod<br>def get_note(cls) -> str | None:<br>    \"\"\"Get a note about the node to render on mermaid charts.<br>    By default, this returns a note only if [`docstring_notes`][pydantic_graph.nodes.BaseNode.docstring_notes]<br>    is `True`. You can override this method to customise the node notes.<br>    \"\"\"<br>    if not cls.docstring_notes:<br>        return None<br>    docstring = cls.__doc__<br>    # dataclasses get an automatic docstring which is just their signature, we don't want that<br>    if docstring and is_dataclass(cls) and docstring.startswith(f'{cls.__name__}('):<br>        docstring = None<br>    if docstring:<br>        # remove indentation from docstring<br>        import inspect<br>        docstring = inspect.cleandoc(docstring)<br>    return docstring<br>``` |\n\n#### get\\_node\\_def`classmethod`\n\n```\nget_node_def(\n    local_ns: dict[str, Any] | None\n) -> NodeDef[StateT, DepsT, NodeRunEndT]\n\n```\n\nGet the node definition.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>``` | ```<br>@classmethod<br>def get_node_def(cls, local_ns: dict[str, Any] | None) -> NodeDef[StateT, DepsT, NodeRunEndT]:<br>    \"\"\"Get the node definition.\"\"\"<br>    type_hints = get_type_hints(cls.run, localns=local_ns, include_extras=True)<br>    try:<br>        return_hint = type_hints['return']<br>    except KeyError as e:<br>        raise exceptions.GraphSetupError(f'Node {cls} is missing a return type hint on its `run` method') from e<br>    next_node_edges: dict[str, Edge] = {}<br>    end_edge: Edge | None = None<br>    returns_base_node: bool = False<br>    for return_type in _utils.get_union_args(return_hint):<br>        return_type, annotations = _utils.unpack_annotated(return_type)<br>        edge = next((a for a in annotations if isinstance(a, Edge)), Edge(None))<br>        return_type_origin = get_origin(return_type) or return_type<br>        if return_type_origin is End:<br>            end_edge = edge<br>        elif return_type_origin is BaseNode:<br>            # TODO: Should we disallow this?<br>            returns_base_node = True<br>        elif issubclass(return_type_origin, BaseNode):<br>            next_node_edges[return_type.get_id()] = edge<br>        else:<br>            raise exceptions.GraphSetupError(f'Invalid return type: {return_type}')<br>    return NodeDef(<br>        cls,<br>        cls.get_id(),<br>        cls.get_note(),<br>        next_node_edges,<br>        end_edge,<br>        returns_base_node,<br>    )<br>``` |\n\n### End`dataclass`\n\nBases: `Generic[RunEndT]`\n\nType to return from a node to signal the end of the graph.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br>129<br>130<br>131<br>132<br>133<br>134<br>``` | ```<br>@dataclass<br>class End(Generic[RunEndT]):<br>    \"\"\"Type to return from a node to signal the end of the graph.\"\"\"<br>    data: RunEndT<br>    \"\"\"Data to return from the graph.\"\"\"<br>``` |\n\n#### data`instance-attribute`\n\n```\ndata: RunEndT\n\n```\n\nData to return from the graph.\n\n### Edge`dataclass`\n\nAnnotation to apply a label to an edge in a graph.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n\n|     |     |\n| --- | --- |\n| ```<br>137<br>138<br>139<br>140<br>141<br>142<br>``` | ```<br>@dataclass<br>class Edge:<br>    \"\"\"Annotation to apply a label to an edge in a graph.\"\"\"<br>    label: str | None<br>    \"\"\"Label for the edge.\"\"\"<br>``` |\n\n#### label`instance-attribute`\n\n```\nlabel: str | None\n\n```\n\nLabel for the edge.\n\n### DepsT`module-attribute`\n\n```\nDepsT = TypeVar('DepsT', default=None, contravariant=True)\n\n```\n\nType variable for the dependencies of a graph and node.\n\n### RunEndT`module-attribute`\n\n```\nRunEndT = TypeVar('RunEndT', covariant=True, default=None)\n\n```\n\nCovariant type variable for the return type of a graph [`run`](https://ai.pydantic.dev/api/pydantic_graph/graph/#pydantic_graph.graph.Graph.run).\n\n### NodeRunEndT`module-attribute`\n\n```\nNodeRunEndT = TypeVar(\n    \"NodeRunEndT\", covariant=True, default=Never\n)\n\n```\n\nCovariant type variable for the return type of a node [`run`](https://ai.pydantic.dev/api/pydantic_graph/nodes/#pydantic_graph.nodes.BaseNode.run).",
    "metadata": {
      "url": "https://ai.pydantic.dev/api/pydantic_graph/nodes/",
      "ogUrl": "https://ai.pydantic.dev/api/pydantic_graph/nodes/",
      "title": "pydantic_graph.nodes - PydanticAI",
      "og:url": "https://ai.pydantic.dev/api/pydantic_graph/nodes/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/nodes.png",
      "ogTitle": "pydantic_graph.nodes - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/nodes.png",
      "og:title": "pydantic_graph.nodes - PydanticAI",
      "scrapeId": "ec51b0bd-617a-40e4-9fe0-c3f9c6800979",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/api/pydantic_graph/nodes/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/api/pydantic_graph/nodes.png",
      "twitter:title": "pydantic_graph.nodes - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/dependencies/#dependencies)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# Dependencies\n\nPydanticAI uses a dependency injection system to provide data and services to your agent's [system prompts](https://ai.pydantic.dev/agents/#system-prompts), [tools](https://ai.pydantic.dev/tools/) and [result validators](https://ai.pydantic.dev/results/#result-validators-functions).\n\nMatching PydanticAI's design philosophy, our dependency system tries to use existing best practice in Python development rather than inventing esoteric \"magic\", this should make dependencies type-safe, understandable easier to test and ultimately easier to deploy in production.\n\n## Defining Dependencies\n\nDependencies can be any python type. While in simple cases you might be able to pass a single object as a dependency (e.g. an HTTP connection), [dataclasses](https://docs.python.org/3/library/dataclasses.html#module-dataclasses) are generally a convenient container when your dependencies included multiple objects.\n\nHere's an example of defining an agent that requires dependencies.\n\n( **Note:** dependencies aren't actually used in this example, see [Accessing Dependencies](https://ai.pydantic.dev/dependencies/#accessing-dependencies) below)\n\nunused\\_dependencies.py\n\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.AsyncClient\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,\n)\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = MyDeps('foobar', client)\n        result = await agent.run(\n            'Tell me a joke.',\n            deps=deps,\n        )\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\n## Accessing Dependencies\n\nDependencies are accessed through the [`RunContext`](https://ai.pydantic.dev/api/tools/#pydantic_ai.tools.RunContext) type, this should be the first parameter of system prompt functions etc.\n\nsystem\\_prompt\\_dependencies.py\n\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.AsyncClient\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,\n)\n\n@agent.system_prompt\nasync def get_system_prompt(ctx: RunContext[MyDeps]) -> str:\n    response = await ctx.deps.http_client.get(\n        'https://example.com',\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n    )\n    response.raise_for_status()\n    return f'Prompt: {response.text}'\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = MyDeps('foobar', client)\n        result = await agent.run('Tell me a joke.', deps=deps)\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\n### Asynchronous vs. Synchronous dependencies\n\n[System prompt functions](https://ai.pydantic.dev/agents/#system-prompts), [function tools](https://ai.pydantic.dev/tools/) and [result validators](https://ai.pydantic.dev/results/#result-validators-functions) are all run in the async context of an agent run.\n\nIf these functions are not coroutines (e.g. `async def`) they are called with\n[`run_in_executor`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor) in a thread pool, it's therefore marginally preferable\nto use `async` methods where dependencies perform IO, although synchronous dependencies should work fine too.\n\n`run` vs. `run_sync` and Asynchronous vs. Synchronous dependencies\n\nWhether you use synchronous or asynchronous dependencies, is completely independent of whether you use `run` or `run_sync` — `run_sync` is just a wrapper around `run` and agents are always run in an async context.\n\nHere's the same example as above, but with a synchronous dependency:\n\nsync\\_dependencies.py\n\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.Client\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,\n)\n\n@agent.system_prompt\ndef get_system_prompt(ctx: RunContext[MyDeps]) -> str:\n    response = ctx.deps.http_client.get(\n        'https://example.com', headers={'Authorization': f'Bearer {ctx.deps.api_key}'}\n    )\n    response.raise_for_status()\n    return f'Prompt: {response.text}'\n\nasync def main():\n    deps = MyDeps('foobar', httpx.Client())\n    result = await agent.run(\n        'Tell me a joke.',\n        deps=deps,\n    )\n    print(result.data)\n    #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\n## Full Example\n\nAs well as system prompts, dependencies can be used in [tools](https://ai.pydantic.dev/tools/) and [result validators](https://ai.pydantic.dev/results/#result-validators-functions).\n\nfull\\_example.py\n\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.AsyncClient\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,\n)\n\n@agent.system_prompt\nasync def get_system_prompt(ctx: RunContext[MyDeps]) -> str:\n    response = await ctx.deps.http_client.get('https://example.com')\n    response.raise_for_status()\n    return f'Prompt: {response.text}'\n\n@agent.tool\nasync def get_joke_material(ctx: RunContext[MyDeps], subject: str) -> str:\n    response = await ctx.deps.http_client.get(\n        'https://example.com#jokes',\n        params={'subject': subject},\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n    )\n    response.raise_for_status()\n    return response.text\n\n@agent.result_validator\nasync def validate_result(ctx: RunContext[MyDeps], final_response: str) -> str:\n    response = await ctx.deps.http_client.post(\n        'https://example.com#validate',\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n        params={'query': final_response},\n    )\n    if response.status_code == 400:\n        raise ModelRetry(f'invalid response: {response.text}')\n    response.raise_for_status()\n    return final_response\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = MyDeps('foobar', client)\n        result = await agent.run('Tell me a joke.', deps=deps)\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n_(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)_\n\n## Overriding Dependencies\n\nWhen testing agents, it's useful to be able to customise dependencies.\n\nWhile this can sometimes be done by calling the agent directly within unit tests, we can also override dependencies\nwhile calling application code which in turn calls the agent.\n\nThis is done via the [`override`](https://ai.pydantic.dev/api/agent/#pydantic_ai.agent.Agent.override) method on the agent.\n\njoke\\_app.py\n\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.AsyncClient\n\n    async def system_prompt_factory(self) -> str:\n        response = await self.http_client.get('https://example.com')\n        response.raise_for_status()\n        return f'Prompt: {response.text}'\n\njoke_agent = Agent('openai:gpt-4o', deps_type=MyDeps)\n\n@joke_agent.system_prompt\nasync def get_system_prompt(ctx: RunContext[MyDeps]) -> str:\n    return await ctx.deps.system_prompt_factory()\n\nasync def application_code(prompt: str) -> str:\n    ...\n    ...\n    # now deep within application code we call our agent\n    async with httpx.AsyncClient() as client:\n        app_deps = MyDeps('foobar', client)\n        result = await joke_agent.run(prompt, deps=app_deps)\n    return result.data\n\n```\n\n_(This example is complete, it can be run \"as is\")_\n\ntest\\_joke\\_app.py\n\n```\nfrom joke_app import MyDeps, application_code, joke_agent\n\nclass TestMyDeps(MyDeps):\n    async def system_prompt_factory(self) -> str:\n        return 'test prompt'\n\nasync def test_application_code():\n    test_deps = TestMyDeps('test_key', None)\n    with joke_agent.override(deps=test_deps):\n        joke = await application_code('Tell me a joke.')\n    assert joke.startswith('Did you hear about the toothpaste scandal?')\n\n```\n\n## Examples\n\nThe following examples demonstrate how to use dependencies in PydanticAI:\n\n- [Weather Agent](https://ai.pydantic.dev/examples/weather-agent/)\n- [SQL Generation](https://ai.pydantic.dev/examples/sql-gen/)\n- [RAG](https://ai.pydantic.dev/examples/rag/)",
    "metadata": {
      "url": "https://ai.pydantic.dev/dependencies/",
      "ogUrl": "https://ai.pydantic.dev/dependencies/",
      "title": "Dependencies - PydanticAI",
      "og:url": "https://ai.pydantic.dev/dependencies/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/dependencies.png",
      "ogTitle": "Dependencies - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/dependencies.png",
      "og:title": "Dependencies - PydanticAI",
      "scrapeId": "eb33a18b-8dc8-483b-8905-756dd0be3094",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/dependencies/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/dependencies.png",
      "twitter:title": "Dependencies - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  },
  {
    "markdown": "[Skip to content](https://ai.pydantic.dev/examples/rag/#rag)\n\nVersion Notice\n\n\nThis documentation is ahead of the last release by\n[14 commits](https://github.com/pydantic/pydantic-ai/compare/v0.0.24...main).\nYou may see documentation for features not yet supported in the latest release [v0.0.24 2025-02-12](https://github.com/pydantic/pydantic-ai/releases/tag/v0.0.24).\n\n\n# RAG\n\nRAG search example. This demo allows you to ask question of the [logfire](https://pydantic.dev/logfire) documentation.\n\nDemonstrates:\n\n- [tools](https://ai.pydantic.dev/tools/)\n- [agent dependencies](https://ai.pydantic.dev/dependencies/)\n- RAG search\n\nThis is done by creating a database containing each section of the markdown documentation, then registering\nthe search tool with the PydanticAI agent.\n\nLogic for extracting sections from markdown files and a JSON file with that data is available in\n[this gist](https://gist.github.com/samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992).\n\n[PostgreSQL with pgvector](https://github.com/pgvector/pgvector) is used as the search database, the easiest way to download and run pgvector is using Docker:\n\n```\nmkdir postgres-data\ndocker run --rm \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -p 54320:5432 \\\n  -v `pwd`/postgres-data:/var/lib/postgresql/data \\\n  pgvector/pgvector:pg17\n\n```\n\nAs with the [SQL gen](https://ai.pydantic.dev/examples/sql-gen/) example, we run postgres on port `54320` to avoid conflicts with any other postgres instances you may have running.\nWe also mount the PostgreSQL `data` directory locally to persist the data if you need to stop and restart the container.\n\nWith that running and [dependencies installed and environment variables set](https://ai.pydantic.dev/examples/#usage), we can build the search database with ( **WARNING**: this requires the `OPENAI_API_KEY` env variable and will calling the OpenAI embedding API around 300 times to generate embeddings for each section of the documentation):\n\n[pip](https://ai.pydantic.dev/examples/rag/#__tabbed_1_1)[uv](https://ai.pydantic.dev/examples/rag/#__tabbed_1_2)\n\n```\npython -m pydantic_ai_examples.rag build\n\n```\n\n```\nuv run -m pydantic_ai_examples.rag build\n\n```\n\n(Note building the database doesn't use PydanticAI right now, instead it uses the OpenAI SDK directly.)\n\nYou can then ask the agent a question with:\n\n[pip](https://ai.pydantic.dev/examples/rag/#__tabbed_2_1)[uv](https://ai.pydantic.dev/examples/rag/#__tabbed_2_2)\n\n```\npython -m pydantic_ai_examples.rag search \"How do I configure logfire to work with FastAPI?\"\n\n```\n\n```\nuv run -m pydantic_ai_examples.rag search \"How do I configure logfire to work with FastAPI?\"\n\n```\n\n## Example Code\n\nrag.py\n\n```\nfrom __future__ import annotations as _annotations\n\nimport asyncio\nimport re\nimport sys\nimport unicodedata\nfrom contextlib import asynccontextmanager\nfrom dataclasses import dataclass\n\nimport asyncpg\nimport httpx\nimport logfire\nimport pydantic_core\nfrom openai import AsyncOpenAI\nfrom pydantic import TypeAdapter\nfrom typing_extensions import AsyncGenerator\n\nfrom pydantic_ai import RunContext\nfrom pydantic_ai.agent import Agent\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\nlogfire.instrument_asyncpg()\n\n@dataclass\nclass Deps:\n    openai: AsyncOpenAI\n    pool: asyncpg.Pool\n\nagent = Agent('openai:gpt-4o', deps_type=Deps)\n\n@agent.tool\nasync def retrieve(context: RunContext[Deps], search_query: str) -> str:\n    \"\"\"Retrieve documentation sections based on a search query.\n\n    Args:\n        context: The call context.\n        search_query: The search query.\n    \"\"\"\n    with logfire.span(\n        'create embedding for {search_query=}', search_query=search_query\n    ):\n        embedding = await context.deps.openai.embeddings.create(\n            input=search_query,\n            model='text-embedding-3-small',\n        )\n\n    assert (\n        len(embedding.data) == 1\n    ), f'Expected 1 embedding, got {len(embedding.data)}, doc query: {search_query!r}'\n    embedding = embedding.data[0].embedding\n    embedding_json = pydantic_core.to_json(embedding).decode()\n    rows = await context.deps.pool.fetch(\n        'SELECT url, title, content FROM doc_sections ORDER BY embedding <-> $1 LIMIT 8',\n        embedding_json,\n    )\n    return '\\n\\n'.join(\n        f'# {row[\"title\"]}\\nDocumentation URL:{row[\"url\"]}\\n\\n{row[\"content\"]}\\n'\n        for row in rows\n    )\n\nasync def run_agent(question: str):\n    \"\"\"Entry point to run the agent and perform RAG based question answering.\"\"\"\n    openai = AsyncOpenAI()\n    logfire.instrument_openai(openai)\n\n    logfire.info('Asking \"{question}\"', question=question)\n\n    async with database_connect(False) as pool:\n        deps = Deps(openai=openai, pool=pool)\n        answer = await agent.run(question, deps=deps)\n    print(answer.data)\n\n#######################################################\n# The rest of this file is dedicated to preparing the #\n# search database, and some utilities.                #\n#######################################################\n\n# JSON document from\n# https://gist.github.com/samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992\nDOCS_JSON = (\n    'https://gist.githubusercontent.com/'\n    'samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992/raw/'\n    '80c5925c42f1442c24963aaf5eb1a324d47afe95/logfire_docs.json'\n)\n\nasync def build_search_db():\n    \"\"\"Build the search database.\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.get(DOCS_JSON)\n        response.raise_for_status()\n    sections = sessions_ta.validate_json(response.content)\n\n    openai = AsyncOpenAI()\n    logfire.instrument_openai(openai)\n\n    async with database_connect(True) as pool:\n        with logfire.span('create schema'):\n            async with pool.acquire() as conn:\n                async with conn.transaction():\n                    await conn.execute(DB_SCHEMA)\n\n        sem = asyncio.Semaphore(10)\n        async with asyncio.TaskGroup() as tg:\n            for section in sections:\n                tg.create_task(insert_doc_section(sem, openai, pool, section))\n\nasync def insert_doc_section(\n    sem: asyncio.Semaphore,\n    openai: AsyncOpenAI,\n    pool: asyncpg.Pool,\n    section: DocsSection,\n) -> None:\n    async with sem:\n        url = section.url()\n        exists = await pool.fetchval('SELECT 1 FROM doc_sections WHERE url = $1', url)\n        if exists:\n            logfire.info('Skipping {url=}', url=url)\n            return\n\n        with logfire.span('create embedding for {url=}', url=url):\n            embedding = await openai.embeddings.create(\n                input=section.embedding_content(),\n                model='text-embedding-3-small',\n            )\n        assert (\n            len(embedding.data) == 1\n        ), f'Expected 1 embedding, got {len(embedding.data)}, doc section: {section}'\n        embedding = embedding.data[0].embedding\n        embedding_json = pydantic_core.to_json(embedding).decode()\n        await pool.execute(\n            'INSERT INTO doc_sections (url, title, content, embedding) VALUES ($1, $2, $3, $4)',\n            url,\n            section.title,\n            section.content,\n            embedding_json,\n        )\n\n@dataclass\nclass DocsSection:\n    id: int\n    parent: int | None\n    path: str\n    level: int\n    title: str\n    content: str\n\n    def url(self) -> str:\n        url_path = re.sub(r'\\.md$', '', self.path)\n        return (\n            f'https://logfire.pydantic.dev/docs/{url_path}/#{slugify(self.title, \"-\")}'\n        )\n\n    def embedding_content(self) -> str:\n        return '\\n\\n'.join((f'path: {self.path}', f'title: {self.title}', self.content))\n\nsessions_ta = TypeAdapter(list[DocsSection])\n\n# pyright: reportUnknownMemberType=false\n# pyright: reportUnknownVariableType=false\n@asynccontextmanager\nasync def database_connect(\n    create_db: bool = False,\n) -> AsyncGenerator[asyncpg.Pool, None]:\n    server_dsn, database = (\n        'postgresql://postgres:postgres@localhost:54320',\n        'pydantic_ai_rag',\n    )\n    if create_db:\n        with logfire.span('check and create DB'):\n            conn = await asyncpg.connect(server_dsn)\n            try:\n                db_exists = await conn.fetchval(\n                    'SELECT 1 FROM pg_database WHERE datname = $1', database\n                )\n                if not db_exists:\n                    await conn.execute(f'CREATE DATABASE {database}')\n            finally:\n                await conn.close()\n\n    pool = await asyncpg.create_pool(f'{server_dsn}/{database}')\n    try:\n        yield pool\n    finally:\n        await pool.close()\n\nDB_SCHEMA = \"\"\"\nCREATE EXTENSION IF NOT EXISTS vector;\n\nCREATE TABLE IF NOT EXISTS doc_sections (\n    id serial PRIMARY KEY,\n    url text NOT NULL UNIQUE,\n    title text NOT NULL,\n    content text NOT NULL,\n    -- text-embedding-3-small returns a vector of 1536 floats\n    embedding vector(1536) NOT NULL\n);\nCREATE INDEX IF NOT EXISTS idx_doc_sections_embedding ON doc_sections USING hnsw (embedding vector_l2_ops);\n\"\"\"\n\ndef slugify(value: str, separator: str, unicode: bool = False) -> str:\n    \"\"\"Slugify a string, to make it URL friendly.\"\"\"\n    # Taken unchanged from https://github.com/Python-Markdown/markdown/blob/3.7/markdown/extensions/toc.py#L38\n    if not unicode:\n        # Replace Extended Latin characters with ASCII, i.e. `žlutý` => `zluty`\n        value = unicodedata.normalize('NFKD', value)\n        value = value.encode('ascii', 'ignore').decode('ascii')\n    value = re.sub(r'[^\\w\\s-]', '', value).strip().lower()\n    return re.sub(rf'[{separator}\\s]+', separator, value)\n\nif __name__ == '__main__':\n    action = sys.argv[1] if len(sys.argv) > 1 else None\n    if action == 'build':\n        asyncio.run(build_search_db())\n    elif action == 'search':\n        if len(sys.argv) == 3:\n            q = sys.argv[2]\n        else:\n            q = 'How do I configure logfire to work with FastAPI?'\n        asyncio.run(run_agent(q))\n    else:\n        print(\n            'uv run --extra examples -m pydantic_ai_examples.rag build|search',\n            file=sys.stderr,\n        )\n        sys.exit(1)\n\n```",
    "metadata": {
      "url": "https://ai.pydantic.dev/examples/rag/",
      "ogUrl": "https://ai.pydantic.dev/examples/rag/",
      "title": "RAG - PydanticAI",
      "og:url": "https://ai.pydantic.dev/examples/rag/",
      "favicon": {},
      "og:type": "website",
      "ogImage": "https://ai.pydantic.dev/assets/images/social/examples/rag.png",
      "ogTitle": "RAG - PydanticAI",
      "language": "en",
      "og:image": "https://ai.pydantic.dev/assets/images/social/examples/rag.png",
      "og:title": "RAG - PydanticAI",
      "scrapeId": "e9cb9ea2-9ffd-484c-8843-0d58fdafbcf5",
      "viewport": "width=device-width,initial-scale=1",
      "generator": "mkdocs-1.6.1, mkdocs-material-9.5.32+insiders-4.53.12",
      "sourceURL": "https://ai.pydantic.dev/examples/rag/",
      "statusCode": 200,
      "description": "Agent Framework / shim to use Pydantic with LLMs",
      "theme-color": "#00000000",
      "color-scheme": "normal",
      "twitter:card": "summary_large_image",
      "og:image:type": "image/png",
      "ogDescription": "Agent Framework / shim to use Pydantic with LLMs",
      "twitter:image": "https://ai.pydantic.dev/assets/images/social/examples/rag.png",
      "twitter:title": "RAG - PydanticAI",
      "og:description": "Agent Framework / shim to use Pydantic with LLMs",
      "og:image:width": "1200",
      "og:image:height": "630",
      "twitter:description": "Agent Framework / shim to use Pydantic with LLMs"
    }
  }
]